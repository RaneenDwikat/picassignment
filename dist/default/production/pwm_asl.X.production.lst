

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jul 26 10:09:25 2022

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  00446E                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _LCD_INIT_STRING
    78  00446E  28                 	db	40
    79  00446F  0C                 	db	12
    80  004470  01                 	db	1
    81  004471  06                 	db	6
    82                           
    83                           ;initializer for _strr
    84  004472  63                 	db	99
    85  004473  63                 	db	99
    86  004474  63                 	db	99
    87                           
    88                           	psect	idataBANK0
    89  004475                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _tes
    93  004475  CCCD               	dw	52429
    94  004477  4205               	dw	16901
    95                           
    96                           	psect	smallconst
    97  001000                     __psmallconst:
    98                           	opt stack 0
    99  001000  00                 	db	0
   100  001001                     __npowers_:
   101                           	opt stack 0
   102  001001  0000               	dw	0
   103  001003  3F80               	dw	16256
   104  001005  CCCD               	dw	52429
   105  001007  3DCC               	dw	15820
   106  001009  D70A               	dw	55050
   107  00100B  3C23               	dw	15395
   108  00100D  126F               	dw	4719
   109  00100F  3A83               	dw	14979
   110  001011  B717               	dw	46871
   111  001013  38D1               	dw	14545
   112  001015  C5AC               	dw	50604
   113  001017  3727               	dw	14119
   114  001019  37BD               	dw	14269
   115  00101B  3586               	dw	13702
   116  00101D  BF95               	dw	49045
   117  00101F  33D6               	dw	13270
   118  001021  CC77               	dw	52343
   119  001023  322B               	dw	12843
   120  001025  705F               	dw	28767
   121  001027  3089               	dw	12425
   122  001029  E6FF               	dw	59135
   123  00102B  2EDB               	dw	11995
   124  00102D  E508               	dw	58632
   125  00102F  1E3C               	dw	7740
   126  001031  4260               	dw	16992
   127  001033  0DA2               	dw	3490
   128  001035                     __end_of__npowers_:
   129                           	opt stack 0
   130  001035                     __powers_:
   131                           	opt stack 0
   132  001035  0000               	dw	0
   133  001037  3F80               	dw	16256
   134  001039  0000               	dw	0
   135  00103B  4120               	dw	16672
   136  00103D  0000               	dw	0
   137  00103F  42C8               	dw	17096
   138  001041  0000               	dw	0
   139  001043  447A               	dw	17530
   140  001045  4000               	dw	16384
   141  001047  461C               	dw	17948
   142  001049  5000               	dw	20480
   143  00104B  47C3               	dw	18371
   144  00104D  2400               	dw	9216
   145  00104F  4974               	dw	18804
   146  001051  9680               	dw	38528
   147  001053  4B18               	dw	19224
   148  001055  BC20               	dw	48160
   149  001057  4CBE               	dw	19646
   150  001059  6B28               	dw	27432
   151  00105B  4E6E               	dw	20078
   152  00105D  02F9               	dw	761
   153  00105F  5015               	dw	20501
   154  001061  78EC               	dw	30956
   155  001063  60AD               	dw	24749
   156  001065  F2CA               	dw	62154
   157  001067  7149               	dw	29001
   158  001069                     __end_of__powers_:
   159                           	opt stack 0
   160  001069                     _dpowers:
   161                           	opt stack 0
   162  001069  0001               	dw	1
   163  00106B  0000               	dw	0
   164  00106D  000A               	dw	10
   165  00106F  0000               	dw	0
   166  001071  0064               	dw	100
   167  001073  0000               	dw	0
   168  001075  03E8               	dw	1000
   169  001077  0000               	dw	0
   170  001079  2710               	dw	10000
   171  00107B  0000               	dw	0
   172  00107D  86A0               	dw	34464
   173  00107F  0001               	dw	1
   174  001081  4240               	dw	16960
   175  001083  000F               	dw	15
   176  001085  9680               	dw	38528
   177  001087  0098               	dw	152
   178  001089  E100               	dw	57600
   179  00108B  05F5               	dw	1525
   180  00108D  CA00               	dw	51712
   181  00108F  3B9A               	dw	15258
   182  001091                     __end_of_dpowers:
   183                           	opt stack 0
   184  0000                     _ADCON0	set	4034
   185  0000                     _ADCON0bits	set	4034
   186  0000                     _ADCON1	set	4033
   187  0000                     _ADCON2	set	4032
   188  0000                     _ADRESH	set	4036
   189  0000                     _ADRESL	set	4035
   190  0000                     _BAUDCONbits	set	4024
   191  0000                     _CCP1CON	set	4029
   192  0000                     _CCP1CONbits	set	4029
   193  0000                     _CCPR1L	set	4030
   194  0000                     _INTCON	set	4082
   195  0000                     _INTCONbits	set	4082
   196  0000                     _PIE1	set	3997
   197  0000                     _PIE1bits	set	3997
   198  0000                     _PIE2	set	4000
   199  0000                     _PIR1	set	3998
   200  0000                     _PIR1bits	set	3998
   201  0000                     _PORTAbits	set	3968
   202  0000                     _PORTBbits	set	3969
   203  0000                     _PORTCbits	set	3970
   204  0000                     _PORTD	set	3971
   205  0000                     _PORTEbits	set	3972
   206  0000                     _PR2	set	4043
   207  0000                     _RCONbits	set	4048
   208  0000                     _RCREG	set	4014
   209  0000                     _RCSTA	set	4011
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _SPBRG	set	4015
   212  0000                     _SPBRGH	set	4016
   213  0000                     _T1CON	set	4045
   214  0000                     _T1CONbits	set	4045
   215  0000                     _T2CON	set	4042
   216  0000                     _T2CONbits	set	4042
   217  0000                     _TMR1H	set	4047
   218  0000                     _TMR1L	set	4046
   219  0000                     _TRISA	set	3986
   220  0000                     _TRISB	set	3987
   221  0000                     _TRISC	set	3988
   222  0000                     _TRISCbits	set	3988
   223  0000                     _TRISD	set	3989
   224  0000                     _TRISE	set	3990
   225  0000                     _TXREG	set	4013
   226  0000                     _TXSTA	set	4012
   227  0000                     _TXSTAbits	set	4012
   228  001091                     STR_4:
   229  001091  6C                 	db	108	;'l'
   230  001092  65                 	db	101	;'e'
   231  001093  76                 	db	118	;'v'
   232  001094  65                 	db	101	;'e'
   233  001095  6C                 	db	108	;'l'
   234  001096  20                 	db	32
   235  001097  6F                 	db	111	;'o'
   236  001098  66                 	db	102	;'f'
   237  001099  20                 	db	32
   238  00109A  73                 	db	115	;'s'
   239  00109B  70                 	db	112	;'p'
   240  00109C  65                 	db	101	;'e'
   241  00109D  65                 	db	101	;'e'
   242  00109E  64                 	db	100	;'d'
   243  00109F  3D                 	db	61	;'='
   244  0010A0  25                 	db	37
   245  0010A1  31                 	db	49	;'1'
   246  0010A2  2E                 	db	46
   247  0010A3  31                 	db	49	;'1'
   248  0010A4  66                 	db	102	;'f'
   249  0010A5  00                 	db	0
   250  0010A6                     STR_1:
   251  0010A6  56                 	db	86	;'V'
   252  0010A7  25                 	db	37
   253  0010A8  64                 	db	100	;'d'
   254  0010A9  3A                 	db	58	;':'
   255  0010AA  25                 	db	37
   256  0010AB  36                 	db	54	;'6'
   257  0010AC  2E                 	db	46
   258  0010AD  32                 	db	50	;'2'
   259  0010AE  66                 	db	102	;'f'
   260  0010AF  20                 	db	32
   261  0010B0  76                 	db	118	;'v'
   262  0010B1  6F                 	db	111	;'o'
   263  0010B2  6C                 	db	108	;'l'
   264  0010B3  74                 	db	116	;'t'
   265  0010B4  0D                 	db	13
   266  0010B5  00                 	db	0
   267  0010B6                     STR_2:
   268  0010B6  74                 	db	116	;'t'
   269  0010B7  65                 	db	101	;'e'
   270  0010B8  6D                 	db	109	;'m'
   271  0010B9  70                 	db	112	;'p'
   272  0010BA  3D                 	db	61	;'='
   273  0010BB  25                 	db	37
   274  0010BC  33                 	db	51	;'3'
   275  0010BD  2E                 	db	46
   276  0010BE  32                 	db	50	;'2'
   277  0010BF  66                 	db	102	;'f'
   278  0010C0  20                 	db	32
   279  0010C1  43                 	db	67	;'C'
   280  0010C2  00                 	db	0
   281  0010C3                     STR_3:
   282  0010C3  74                 	db	116	;'t'
   283  0010C4  65                 	db	101	;'e'
   284  0010C5  6D                 	db	109	;'m'
   285  0010C6  70                 	db	112	;'p'
   286  0010C7  3D                 	db	61	;'='
   287  0010C8  25                 	db	37
   288  0010C9  33                 	db	51	;'3'
   289  0010CA  2E                 	db	46
   290  0010CB  32                 	db	50	;'2'
   291  0010CC  66                 	db	102	;'f'
   292  0010CD  20                 	db	32
   293  0010CE  46                 	db	70	;'F'
   294  0010CF  00                 	db	0
   295  0010D0                     STR_5:
   296  0010D0  74                 	db	116	;'t'
   297  0010D1  68                 	db	104	;'h'
   298  0010D2  72                 	db	114	;'r'
   299  0010D3  65                 	db	101	;'e'
   300  0010D4  73                 	db	115	;'s'
   301  0010D5  68                 	db	104	;'h'
   302  0010D6  3D                 	db	61	;'='
   303  0010D7  25                 	db	37
   304  0010D8  31                 	db	49	;'1'
   305  0010D9  2E                 	db	46
   306  0010DA  31                 	db	49	;'1'
   307  0010DB  66                 	db	102	;'f'
   308  0010DC  00                 	db	0
   309  0010DD                     STR_6:
   310  0010DD  57                 	db	87	;'W'
   311  0010DE  61                 	db	97	;'a'
   312  0010DF  72                 	db	114	;'r'
   313  0010E0  6E                 	db	110	;'n'
   314  0010E1  69                 	db	105	;'i'
   315  0010E2  6E                 	db	110	;'n'
   316  0010E3  67                 	db	103	;'g'
   317  0010E4  21                 	db	33
   318  0010E5  00                 	db	0
   319  0000                     
   320                           ; #config settings
   321  0010E6  00                 	db	0	; dummy byte at the end
   322  0000                     
   323                           	psect	cinit
   324  003F80                     __pcinit:
   325                           	opt stack 0
   326  003F80                     start_initialization:
   327                           	opt stack 0
   328  003F80                     __initialization:
   329                           	opt stack 0
   330                           
   331                           ; Clear objects allocated to BANK1 (2 bytes)
   332  003F80  0101               	movlb	1
   333  003F82  6B44               	clrf	(__pbssBANK1+1)& (0+255),b
   334  003F84  6B43               	clrf	__pbssBANK1& (0+255),b
   335                           
   336                           ; Clear objects allocated to COMRAM (14 bytes)
   337  003F86  EE00  F053         	lfsr	0,__pbssCOMRAM
   338  003F8A  0E0E               	movlw	14
   339  003F8C                     clear_0:
   340  003F8C  6AEE               	clrf	postinc0,c
   341  003F8E  06E8               	decf	wreg,f,c
   342  003F90  E1FD               	bnz	clear_0
   343                           
   344                           ; Initialize objects allocated to BANK0 (4 bytes)
   345                           ; load TBLPTR registers with __pidataBANK0
   346  003F92  0E75               	movlw	low __pidataBANK0
   347  003F94  6EF6               	movwf	tblptrl,c
   348  003F96  0E44               	movlw	high __pidataBANK0
   349  003F98  6EF7               	movwf	tblptrh,c
   350  003F9A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   351  003F9C  6EF8               	movwf	tblptru,c
   352  003F9E  EE00  F0E0         	lfsr	0,__pdataBANK0
   353  003FA2  EE10 F004          	lfsr	1,4
   354  003FA6                     copy_data0:
   355  003FA6  0009               	tblrd		*+
   356  003FA8  CFF5 FFEE          	movff	tablat,postinc0
   357  003FAC  50E5               	movf	postdec1,w,c
   358  003FAE  50E1               	movf	fsr1l,w,c
   359  003FB0  E1FA               	bnz	copy_data0
   360                           
   361                           ; Initialize objects allocated to COMRAM (7 bytes)
   362                           ; load TBLPTR registers with __pidataCOMRAM
   363  003FB2  0E6E               	movlw	low __pidataCOMRAM
   364  003FB4  6EF6               	movwf	tblptrl,c
   365  003FB6  0E44               	movlw	high __pidataCOMRAM
   366  003FB8  6EF7               	movwf	tblptrh,c
   367  003FBA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   368  003FBC  6EF8               	movwf	tblptru,c
   369  003FBE  EE00  F061         	lfsr	0,__pdataCOMRAM
   370  003FC2  EE10 F007          	lfsr	1,7
   371  003FC6                     copy_data1:
   372  003FC6  0009               	tblrd		*+
   373  003FC8  CFF5 FFEE          	movff	tablat,postinc0
   374  003FCC  50E5               	movf	postdec1,w,c
   375  003FCE  50E1               	movf	fsr1l,w,c
   376  003FD0  E1FA               	bnz	copy_data1
   377  003FD2                     end_of_initialization:
   378                           	opt stack 0
   379  003FD2                     __end_of__initialization:
   380                           	opt stack 0
   381  003FD2  9068               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   382  003FD4  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   383  003FD6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   384  003FD8  6EF8               	movwf	tblptru,c
   385  003FDA  0100               	movlb	0
   386  003FDC  EF9F  F010         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	bssCOMRAM
   397  000053                     __pbssCOMRAM:
   398                           	opt stack 0
   399  000053                     _RPS_count:
   400                           	opt stack 0
   401  000053                     	ds	2
   402  000055                     _count_t1:
   403                           	opt stack 0
   404  000055                     	ds	2
   405  000057                     _count_t2:
   406                           	opt stack 0
   407  000057                     	ds	2
   408  000059                     _errno:
   409                           	opt stack 0
   410  000059                     	ds	2
   411  00005B                     _p2:
   412                           	opt stack 0
   413  00005B                     	ds	2
   414  00005D                     _size:
   415                           	opt stack 0
   416  00005D                     	ds	2
   417  00005F                     _ReceivedChar:
   418                           	opt stack 0
   419  00005F                     	ds	1
   420  000060                     _test0:
   421                           	opt stack 0
   422  000060                     	ds	1
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           postdec1	equ	0xFE5
   430                           fsr1l	equ	0xFE1
   431                           
   432                           	psect	dataCOMRAM
   433  000061                     __pdataCOMRAM:
   434                           	opt stack 0
   435  000061                     _LCD_INIT_STRING:
   436                           	opt stack 0
   437  000061                     	ds	4
   438  000065                     _strr:
   439                           	opt stack 0
   440  000065                     	ds	3
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	dataBANK0
   451  0000E0                     __pdataBANK0:
   452                           	opt stack 0
   453  0000E0                     _tes:
   454                           	opt stack 0
   455  0000E0                     	ds	4
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	bssBANK1
   466  000143                     __pbssBANK1:
   467                           	opt stack 0
   468  000143                     _f:
   469                           	opt stack 0
   470  000143                     	ds	2
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	cstackBANK1
   481  000100                     __pcstackBANK1:
   482                           	opt stack 0
   483  000100                     main@Buffer:
   484                           	opt stack 0
   485                           
   486                           ; 32 bytes @ 0x0
   487  000100                     	ds	32
   488  000120                     _main$2149:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x20
   492  000120                     	ds	4
   493  000124                     _main$2150:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x24
   497  000124                     	ds	4
   498  000128                     main@raw_val:
   499                           	opt stack 0
   500                           
   501                           ; 2 bytes @ 0x28
   502  000128                     	ds	2
   503  00012A                     main@SendToSerial:
   504                           	opt stack 0
   505                           
   506                           ; 1 bytes @ 0x2A
   507  00012A                     	ds	1
   508  00012B                     main@threshold:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0x2B
   512  00012B                     	ds	4
   513  00012F                     main@voltage:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x2F
   517  00012F                     	ds	4
   518  000133                     main@flag:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x33
   522  000133                     	ds	2
   523  000135                     main@AN:
   524                           	opt stack 0
   525                           
   526                           ; 12 bytes @ 0x35
   527  000135                     	ds	12
   528  000141                     main@RecvedChar:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x41
   532  000141                     	ds	1
   533  000142                     main@channel:
   534                           	opt stack 0
   535                           
   536                           ; 1 bytes @ 0x42
   537  000142                     	ds	1
   538                           tblptru	equ	0xFF8
   539                           tblptrh	equ	0xFF7
   540                           tblptrl	equ	0xFF6
   541                           tablat	equ	0xFF5
   542                           postinc0	equ	0xFEE
   543                           wreg	equ	0xFE8
   544                           postdec1	equ	0xFE5
   545                           fsr1l	equ	0xFE1
   546                           
   547                           	psect	cstackBANK0
   548  000080                     __pcstackBANK0:
   549                           	opt stack 0
   550  000080                     ?___fldiv:
   551                           	opt stack 0
   552  000080                     ___fldiv@b:
   553                           	opt stack 0
   554  000080                     _fround$2152:
   555                           	opt stack 0
   556                           
   557                           ; 4 bytes @ 0x0
   558  000080                     	ds	4
   559  000084                     ___fldiv@a:
   560                           	opt stack 0
   561  000084                     _fround$2151:
   562                           	opt stack 0
   563                           
   564                           ; 4 bytes @ 0x4
   565  000084                     	ds	4
   566  000088                     ??___fldiv:
   567  000088                     fround@prec:
   568                           	opt stack 0
   569                           
   570                           ; 1 bytes @ 0x8
   571  000088                     	ds	4
   572  00008C                     ___fldiv@sign:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0xC
   576  00008C                     	ds	1
   577  00008D                     ___fldiv@rem:
   578                           	opt stack 0
   579                           
   580                           ; 4 bytes @ 0xD
   581  00008D                     	ds	4
   582  000091                     ___fldiv@new_exp:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x11
   586  000091                     	ds	2
   587  000093                     ___fldiv@grs:
   588                           	opt stack 0
   589                           
   590                           ; 4 bytes @ 0x13
   591  000093                     	ds	4
   592  000097                     ___fldiv@bexp:
   593                           	opt stack 0
   594                           
   595                           ; 1 bytes @ 0x17
   596  000097                     	ds	1
   597  000098                     ___fldiv@aexp:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x18
   601  000098                     	ds	1
   602  000099                     ?_read_adc_voltage:
   603                           	opt stack 0
   604  000099                     ?___fladd:
   605                           	opt stack 0
   606  000099                     ___fladd@b:
   607                           	opt stack 0
   608                           
   609                           ; 4 bytes @ 0x19
   610  000099                     	ds	4
   611  00009D                     read_adc_voltage@voltage:
   612                           	opt stack 0
   613  00009D                     ___fladd@a:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x1D
   617  00009D                     	ds	4
   618  0000A1                     ??___fladd:
   619  0000A1                     read_adc_voltage@channel:
   620                           	opt stack 0
   621                           
   622                           ; 1 bytes @ 0x21
   623  0000A1                     	ds	1
   624  0000A2                     read_adc_voltage@raw_value:
   625                           	opt stack 0
   626                           
   627                           ; 2 bytes @ 0x22
   628  0000A2                     	ds	7
   629  0000A9                     ___fladd@signs:
   630                           	opt stack 0
   631                           
   632                           ; 1 bytes @ 0x29
   633  0000A9                     	ds	1
   634  0000AA                     ___fladd@aexp:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x2A
   638  0000AA                     	ds	1
   639  0000AB                     ___fladd@bexp:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x2B
   643  0000AB                     	ds	1
   644  0000AC                     ___fladd@grs:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x2C
   648  0000AC                     	ds	1
   649  0000AD                     ?_floor:
   650                           	opt stack 0
   651  0000AD                     ?_read_adc_temp:
   652                           	opt stack 0
   653  0000AD                     ?___flsub:
   654                           	opt stack 0
   655  0000AD                     floor@x:
   656                           	opt stack 0
   657  0000AD                     ___flsub@b:
   658                           	opt stack 0
   659                           
   660                           ; 4 bytes @ 0x2D
   661  0000AD                     	ds	4
   662  0000B1                     read_adc_temp@temp:
   663                           	opt stack 0
   664  0000B1                     floor@i:
   665                           	opt stack 0
   666  0000B1                     ___flsub@a:
   667                           	opt stack 0
   668                           
   669                           ; 4 bytes @ 0x31
   670  0000B1                     	ds	4
   671  0000B5                     read_adc_temp@channel:
   672                           	opt stack 0
   673  0000B5                     floor@expon:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x35
   677  0000B5                     	ds	1
   678  0000B6                     read_adc_temp@raw_value:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x36
   682  0000B6                     	ds	1
   683  0000B7                     ?_sprintf:
   684                           	opt stack 0
   685  0000B7                     sprintf@sp:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x37
   689  0000B7                     	ds	2
   690  0000B9                     sprintf@f:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x39
   694  0000B9                     	ds	8
   695  0000C1                     ??_sprintf:
   696                           
   697                           ; 1 bytes @ 0x41
   698  0000C1                     	ds	4
   699  0000C5                     _sprintf$2154:
   700                           	opt stack 0
   701                           
   702                           ; 4 bytes @ 0x45
   703  0000C5                     	ds	4
   704  0000C9                     sprintf@ap:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x49
   708  0000C9                     	ds	2
   709  0000CB                     sprintf@flag:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x4B
   713  0000CB                     	ds	2
   714  0000CD                     sprintf@width:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x4D
   718  0000CD                     	ds	2
   719  0000CF                     sprintf@tmpval:
   720                           	opt stack 0
   721                           
   722                           ; 4 bytes @ 0x4F
   723  0000CF                     	ds	4
   724  0000D3                     sprintf@val:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x53
   728  0000D3                     	ds	4
   729  0000D7                     sprintf@exp:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x57
   733  0000D7                     	ds	2
   734  0000D9                     sprintf@fval:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x59
   738  0000D9                     	ds	4
   739  0000DD                     sprintf@prec:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x5D
   743  0000DD                     	ds	2
   744  0000DF                     sprintf@c:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x5F
   748  0000DF                     	ds	1
   749                           tblptru	equ	0xFF8
   750                           tblptrh	equ	0xFF7
   751                           tblptrl	equ	0xFF6
   752                           tablat	equ	0xFF5
   753                           postinc0	equ	0xFEE
   754                           wreg	equ	0xFE8
   755                           postdec1	equ	0xFE5
   756                           fsr1l	equ	0xFE1
   757                           
   758                           	psect	cstackCOMRAM
   759  000001                     __pcstackCOMRAM:
   760                           	opt stack 0
   761  000001                     ??_RX_isr:
   762  000001                     ?___lwmod:
   763                           	opt stack 0
   764  000001                     ?i2___wmul:
   765                           	opt stack 0
   766  000001                     ___lwmod@dividend:
   767                           	opt stack 0
   768  000001                     i2___wmul@multiplier:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x0
   772  000001                     	ds	2
   773  000003                     ___lwmod@divisor:
   774                           	opt stack 0
   775  000003                     i2___wmul@multiplicand:
   776                           	opt stack 0
   777                           
   778                           ; 2 bytes @ 0x2
   779  000003                     	ds	2
   780  000005                     ___lwmod@counter:
   781                           	opt stack 0
   782  000005                     i2___wmul@product:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x4
   786  000005                     	ds	2
   787  000007                     Timer1_isr@f:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x6
   791  000007                     	ds	2
   792  000009                     ??_Timer1_isr:
   793                           
   794                           ; 1 bytes @ 0x8
   795  000009                     	ds	1
   796  00000A                     ??_highIsr:
   797                           
   798                           ; 1 bytes @ 0x9
   799  00000A                     	ds	14
   800  000018                     ??_isdigit:
   801  000018                     ??_delay_cycles:
   802  000018                     ?_read_adc_raw_no_lib:
   803                           	opt stack 0
   804  000018                     ?___wmul:
   805                           	opt stack 0
   806  000018                     ?___awdiv:
   807                           	opt stack 0
   808  000018                     ?__tdiv_to_l_:
   809                           	opt stack 0
   810  000018                     ?__div_to_l_:
   811                           	opt stack 0
   812  000018                     ?___flneg:
   813                           	opt stack 0
   814  000018                     ?___lldiv:
   815                           	opt stack 0
   816  000018                     setupSerial@dummy:
   817                           	opt stack 0
   818  000018                     read_byte_no_lib@c:
   819                           	opt stack 0
   820  000018                     send_byte_no_lib@c:
   821                           	opt stack 0
   822  000018                     display7seg@v:
   823                           	opt stack 0
   824  000018                     delay_ms@n:
   825                           	opt stack 0
   826  000018                     set_pwm1_raw@raw_value:
   827                           	opt stack 0
   828  000018                     ___wmul@multiplier:
   829                           	opt stack 0
   830  000018                     ___awdiv@dividend:
   831                           	opt stack 0
   832  000018                     __div_to_l_@f1:
   833                           	opt stack 0
   834  000018                     ___flneg@f1:
   835                           	opt stack 0
   836  000018                     frexp@value:
   837                           	opt stack 0
   838  000018                     __tdiv_to_l_@f1:
   839                           	opt stack 0
   840  000018                     ___lldiv@dividend:
   841                           	opt stack 0
   842                           
   843                           ; 4 bytes @ 0x17
   844  000018                     	ds	1
   845  000019                     _isdigit$1798:
   846                           	opt stack 0
   847  000019                     send_string_no_lib@p:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x18
   851  000019                     	ds	1
   852  00001A                     ??_read_adc_raw_no_lib:
   853  00001A                     ??_set_pwm1_raw:
   854  00001A                     isdigit@c:
   855                           	opt stack 0
   856  00001A                     delay_ms@x:
   857                           	opt stack 0
   858  00001A                     ___wmul@multiplicand:
   859                           	opt stack 0
   860  00001A                     ___awdiv@divisor:
   861                           	opt stack 0
   862                           
   863                           ; 2 bytes @ 0x19
   864  00001A                     	ds	1
   865  00001B                     delay_cycles@n:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x1A
   869  00001B                     	ds	1
   870  00001C                     read_adc_raw_no_lib@channel:
   871                           	opt stack 0
   872  00001C                     ___awdiv@counter:
   873                           	opt stack 0
   874  00001C                     delay_cycles@x:
   875                           	opt stack 0
   876  00001C                     ___wmul@product:
   877                           	opt stack 0
   878  00001C                     frexp@eptr:
   879                           	opt stack 0
   880  00001C                     __div_to_l_@f2:
   881                           	opt stack 0
   882  00001C                     __tdiv_to_l_@f2:
   883                           	opt stack 0
   884  00001C                     ___lldiv@divisor:
   885                           	opt stack 0
   886                           
   887                           ; 4 bytes @ 0x1B
   888  00001C                     	ds	1
   889  00001D                     ___awdiv@sign:
   890                           	opt stack 0
   891  00001D                     read_adc_raw_no_lib@raw_value:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x1C
   895  00001D                     	ds	1
   896  00001E                     ??_frexp:
   897  00001E                     ??_lcd_send_nibble:
   898  00001E                     ___awdiv@quotient:
   899                           	opt stack 0
   900                           
   901                           ; 2 bytes @ 0x1D
   902  00001E                     	ds	1
   903  00001F                     lcd_send_nibble@n:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x1E
   907  00001F                     	ds	1
   908  000020                     ??__tdiv_to_l_:
   909  000020                     ?___flmul:
   910                           	opt stack 0
   911  000020                     lcd_send_byte@n:
   912                           	opt stack 0
   913  000020                     __div_to_l_@quot:
   914                           	opt stack 0
   915  000020                     ___lldiv@quotient:
   916                           	opt stack 0
   917  000020                     ___flmul@b:
   918                           	opt stack 0
   919                           
   920                           ; 4 bytes @ 0x1F
   921  000020                     	ds	1
   922  000021                     lcd_send_byte@cm_data:
   923                           	opt stack 0
   924                           
   925                           ; 1 bytes @ 0x20
   926  000021                     	ds	1
   927  000022                     lcd_init@i:
   928                           	opt stack 0
   929  000022                     lcd_gotoxy@y:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x21
   933  000022                     	ds	1
   934  000023                     lcd_gotoxy@x:
   935                           	opt stack 0
   936  000023                     __tdiv_to_l_@quot:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x22
   940  000023                     	ds	1
   941  000024                     lcd_gotoxy@address:
   942                           	opt stack 0
   943  000024                     __div_to_l_@cntr:
   944                           	opt stack 0
   945  000024                     ___lldiv@counter:
   946                           	opt stack 0
   947  000024                     ___flmul@a:
   948                           	opt stack 0
   949                           
   950                           ; 4 bytes @ 0x23
   951  000024                     	ds	1
   952  000025                     ?___llmod:
   953                           	opt stack 0
   954  000025                     lcd_putc@c:
   955                           	opt stack 0
   956  000025                     __div_to_l_@exp1:
   957                           	opt stack 0
   958  000025                     ___llmod@dividend:
   959                           	opt stack 0
   960                           
   961                           ; 4 bytes @ 0x24
   962  000025                     	ds	1
   963  000026                     lcd_puts@s:
   964                           	opt stack 0
   965                           
   966                           ; 2 bytes @ 0x25
   967  000026                     	ds	1
   968  000027                     __tdiv_to_l_@cntr:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x26
   972  000027                     	ds	1
   973  000028                     ??___flmul:
   974  000028                     __tdiv_to_l_@exp1:
   975                           	opt stack 0
   976                           
   977                           ; 1 bytes @ 0x27
   978  000028                     	ds	1
   979  000029                     ___llmod@divisor:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x28
   983  000029                     	ds	3
   984  00002C                     ___flmul@sign:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x2B
   988  00002C                     	ds	1
   989  00002D                     ___llmod@counter:
   990                           	opt stack 0
   991  00002D                     ___flmul@aexp:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x2C
   995  00002D                     	ds	1
   996  00002E                     ___flmul@grs:
   997                           	opt stack 0
   998                           
   999                           ; 4 bytes @ 0x2D
  1000  00002E                     	ds	4
  1001  000032                     ___flmul@bexp:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x31
  1005  000032                     	ds	1
  1006  000033                     ___flmul@prod:
  1007                           	opt stack 0
  1008                           
  1009                           ; 4 bytes @ 0x32
  1010  000033                     	ds	4
  1011  000037                     ___flmul@temp:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x36
  1015  000037                     	ds	2
  1016  000039                     ?___fltol:
  1017                           	opt stack 0
  1018  000039                     ___flge@ff1:
  1019                           	opt stack 0
  1020  000039                     ___fltol@f1:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x38
  1024  000039                     	ds	4
  1025  00003D                     ??___fltol:
  1026  00003D                     ___flge@ff2:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x3C
  1030  00003D                     	ds	4
  1031  000041                     ??___flge:
  1032  000041                     ___fltol@sign1:
  1033                           	opt stack 0
  1034                           
  1035                           ; 1 bytes @ 0x40
  1036  000041                     	ds	1
  1037  000042                     ___fltol@exp1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x41
  1041  000042                     	ds	1
  1042  000043                     ?___awmod:
  1043                           	opt stack 0
  1044  000043                     ?___xxtofl:
  1045                           	opt stack 0
  1046  000043                     ___awmod@dividend:
  1047                           	opt stack 0
  1048  000043                     ___xxtofl@val:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x42
  1052  000043                     	ds	2
  1053  000045                     ___awmod@divisor:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x44
  1057  000045                     	ds	2
  1058  000047                     ??___xxtofl:
  1059  000047                     ___awmod@counter:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x46
  1063  000047                     	ds	1
  1064  000048                     ___awmod@sign:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x47
  1068  000048                     	ds	1
  1069  000049                     ?_fround:
  1070                           	opt stack 0
  1071  000049                     ?_scale:
  1072                           	opt stack 0
  1073                           
  1074                           ; 4 bytes @ 0x48
  1075  000049                     	ds	2
  1076  00004B                     ___xxtofl@sign:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x4A
  1080  00004B                     	ds	1
  1081  00004C                     ___xxtofl@exp:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x4B
  1085  00004C                     	ds	1
  1086  00004D                     ___xxtofl@arg:
  1087                           	opt stack 0
  1088  00004D                     _scale$2153:
  1089                           	opt stack 0
  1090                           
  1091                           ; 4 bytes @ 0x4C
  1092  00004D                     	ds	4
  1093  000051                     scale@scl:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x50
  1097  000051                     	ds	1
  1098  000052                     ??_main:
  1099                           
  1100                           ; 1 bytes @ 0x51
  1101  000052                     	ds	1
  1102                           tblptru	equ	0xFF8
  1103                           tblptrh	equ	0xFF7
  1104                           tblptrl	equ	0xFF6
  1105                           tablat	equ	0xFF5
  1106                           postinc0	equ	0xFEE
  1107                           wreg	equ	0xFE8
  1108                           postdec1	equ	0xFE5
  1109                           fsr1l	equ	0xFE1
  1110                           
  1111 ;;
  1112 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1113 ;;
  1114 ;; *************** function _main *****************
  1115 ;; Defined at:
  1116 ;;		line 141 in file "pwm_asl.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;  Buffer         32    0[BANK1 ] unsigned char [32]
  1121 ;;  AN             12   53[BANK1 ] float [3]
  1122 ;;  voltage         4   47[BANK1 ] float 
  1123 ;;  threshold       4   43[BANK1 ] float 
  1124 ;;  flag            2   51[BANK1 ] int 
  1125 ;;  raw_val         2   40[BANK1 ] int 
  1126 ;;  channel         1   66[BANK1 ] unsigned char 
  1127 ;;  RecvedChar      1   65[BANK1 ] unsigned char 
  1128 ;;  SendToSerial    1   42[BANK1 ] unsigned char 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;                  1    wreg      void 
  1131 ;; Registers used:
  1132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;      Locals:         0       0      67       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1141 ;;      Totals:         1       0      67       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;Total ram usage:       68 bytes
  1143 ;; Hardware stack levels required when called:    9
  1144 ;; This function calls:
  1145 ;;		___awmod
  1146 ;;		___fladd
  1147 ;;		___flge
  1148 ;;		___flmul
  1149 ;;		___fltol
  1150 ;;		_delay_ms
  1151 ;;		_display7seg
  1152 ;;		_floor
  1153 ;;		_initTimers01
  1154 ;;		_init_adc_no_lib
  1155 ;;		_init_pwm1
  1156 ;;		_is_byte_available
  1157 ;;		_lcd_gotoxy
  1158 ;;		_lcd_init
  1159 ;;		_lcd_putc
  1160 ;;		_lcd_puts
  1161 ;;		_read_adc_raw_no_lib
  1162 ;;		_read_adc_temp
  1163 ;;		_read_adc_voltage
  1164 ;;		_read_byte_no_lib
  1165 ;;		_send_string_no_lib
  1166 ;;		_set_pwm1_raw
  1167 ;;		_setupPorts
  1168 ;;		_setupSerial
  1169 ;;		_sprintf
  1170 ;; This function is called by:
  1171 ;;		Startup code after reset
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           	psect	text0
  1176  00213E                     __ptext0:
  1177                           	opt stack 0
  1178  00213E                     _main:
  1179                           	opt stack 22
  1180                           
  1181                           ;pwm_asl.c: 143: size=0;
  1182                           
  1183                           ;incstack = 0
  1184  00213E  0E00               	movlw	0
  1185  002140  6E5E               	movwf	_size+1,c
  1186  002142  0E00               	movlw	0
  1187  002144  6E5D               	movwf	_size,c
  1188                           
  1189                           ;pwm_asl.c: 145: char Buffer[32];
  1190                           ;pwm_asl.c: 146: float AN[3];
  1191                           ;pwm_asl.c: 147: int raw_val;
  1192                           ;pwm_asl.c: 148: float threshold;
  1193                           ;pwm_asl.c: 149: int flag=0;
  1194  002146  0E00               	movlw	0
  1195  002148  0101               	movlb	1	; () banked
  1196  00214A  6F34               	movwf	(main@flag+1)& (0+255),b
  1197  00214C  0E00               	movlw	0
  1198  00214E  6F33               	movwf	main@flag& (0+255),b
  1199                           
  1200                           ; BSR set to: 1
  1201                           ;pwm_asl.c: 150: unsigned char channel;
  1202                           ;pwm_asl.c: 151: float voltage;
  1203                           ;pwm_asl.c: 152: setupPorts();
  1204  002150  ECF8  F021         	call	_setupPorts	;wreg free
  1205                           
  1206                           ;pwm_asl.c: 153: setupSerial();
  1207  002154  ECA2  F021         	call	_setupSerial	;wreg free
  1208                           
  1209                           ;pwm_asl.c: 154: lcd_init();
  1210  002158  EC8F  F01F         	call	_lcd_init	;wreg free
  1211                           
  1212                           ;pwm_asl.c: 155: init_adc_no_lib();
  1213  00215C  EC23  F022         	call	_init_adc_no_lib	;wreg free
  1214                           
  1215                           ;pwm_asl.c: 156: init_pwm1();
  1216  002160  EC1B  F022         	call	_init_pwm1	;wreg free
  1217                           
  1218                           ;pwm_asl.c: 158: PORTCbits.RC5 = 1;
  1219  002164  8A82               	bsf	3970,5,c	;volatile
  1220                           
  1221                           ;pwm_asl.c: 159: lcd_putc('\f');
  1222  002166  0E0C               	movlw	12
  1223  002168  EC20  F020         	call	_lcd_putc
  1224                           
  1225                           ;pwm_asl.c: 160: unsigned char RecvedChar = 0;
  1226  00216C  0E00               	movlw	0
  1227  00216E  0101               	movlb	1	; () banked
  1228  002170  6F41               	movwf	main@RecvedChar& (0+255),b
  1229                           
  1230                           ; BSR set to: 1
  1231                           ;pwm_asl.c: 161: unsigned char SendToSerial = 0;
  1232  002172  0E00               	movlw	0
  1233  002174  0101               	movlb	1	; () banked
  1234  002176  6F2A               	movwf	main@SendToSerial& (0+255),b
  1235                           
  1236                           ; BSR set to: 1
  1237                           ;pwm_asl.c: 162: initTimers01();
  1238  002178  ECF2  F020         	call	_initTimers01	;wreg free
  1239                           
  1240                           ;pwm_asl.c: 163: TRISCbits.RC0 = 1;
  1241  00217C  8094               	bsf	3988,0,c	;volatile
  1242  00217E                     l5681:
  1243  00217E  0101               	movlb	1	; () banked
  1244  002180  5143               	movf	_f& (0+255),w,b
  1245  002182  0101               	movlb	1	; () banked
  1246  002184  1144               	iorwf	(_f+1)& (0+255),w,b
  1247  002186  B4D8               	btfsc	status,2,c
  1248  002188  D7FA               	goto	l5681
  1249  00218A                     l5683:
  1250                           
  1251                           ;pwm_asl.c: 167: if (!f){
  1252  00218A  0101               	movlb	1	; () banked
  1253  00218C  5143               	movf	_f& (0+255),w,b
  1254  00218E  0101               	movlb	1	; () banked
  1255  002190  1144               	iorwf	(_f+1)& (0+255),w,b
  1256  002192  A4D8               	btfss	status,2,c
  1257  002194  D009               	goto	l5689
  1258                           
  1259                           ; BSR set to: 1
  1260                           ;pwm_asl.c: 168: lcd_putc('\f');
  1261  002196  0E0C               	movlw	12
  1262  002198  EC20  F020         	call	_lcd_putc
  1263  00219C                     l5687:
  1264  00219C  0101               	movlb	1	; () banked
  1265  00219E  5143               	movf	_f& (0+255),w,b
  1266  0021A0  0101               	movlb	1	; () banked
  1267  0021A2  1144               	iorwf	(_f+1)& (0+255),w,b
  1268  0021A4  B4D8               	btfsc	status,2,c
  1269  0021A6  D7FA               	goto	l5687
  1270  0021A8                     l5689:
  1271                           
  1272                           ; BSR set to: 1
  1273                           ;pwm_asl.c: 170: }
  1274                           ;pwm_asl.c: 173: PORTCbits.RC5 = !PORTCbits.RC5;
  1275  0021A8  BA82               	btfsc	3970,5,c	;volatile
  1276  0021AA  D003               	goto	u6710
  1277  0021AC  6A52               	clrf	??_main& (0+255),c
  1278  0021AE  2A52               	incf	??_main& (0+255),f,c
  1279  0021B0  D001               	goto	u6728
  1280  0021B2                     u6710:
  1281  0021B2  6A52               	clrf	??_main& (0+255),c
  1282  0021B4                     u6728:
  1283  0021B4  3A52               	swapf	??_main,f,c
  1284  0021B6  4652               	rlncf	??_main,f,c
  1285  0021B8  5082               	movf	3970,w,c	;volatile
  1286  0021BA  1852               	xorwf	??_main,w,c
  1287  0021BC  0BDF               	andlw	-33
  1288  0021BE  1852               	xorwf	??_main,w,c
  1289  0021C0  6E82               	movwf	3970,c	;volatile
  1290                           
  1291                           ;pwm_asl.c: 175: for (channel = 0; channel < 3; channel++) {
  1292  0021C2  0E00               	movlw	0
  1293  0021C4  0101               	movlb	1	; () banked
  1294  0021C6  6F42               	movwf	main@channel& (0+255),b
  1295  0021C8                     l5693:
  1296                           
  1297                           ; BSR set to: 1
  1298  0021C8  0E02               	movlw	2
  1299  0021CA  0101               	movlb	1	; () banked
  1300  0021CC  6542               	cpfsgt	main@channel& (0+255),b
  1301  0021CE  D001               	goto	l5697
  1302  0021D0  D057               	goto	l5721
  1303  0021D2                     l5697:
  1304                           
  1305                           ; BSR set to: 1
  1306                           ;pwm_asl.c: 177: voltage = read_adc_voltage((unsigned char) channel);
  1307  0021D2  0101               	movlb	1	; () banked
  1308  0021D4  5142               	movf	main@channel& (0+255),w,b
  1309  0021D6  ECA9  F01D         	call	_read_adc_voltage
  1310  0021DA  C099  F12F         	movff	?_read_adc_voltage,main@voltage
  1311  0021DE  C09A  F130         	movff	?_read_adc_voltage+1,main@voltage+1
  1312  0021E2  C09B  F131         	movff	?_read_adc_voltage+2,main@voltage+2
  1313  0021E6  C09C  F132         	movff	?_read_adc_voltage+3,main@voltage+3
  1314                           
  1315                           ;pwm_asl.c: 178: AN[channel] = voltage;
  1316  0021EA  0101               	movlb	1	; () banked
  1317  0021EC  5142               	movf	main@channel& (0+255),w,b
  1318  0021EE  0D04               	mullw	4
  1319  0021F0  0E35               	movlw	low main@AN
  1320  0021F2  24F3               	addwf	prodl,w,c
  1321  0021F4  6ED9               	movwf	fsr2l,c
  1322  0021F6  0E01               	movlw	high main@AN
  1323  0021F8  20F4               	addwfc	prodh,w,c
  1324  0021FA  6EDA               	movwf	fsr2h,c
  1325  0021FC  C12F  FFDE         	movff	main@voltage,postinc2
  1326  002200  C130  FFDE         	movff	main@voltage+1,postinc2
  1327  002204  C131  FFDE         	movff	main@voltage+2,postinc2
  1328  002208  C132  FFDE         	movff	main@voltage+3,postinc2
  1329                           
  1330                           ; BSR set to: 1
  1331                           ;pwm_asl.c: 179: if (is_byte_available()) {
  1332  00220C  EC07  F022         	call	_is_byte_available	;wreg free
  1333  002210  0900               	iorlw	0
  1334  002212  B4D8               	btfsc	status,2,c
  1335  002214  D013               	goto	l5713
  1336                           
  1337                           ;pwm_asl.c: 180: RecvedChar = read_byte_no_lib();
  1338  002216  EC33  F022         	call	_read_byte_no_lib	;wreg free
  1339  00221A  0101               	movlb	1	; () banked
  1340  00221C  6F41               	movwf	main@RecvedChar& (0+255),b
  1341                           
  1342                           ; BSR set to: 1
  1343                           ;pwm_asl.c: 181: if (RecvedChar == 'S') SendToSerial = 1;
  1344  00221E  0E53               	movlw	83
  1345  002220  0101               	movlb	1	; () banked
  1346  002222  1941               	xorwf	main@RecvedChar& (0+255),w,b
  1347  002224  A4D8               	btfss	status,2,c
  1348  002226  D002               	goto	l5709
  1349                           
  1350                           ; BSR set to: 1
  1351  002228  0E01               	movlw	1
  1352  00222A  D006               	goto	L1
  1353  00222C                     l5709:
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;pwm_asl.c: 182: else if (RecvedChar == 'N') SendToSerial = 0;
  1357  00222C  0E4E               	movlw	78
  1358  00222E  0101               	movlb	1	; () banked
  1359  002230  1941               	xorwf	main@RecvedChar& (0+255),w,b
  1360  002232  A4D8               	btfss	status,2,c
  1361  002234  D003               	goto	l5713
  1362                           
  1363                           ; BSR set to: 1
  1364  002236  0E00               	movlw	0
  1365  002238                     L1:
  1366  002238  0101               	movlb	1	; () banked
  1367  00223A  6F2A               	movwf	main@SendToSerial& (0+255),b
  1368  00223C                     l5713:
  1369                           
  1370                           ;pwm_asl.c: 185: }
  1371                           ;pwm_asl.c: 186: }
  1372                           ;pwm_asl.c: 187: if (SendToSerial) {
  1373  00223C  0101               	movlb	1	; () banked
  1374  00223E  512A               	movf	main@SendToSerial& (0+255),w,b
  1375  002240  0101               	movlb	1	; () banked
  1376  002242  B4D8               	btfsc	status,2,c
  1377  002244  D01A               	goto	l5717
  1378                           
  1379                           ; BSR set to: 1
  1380                           ;pwm_asl.c: 189: sprintf(Buffer, "V%d:%6.2f volt\r", channel, voltage);
  1381  002246  0E00               	movlw	low main@Buffer
  1382  002248  0100               	movlb	0	; () banked
  1383  00224A  6FB7               	movwf	sprintf@sp& (0+255),b
  1384  00224C  0E01               	movlw	high main@Buffer
  1385  00224E  0100               	movlb	0	; () banked
  1386  002250  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1387  002252  0EA6               	movlw	low STR_1
  1388  002254  0100               	movlb	0	; () banked
  1389  002256  6FB9               	movwf	sprintf@f& (0+255),b
  1390  002258  0E10               	movlw	high STR_1
  1391  00225A  0100               	movlb	0	; () banked
  1392  00225C  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1393  00225E  C142  F0BB         	movff	main@channel,?_sprintf+4
  1394  002262  0100               	movlb	0	; () banked
  1395  002264  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  1396  002266  C12F  F0BD         	movff	main@voltage,?_sprintf+6
  1397  00226A  C130  F0BE         	movff	main@voltage+1,?_sprintf+7
  1398  00226E  C131  F0BF         	movff	main@voltage+2,?_sprintf+8
  1399  002272  C132  F0C0         	movff	main@voltage+3,?_sprintf+9
  1400  002276  EC74  F008         	call	_sprintf	;wreg free
  1401  00227A                     l5717:
  1402  00227A  0101               	movlb	1	; () banked
  1403  00227C  2B42               	incf	main@channel& (0+255),f,b
  1404  00227E  D7A4               	goto	l5693
  1405  002280                     l5721:
  1406                           
  1407                           ; BSR set to: 1
  1408                           ;pwm_asl.c: 191: }
  1409                           ;pwm_asl.c: 192: }
  1410                           ;pwm_asl.c: 194: raw_val = read_adc_raw_no_lib(0);
  1411  002280  0E00               	movlw	0
  1412  002282  ECD5  F020         	call	_read_adc_raw_no_lib
  1413  002286  C018  F128         	movff	?_read_adc_raw_no_lib,main@raw_val
  1414  00228A  C019  F129         	movff	?_read_adc_raw_no_lib+1,main@raw_val+1
  1415                           
  1416                           ;pwm_asl.c: 195: set_pwm1_raw(raw_val);
  1417  00228E  C128  F018         	movff	main@raw_val,set_pwm1_raw@raw_value
  1418  002292  C129  F019         	movff	main@raw_val+1,set_pwm1_raw@raw_value+1
  1419  002296  EC22  F021         	call	_set_pwm1_raw	;wreg free
  1420                           
  1421                           ;pwm_asl.c: 196: if(!PORTBbits.RB0){
  1422  00229A  B081               	btfsc	3969,0,c	;volatile
  1423  00229C  D003               	goto	l5727
  1424                           
  1425                           ;pwm_asl.c: 197: flag=~flag;
  1426  00229E  0101               	movlb	1	; () banked
  1427  0022A0  1F33               	comf	main@flag& (0+255),f,b
  1428  0022A2  1F34               	comf	(main@flag+1)& (0+255),f,b
  1429  0022A4                     l5727:
  1430                           
  1431                           ;pwm_asl.c: 198: }
  1432                           ;pwm_asl.c: 199: if(!flag){
  1433  0022A4  0101               	movlb	1	; () banked
  1434  0022A6  5133               	movf	main@flag& (0+255),w,b
  1435  0022A8  0101               	movlb	1	; () banked
  1436  0022AA  1134               	iorwf	(main@flag+1)& (0+255),w,b
  1437  0022AC  A4D8               	btfss	status,2,c
  1438  0022AE  D036               	goto	l5735
  1439                           
  1440                           ; BSR set to: 1
  1441                           ;pwm_asl.c: 200: lcd_gotoxy(1, 1);
  1442  0022B0  0E01               	movlw	1
  1443  0022B2  6E22               	movwf	lcd_gotoxy@y,c
  1444  0022B4  0E01               	movlw	1
  1445  0022B6  EC93  F020         	call	_lcd_gotoxy
  1446                           
  1447                           ;pwm_asl.c: 201: sprintf(Buffer, "temp=%3.2f C", AN[2]*100);
  1448  0022BA  C13D  F020         	movff	main@AN+8,___flmul@b
  1449  0022BE  C13E  F021         	movff	main@AN+9,___flmul@b+1
  1450  0022C2  C13F  F022         	movff	main@AN+10,___flmul@b+2
  1451  0022C6  C140  F023         	movff	main@AN+11,___flmul@b+3
  1452  0022CA  0E00               	movlw	0
  1453  0022CC  6E24               	movwf	___flmul@a,c
  1454  0022CE  0E00               	movlw	0
  1455  0022D0  6E25               	movwf	___flmul@a+1,c
  1456  0022D2  0EC8               	movlw	200
  1457  0022D4  6E26               	movwf	___flmul@a+2,c
  1458  0022D6  0E42               	movlw	66
  1459  0022D8  6E27               	movwf	___flmul@a+3,c
  1460  0022DA  ECA5  F016         	call	___flmul	;wreg free
  1461  0022DE  C020  F120         	movff	?___flmul,_main$2149
  1462  0022E2  C021  F121         	movff	?___flmul+1,_main$2149+1
  1463  0022E6  C022  F122         	movff	?___flmul+2,_main$2149+2
  1464  0022EA  C023  F123         	movff	?___flmul+3,_main$2149+3
  1465                           
  1466                           ;pwm_asl.c: 201: sprintf(Buffer, "temp=%3.2f C", AN[2]*100);
  1467  0022EE  0E00               	movlw	low main@Buffer
  1468  0022F0  0100               	movlb	0	; () banked
  1469  0022F2  6FB7               	movwf	sprintf@sp& (0+255),b
  1470  0022F4  0E01               	movlw	high main@Buffer
  1471  0022F6  0100               	movlb	0	; () banked
  1472  0022F8  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1473  0022FA  0EB6               	movlw	low STR_2
  1474  0022FC  0100               	movlb	0	; () banked
  1475  0022FE  6FB9               	movwf	sprintf@f& (0+255),b
  1476  002300  0E10               	movlw	high STR_2
  1477  002302  0100               	movlb	0	; () banked
  1478  002304  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1479  002306  C120  F0BB         	movff	_main$2149,?_sprintf+4
  1480  00230A  C121  F0BC         	movff	_main$2149+1,?_sprintf+5
  1481  00230E  C122  F0BD         	movff	_main$2149+2,?_sprintf+6
  1482  002312  C123  F0BE         	movff	_main$2149+3,?_sprintf+7
  1483  002316  EC74  F008         	call	_sprintf	;wreg free
  1484                           
  1485                           ;pwm_asl.c: 202: }else{
  1486  00231A  D048               	goto	l5741
  1487  00231C                     l5735:
  1488                           
  1489                           ;pwm_asl.c: 203: lcd_gotoxy(1, 1);
  1490  00231C  0E01               	movlw	1
  1491  00231E  6E22               	movwf	lcd_gotoxy@y,c
  1492  002320  0E01               	movlw	1
  1493  002322  EC93  F020         	call	_lcd_gotoxy
  1494                           
  1495                           ;pwm_asl.c: 204: sprintf(Buffer, "temp=%3.2f F", (AN[2]*100)+33.8);
  1496  002326  0E00               	movlw	0
  1497  002328  6E24               	movwf	___flmul@a,c
  1498  00232A  0E00               	movlw	0
  1499  00232C  6E25               	movwf	___flmul@a+1,c
  1500  00232E  0EC8               	movlw	200
  1501  002330  6E26               	movwf	___flmul@a+2,c
  1502  002332  0E42               	movlw	66
  1503  002334  6E27               	movwf	___flmul@a+3,c
  1504  002336  C13D  F020         	movff	main@AN+8,___flmul@b
  1505  00233A  C13E  F021         	movff	main@AN+9,___flmul@b+1
  1506  00233E  C13F  F022         	movff	main@AN+10,___flmul@b+2
  1507  002342  C140  F023         	movff	main@AN+11,___flmul@b+3
  1508  002346  ECA5  F016         	call	___flmul	;wreg free
  1509  00234A  C020  F099         	movff	?___flmul,___fladd@b
  1510  00234E  C021  F09A         	movff	?___flmul+1,___fladd@b+1
  1511  002352  C022  F09B         	movff	?___flmul+2,___fladd@b+2
  1512  002356  C023  F09C         	movff	?___flmul+3,___fladd@b+3
  1513  00235A  0E33               	movlw	51
  1514  00235C  0100               	movlb	0	; () banked
  1515  00235E  6F9D               	movwf	___fladd@a& (0+255),b
  1516  002360  0E33               	movlw	51
  1517  002362  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  1518  002364  0E07               	movlw	7
  1519  002366  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  1520  002368  0E42               	movlw	66
  1521  00236A  6FA0               	movwf	(___fladd@a+3)& (0+255),b
  1522  00236C  EC4B  F00E         	call	___fladd	;wreg free
  1523  002370  C099  F124         	movff	?___fladd,_main$2150
  1524  002374  C09A  F125         	movff	?___fladd+1,_main$2150+1
  1525  002378  C09B  F126         	movff	?___fladd+2,_main$2150+2
  1526  00237C  C09C  F127         	movff	?___fladd+3,_main$2150+3
  1527                           
  1528                           ;pwm_asl.c: 204: sprintf(Buffer, "temp=%3.2f F", (AN[2]*100)+33.8);
  1529  002380  0E00               	movlw	low main@Buffer
  1530  002382  0100               	movlb	0	; () banked
  1531  002384  6FB7               	movwf	sprintf@sp& (0+255),b
  1532  002386  0E01               	movlw	high main@Buffer
  1533  002388  0100               	movlb	0	; () banked
  1534  00238A  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1535  00238C  0EC3               	movlw	low STR_3
  1536  00238E  0100               	movlb	0	; () banked
  1537  002390  6FB9               	movwf	sprintf@f& (0+255),b
  1538  002392  0E10               	movlw	high STR_3
  1539  002394  0100               	movlb	0	; () banked
  1540  002396  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1541  002398  C124  F0BB         	movff	_main$2150,?_sprintf+4
  1542  00239C  C125  F0BC         	movff	_main$2150+1,?_sprintf+5
  1543  0023A0  C126  F0BD         	movff	_main$2150+2,?_sprintf+6
  1544  0023A4  C127  F0BE         	movff	_main$2150+3,?_sprintf+7
  1545  0023A8  EC74  F008         	call	_sprintf	;wreg free
  1546  0023AC                     l5741:
  1547                           
  1548                           ;pwm_asl.c: 205: }
  1549                           ;pwm_asl.c: 206: lcd_puts(Buffer);
  1550  0023AC  0E00               	movlw	low main@Buffer
  1551  0023AE  6E26               	movwf	lcd_puts@s,c
  1552  0023B0  0E01               	movlw	high main@Buffer
  1553  0023B2  6E27               	movwf	lcd_puts@s+1,c
  1554  0023B4  ECB4  F021         	call	_lcd_puts	;wreg free
  1555                           
  1556                           ;pwm_asl.c: 207: lcd_gotoxy(1, 2);
  1557  0023B8  0E02               	movlw	2
  1558  0023BA  6E22               	movwf	lcd_gotoxy@y,c
  1559  0023BC  0E01               	movlw	1
  1560  0023BE  EC93  F020         	call	_lcd_gotoxy
  1561                           
  1562                           ;pwm_asl.c: 208: p2=read_adc_raw_no_lib(1);
  1563  0023C2  0E01               	movlw	1
  1564  0023C4  ECD5  F020         	call	_read_adc_raw_no_lib
  1565  0023C8  C018  F05B         	movff	?_read_adc_raw_no_lib,_p2
  1566  0023CC  C019  F05C         	movff	?_read_adc_raw_no_lib+1,_p2+1
  1567                           
  1568                           ;pwm_asl.c: 209: sprintf(Buffer, "level of speed=%1.1f", floor(AN[1]));
  1569  0023D0  0E00               	movlw	low main@Buffer
  1570  0023D2  0100               	movlb	0	; () banked
  1571  0023D4  6FB7               	movwf	sprintf@sp& (0+255),b
  1572  0023D6  0E01               	movlw	high main@Buffer
  1573  0023D8  0100               	movlb	0	; () banked
  1574  0023DA  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1575  0023DC  0E91               	movlw	low STR_4
  1576  0023DE  0100               	movlb	0	; () banked
  1577  0023E0  6FB9               	movwf	sprintf@f& (0+255),b
  1578  0023E2  0E10               	movlw	high STR_4
  1579  0023E4  0100               	movlb	0	; () banked
  1580  0023E6  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1581  0023E8  C139  F0AD         	movff	main@AN+4,floor@x
  1582  0023EC  C13A  F0AE         	movff	main@AN+5,floor@x+1
  1583  0023F0  C13B  F0AF         	movff	main@AN+6,floor@x+2
  1584  0023F4  C13C  F0B0         	movff	main@AN+7,floor@x+3
  1585  0023F8  ECF3  F01B         	call	_floor	;wreg free
  1586  0023FC  C0AD  F0BB         	movff	?_floor,?_sprintf+4
  1587  002400  C0AE  F0BC         	movff	?_floor+1,?_sprintf+5
  1588  002404  C0AF  F0BD         	movff	?_floor+2,?_sprintf+6
  1589  002408  C0B0  F0BE         	movff	?_floor+3,?_sprintf+7
  1590  00240C  EC74  F008         	call	_sprintf	;wreg free
  1591                           
  1592                           ;pwm_asl.c: 210: lcd_puts(Buffer);
  1593  002410  0E00               	movlw	low main@Buffer
  1594  002412  6E26               	movwf	lcd_puts@s,c
  1595  002414  0E01               	movlw	high main@Buffer
  1596  002416  6E27               	movwf	lcd_puts@s+1,c
  1597  002418  ECB4  F021         	call	_lcd_puts	;wreg free
  1598                           
  1599                           ;pwm_asl.c: 211: threshold = read_adc_temp(0);
  1600  00241C  0E00               	movlw	0
  1601  00241E  EC52  F01D         	call	_read_adc_temp
  1602  002422  C0AD  F12B         	movff	?_read_adc_temp,main@threshold
  1603  002426  C0AE  F12C         	movff	?_read_adc_temp+1,main@threshold+1
  1604  00242A  C0AF  F12D         	movff	?_read_adc_temp+2,main@threshold+2
  1605  00242E  C0B0  F12E         	movff	?_read_adc_temp+3,main@threshold+3
  1606                           
  1607                           ;pwm_asl.c: 212: lcd_gotoxy(1, 3);
  1608  002432  0E03               	movlw	3
  1609  002434  6E22               	movwf	lcd_gotoxy@y,c
  1610  002436  0E01               	movlw	1
  1611  002438  EC93  F020         	call	_lcd_gotoxy
  1612                           
  1613                           ;pwm_asl.c: 213: sprintf(Buffer, "thresh=%1.1f", threshold);
  1614  00243C  0E00               	movlw	low main@Buffer
  1615  00243E  0100               	movlb	0	; () banked
  1616  002440  6FB7               	movwf	sprintf@sp& (0+255),b
  1617  002442  0E01               	movlw	high main@Buffer
  1618  002444  0100               	movlb	0	; () banked
  1619  002446  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1620  002448  0ED0               	movlw	low STR_5
  1621  00244A  0100               	movlb	0	; () banked
  1622  00244C  6FB9               	movwf	sprintf@f& (0+255),b
  1623  00244E  0E10               	movlw	high STR_5
  1624  002450  0100               	movlb	0	; () banked
  1625  002452  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1626  002454  C12B  F0BB         	movff	main@threshold,?_sprintf+4
  1627  002458  C12C  F0BC         	movff	main@threshold+1,?_sprintf+5
  1628  00245C  C12D  F0BD         	movff	main@threshold+2,?_sprintf+6
  1629  002460  C12E  F0BE         	movff	main@threshold+3,?_sprintf+7
  1630  002464  EC74  F008         	call	_sprintf	;wreg free
  1631                           
  1632                           ;pwm_asl.c: 214: lcd_puts(Buffer);
  1633  002468  0E00               	movlw	low main@Buffer
  1634  00246A  6E26               	movwf	lcd_puts@s,c
  1635  00246C  0E01               	movlw	high main@Buffer
  1636  00246E  6E27               	movwf	lcd_puts@s+1,c
  1637  002470  ECB4  F021         	call	_lcd_puts	;wreg free
  1638                           
  1639                           ;pwm_asl.c: 215: if (AN[2]*100>threshold) {
  1640  002474  C12B  F039         	movff	main@threshold,___flge@ff1
  1641  002478  C12C  F03A         	movff	main@threshold+1,___flge@ff1+1
  1642  00247C  C12D  F03B         	movff	main@threshold+2,___flge@ff1+2
  1643  002480  C12E  F03C         	movff	main@threshold+3,___flge@ff1+3
  1644  002484  0E00               	movlw	0
  1645  002486  6E24               	movwf	___flmul@a,c
  1646  002488  0E00               	movlw	0
  1647  00248A  6E25               	movwf	___flmul@a+1,c
  1648  00248C  0EC8               	movlw	200
  1649  00248E  6E26               	movwf	___flmul@a+2,c
  1650  002490  0E42               	movlw	66
  1651  002492  6E27               	movwf	___flmul@a+3,c
  1652  002494  C13D  F020         	movff	main@AN+8,___flmul@b
  1653  002498  C13E  F021         	movff	main@AN+9,___flmul@b+1
  1654  00249C  C13F  F022         	movff	main@AN+10,___flmul@b+2
  1655  0024A0  C140  F023         	movff	main@AN+11,___flmul@b+3
  1656  0024A4  ECA5  F016         	call	___flmul	;wreg free
  1657  0024A8  C020  F03D         	movff	?___flmul,___flge@ff2
  1658  0024AC  C021  F03E         	movff	?___flmul+1,___flge@ff2+1
  1659  0024B0  C022  F03F         	movff	?___flmul+2,___flge@ff2+2
  1660  0024B4  C023  F040         	movff	?___flmul+3,___flge@ff2+3
  1661  0024B8  EC63  F01B         	call	___flge	;wreg free
  1662  0024BC  B0D8               	btfsc	status,0,c
  1663  0024BE  D006               	goto	l5761
  1664                           
  1665                           ;pwm_asl.c: 216: send_string_no_lib((unsigned char *) "Warning!");
  1666  0024C0  0EDD               	movlw	low STR_6
  1667  0024C2  6E19               	movwf	send_string_no_lib@p,c
  1668  0024C4  0E10               	movlw	high STR_6
  1669  0024C6  6E1A               	movwf	send_string_no_lib@p+1,c
  1670  0024C8  EC67  F021         	call	_send_string_no_lib	;wreg free
  1671  0024CC                     l5761:
  1672                           
  1673                           ;pwm_asl.c: 217: }
  1674                           ;pwm_asl.c: 218: lcd_gotoxy(1, 4);
  1675  0024CC  0E04               	movlw	4
  1676  0024CE  6E22               	movwf	lcd_gotoxy@y,c
  1677  0024D0  0E01               	movlw	1
  1678  0024D2  EC93  F020         	call	_lcd_gotoxy
  1679                           
  1680                           ;pwm_asl.c: 219: sprintf(Buffer, "thresh=%1.1f", AN[0]);
  1681  0024D6  0E00               	movlw	low main@Buffer
  1682  0024D8  0100               	movlb	0	; () banked
  1683  0024DA  6FB7               	movwf	sprintf@sp& (0+255),b
  1684  0024DC  0E01               	movlw	high main@Buffer
  1685  0024DE  0100               	movlb	0	; () banked
  1686  0024E0  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1687  0024E2  0ED0               	movlw	low STR_5
  1688  0024E4  0100               	movlb	0	; () banked
  1689  0024E6  6FB9               	movwf	sprintf@f& (0+255),b
  1690  0024E8  0E10               	movlw	high STR_5
  1691  0024EA  0100               	movlb	0	; () banked
  1692  0024EC  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1693  0024EE  C135  F0BB         	movff	main@AN,?_sprintf+4
  1694  0024F2  C136  F0BC         	movff	main@AN+1,?_sprintf+5
  1695  0024F6  C137  F0BD         	movff	main@AN+2,?_sprintf+6
  1696  0024FA  C138  F0BE         	movff	main@AN+3,?_sprintf+7
  1697  0024FE  EC74  F008         	call	_sprintf	;wreg free
  1698                           
  1699                           ;pwm_asl.c: 220: lcd_puts(Buffer);
  1700  002502  0E00               	movlw	low main@Buffer
  1701  002504  6E26               	movwf	lcd_puts@s,c
  1702  002506  0E01               	movlw	high main@Buffer
  1703  002508  6E27               	movwf	lcd_puts@s+1,c
  1704  00250A  ECB4  F021         	call	_lcd_puts	;wreg free
  1705                           
  1706                           ;pwm_asl.c: 236: PORTD=display7seg((int)(AN[0]*10)%10);
  1707  00250E  0E00               	movlw	0
  1708  002510  6E24               	movwf	___flmul@a,c
  1709  002512  0E00               	movlw	0
  1710  002514  6E25               	movwf	___flmul@a+1,c
  1711  002516  0E20               	movlw	32
  1712  002518  6E26               	movwf	___flmul@a+2,c
  1713  00251A  0E41               	movlw	65
  1714  00251C  6E27               	movwf	___flmul@a+3,c
  1715  00251E  C135  F020         	movff	main@AN,___flmul@b
  1716  002522  C136  F021         	movff	main@AN+1,___flmul@b+1
  1717  002526  C137  F022         	movff	main@AN+2,___flmul@b+2
  1718  00252A  C138  F023         	movff	main@AN+3,___flmul@b+3
  1719  00252E  ECA5  F016         	call	___flmul	;wreg free
  1720  002532  C020  F039         	movff	?___flmul,___fltol@f1
  1721  002536  C021  F03A         	movff	?___flmul+1,___fltol@f1+1
  1722  00253A  C022  F03B         	movff	?___flmul+2,___fltol@f1+2
  1723  00253E  C023  F03C         	movff	?___flmul+3,___fltol@f1+3
  1724  002542  EC82  F01C         	call	___fltol	;wreg free
  1725  002546  C039  F043         	movff	?___fltol,___awmod@dividend
  1726  00254A  C03A  F044         	movff	?___fltol+1,___awmod@dividend+1
  1727  00254E  0E00               	movlw	0
  1728  002550  6E46               	movwf	___awmod@divisor+1,c
  1729  002552  0E0A               	movlw	10
  1730  002554  6E45               	movwf	___awmod@divisor,c
  1731  002556  ECEC  F01E         	call	___awmod	;wreg free
  1732  00255A  5043               	movf	?___awmod,w,c
  1733  00255C  EC24  F01F         	call	_display7seg
  1734  002560  6E83               	movwf	3971,c	;volatile
  1735                           
  1736                           ;pwm_asl.c: 238: PORTAbits.RA5=1;
  1737  002562  8A80               	bsf	3968,5,c	;volatile
  1738                           
  1739                           ;pwm_asl.c: 240: delay_ms(300);
  1740  002564  0E01               	movlw	1
  1741  002566  6E19               	movwf	delay_ms@n+1,c
  1742  002568  0E2C               	movlw	44
  1743  00256A  6E18               	movwf	delay_ms@n,c
  1744  00256C  ECC6  F021         	call	_delay_ms	;wreg free
  1745  002570  D60C               	goto	l5683
  1746  002572                     __end_of_main:
  1747                           	opt stack 0
  1748                           tblptru	equ	0xFF8
  1749                           tblptrh	equ	0xFF7
  1750                           tblptrl	equ	0xFF6
  1751                           tablat	equ	0xFF5
  1752                           prodh	equ	0xFF4
  1753                           prodl	equ	0xFF3
  1754                           postinc0	equ	0xFEE
  1755                           wreg	equ	0xFE8
  1756                           postdec1	equ	0xFE5
  1757                           fsr1l	equ	0xFE1
  1758                           postinc2	equ	0xFDE
  1759                           fsr2h	equ	0xFDA
  1760                           fsr2l	equ	0xFD9
  1761                           status	equ	0xFD8
  1762                           
  1763 ;; *************** function _sprintf *****************
  1764 ;; Defined at:
  1765 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1766 ;; Parameters:    Size  Location     Type
  1767 ;;  sp              2   55[BANK0 ] PTR unsigned char 
  1768 ;;		 -> main@Buffer(32), 
  1769 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  1770 ;;		 -> STR_7(13), STR_5(13), STR_4(21), STR_3(13), 
  1771 ;;		 -> STR_2(13), STR_1(16), 
  1772 ;; Auto vars:     Size  Location     Type
  1773 ;;  fval            4   89[BANK0 ] PTR const unsigned char 
  1774 ;;  val             4   83[BANK0 ] unsigned long 
  1775 ;;  tmpval          4   79[BANK0 ] struct .
  1776 ;;  cp              3    0        PTR const unsigned char 
  1777 ;;  prec            2   93[BANK0 ] int 
  1778 ;;  exp             2   87[BANK0 ] int 
  1779 ;;  width           2   77[BANK0 ] int 
  1780 ;;  flag            2   75[BANK0 ] unsigned short 
  1781 ;;  ap              2   73[BANK0 ] PTR void [1]
  1782 ;;		 -> ?_sprintf(2), 
  1783 ;;  len             2    0        unsigned int 
  1784 ;;  c               1   95[BANK0 ] char 
  1785 ;;  d               1    0        unsigned char 
  1786 ;; Return value:  Size  Location     Type
  1787 ;;                  2   55[BANK0 ] int 
  1788 ;; Registers used:
  1789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1790 ;; Tracked objects:
  1791 ;;		On entry : 0/0
  1792 ;;		On exit  : 0/0
  1793 ;;		Unchanged: 0/0
  1794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1795 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1796 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Totals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;Total ram usage:       41 bytes
  1800 ;; Hardware stack levels used:    1
  1801 ;; Hardware stack levels required when called:    5
  1802 ;; This function calls:
  1803 ;;		___awdiv
  1804 ;;		___fladd
  1805 ;;		___flge
  1806 ;;		___flmul
  1807 ;;		___flneg
  1808 ;;		___flsub
  1809 ;;		___fltol
  1810 ;;		___lldiv
  1811 ;;		___llmod
  1812 ;;		___wmul
  1813 ;;		___xxtofl
  1814 ;;		__div_to_l_
  1815 ;;		__tdiv_to_l_
  1816 ;;		_fround
  1817 ;;		_isdigit
  1818 ;;		_scale
  1819 ;; This function is called by:
  1820 ;;		_main
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824                           	psect	text1
  1825  0010E8                     __ptext1:
  1826                           	opt stack 0
  1827  0010E8                     _sprintf:
  1828                           	opt stack 25
  1829                           
  1830                           ;doprnt.c: 494: va_list ap;
  1831                           ;doprnt.c: 499: signed char c;
  1832                           ;doprnt.c: 501: int width;
  1833                           ;doprnt.c: 504: int prec;
  1834                           ;doprnt.c: 508: unsigned short flag;
  1835                           ;doprnt.c: 515: char d;
  1836                           ;doprnt.c: 516: double fval;
  1837                           ;doprnt.c: 517: int exp;
  1838                           ;doprnt.c: 523: union {
  1839                           ;doprnt.c: 524: unsigned long vd;
  1840                           ;doprnt.c: 525: double integ;
  1841                           ;doprnt.c: 526: } tmpval;
  1842                           ;doprnt.c: 528: unsigned long val;
  1843                           ;doprnt.c: 529: unsigned len;
  1844                           ;doprnt.c: 530: const char * cp;
  1845                           ;doprnt.c: 533: *ap = __va_start();
  1846                           
  1847                           ;incstack = 0
  1848  0010E8  0EBB               	movlw	low (?_sprintf+4)
  1849  0010EA  0100               	movlb	0	; () banked
  1850  0010EC  6FC9               	movwf	sprintf@ap& (0+255),b
  1851  0010EE  0E00               	movlw	high (?_sprintf+4)
  1852  0010F0  0100               	movlb	0	; () banked
  1853  0010F2  6FCA               	movwf	(sprintf@ap+1)& (0+255),b
  1854                           
  1855                           ;doprnt.c: 536: while(c = *f++) {
  1856  0010F4  EF35  F00E         	goto	l5619
  1857  0010F8                     l5333:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;doprnt.c: 538: if(c != '%')
  1861  0010F8  0E25               	movlw	37
  1862  0010FA  0100               	movlb	0	; () banked
  1863  0010FC  19DF               	xorwf	sprintf@c& (0+255),w,b
  1864  0010FE  B4D8               	btfsc	status,2,c
  1865  001100  D00B               	goto	l5339
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;doprnt.c: 540: {
  1869                           ;doprnt.c: 541: ((*sp++ = (c)));
  1870  001102  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  1871  001106  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  1872  00110A  C0DF  FFDF         	movff	sprintf@c,indf2
  1873                           
  1874                           ; BSR set to: 0
  1875  00110E  0100               	movlb	0	; () banked
  1876  001110  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  1877  001112  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  1878                           
  1879                           ;doprnt.c: 542: continue;
  1880  001114  EF35  F00E         	goto	l5619
  1881  001118                     l5339:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;doprnt.c: 543: }
  1885                           ;doprnt.c: 546: width = 0;
  1886  001118  0E00               	movlw	0
  1887  00111A  0100               	movlb	0	; () banked
  1888  00111C  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  1889  00111E  0E00               	movlw	0
  1890  001120  6FCD               	movwf	sprintf@width& (0+255),b
  1891                           
  1892                           ;doprnt.c: 548: flag = 0;
  1893  001122  0E00               	movlw	0
  1894  001124  0100               	movlb	0	; () banked
  1895  001126  6FCC               	movwf	(sprintf@flag+1)& (0+255),b
  1896  001128  0E00               	movlw	0
  1897  00112A  6FCB               	movwf	sprintf@flag& (0+255),b
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1901  00112C  C0B9  FFF6         	movff	sprintf@f,tblptrl
  1902  001130  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  1903  001134                     	if	0	;tblptru may be non-zero
  1904  001134                     	endif
  1905  001134                     	if	0	;tblptru may be non-zero
  1906  001134                     	endif
  1907  001134  0008               	tblrd		*
  1908  001136  50F5               	movf	tablat,w,c
  1909  001138  ECE9  F021         	call	_isdigit
  1910  00113C  A0D8               	btfss	status,0,c
  1911  00113E  D03F               	goto	l5353
  1912                           
  1913                           ;doprnt.c: 598: width = 0;
  1914  001140  0E00               	movlw	0
  1915  001142  0100               	movlb	0	; () banked
  1916  001144  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  1917  001146  0E00               	movlw	0
  1918  001148  6FCD               	movwf	sprintf@width& (0+255),b
  1919  00114A                     l5345:
  1920                           
  1921                           ;doprnt.c: 600: width *= 10;
  1922  00114A  C0CD  F018         	movff	sprintf@width,___wmul@multiplier
  1923  00114E  C0CE  F019         	movff	sprintf@width+1,___wmul@multiplier+1
  1924  001152  0E00               	movlw	0
  1925  001154  6E1B               	movwf	___wmul@multiplicand+1,c
  1926  001156  0E0A               	movlw	10
  1927  001158  6E1A               	movwf	___wmul@multiplicand,c
  1928  00115A  EC7C  F021         	call	___wmul	;wreg free
  1929  00115E  C018  F0CD         	movff	?___wmul,sprintf@width
  1930  001162  C019  F0CE         	movff	?___wmul+1,sprintf@width+1
  1931                           
  1932                           ;doprnt.c: 601: width += *f++ - '0';
  1933  001166  0ED0               	movlw	208
  1934  001168  0100               	movlb	0	; () banked
  1935  00116A  6FC1               	movwf	??_sprintf& (0+255),b
  1936  00116C  0EFF               	movlw	255
  1937  00116E  0100               	movlb	0	; () banked
  1938  001170  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  1939  001172  C0B9  FFF6         	movff	sprintf@f,tblptrl
  1940  001176  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  1941  00117A                     	if	0	;tblptru may be non-zero
  1942  00117A                     	endif
  1943  00117A                     	if	0	;tblptru may be non-zero
  1944  00117A                     	endif
  1945  00117A  0008               	tblrd		*
  1946  00117C  50F5               	movf	tablat,w,c
  1947  00117E  0100               	movlb	0	; () banked
  1948  001180  6FC3               	movwf	(??_sprintf+2)& (0+255),b
  1949  001182  6BC4               	clrf	(??_sprintf+3)& (0+255),b
  1950  001184  0100               	movlb	0	; () banked
  1951  001186  51C1               	movf	??_sprintf& (0+255),w,b
  1952  001188  0100               	movlb	0	; () banked
  1953  00118A  27C3               	addwf	(??_sprintf+2)& (0+255),f,b
  1954  00118C  0100               	movlb	0	; () banked
  1955  00118E  51C2               	movf	(??_sprintf+1)& (0+255),w,b
  1956  001190  0100               	movlb	0	; () banked
  1957  001192  23C4               	addwfc	(??_sprintf+3)& (0+255),f,b
  1958  001194  0100               	movlb	0	; () banked
  1959  001196  51C3               	movf	(??_sprintf+2)& (0+255),w,b
  1960  001198  0100               	movlb	0	; () banked
  1961  00119A  27CD               	addwf	sprintf@width& (0+255),f,b
  1962  00119C  0100               	movlb	0	; () banked
  1963  00119E  51C4               	movf	(??_sprintf+3)& (0+255),w,b
  1964  0011A0  0100               	movlb	0	; () banked
  1965  0011A2  23CE               	addwfc	(sprintf@width+1)& (0+255),f,b
  1966                           
  1967                           ; BSR set to: 0
  1968  0011A4  0100               	movlb	0	; () banked
  1969  0011A6  4BB9               	infsnz	sprintf@f& (0+255),f,b
  1970  0011A8  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  1971                           
  1972                           ; BSR set to: 0
  1973                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1974  0011AA  C0B9  FFF6         	movff	sprintf@f,tblptrl
  1975  0011AE  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  1976  0011B2                     	if	0	;tblptru may be non-zero
  1977  0011B2                     	endif
  1978  0011B2                     	if	0	;tblptru may be non-zero
  1979  0011B2                     	endif
  1980  0011B2  0008               	tblrd		*
  1981  0011B4  50F5               	movf	tablat,w,c
  1982  0011B6  ECE9  F021         	call	_isdigit
  1983  0011BA  B0D8               	btfsc	status,0,c
  1984  0011BC  D7C6               	goto	l5345
  1985  0011BE                     l5353:
  1986                           
  1987                           ;doprnt.c: 608: }
  1988                           ;doprnt.c: 611: if(*f == '.') {
  1989  0011BE  C0B9  FFF6         	movff	sprintf@f,tblptrl
  1990  0011C2  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  1991  0011C6                     	if	0	;tblptru may be non-zero
  1992  0011C6                     	endif
  1993  0011C6                     	if	0	;tblptru may be non-zero
  1994  0011C6                     	endif
  1995  0011C6  0008               	tblrd		*
  1996  0011C8  50F5               	movf	tablat,w,c
  1997  0011CA  0A2E               	xorlw	46
  1998  0011CC  A4D8               	btfss	status,2,c
  1999  0011CE  D034               	goto	l5365
  2000                           
  2001                           ;doprnt.c: 612: flag |= 0x4000;
  2002  0011D0  0100               	movlb	0	; () banked
  2003  0011D2  8DCC               	bsf	(sprintf@flag+1)& (0+255),6,b
  2004                           
  2005                           ;doprnt.c: 613: f++;
  2006  0011D4  0100               	movlb	0	; () banked
  2007  0011D6  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2008  0011D8  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;doprnt.c: 620: {
  2012                           ;doprnt.c: 621: prec = 0;
  2013  0011DA  0E00               	movlw	0
  2014  0011DC  0100               	movlb	0	; () banked
  2015  0011DE  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2016  0011E0  0E00               	movlw	0
  2017  0011E2  6FDD               	movwf	sprintf@prec& (0+255),b
  2018                           
  2019                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2020  0011E4  D01E               	goto	l5363
  2021  0011E6                     l5359:
  2022                           
  2023                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2024  0011E6  C0DD  F018         	movff	sprintf@prec,___wmul@multiplier
  2025  0011EA  C0DE  F019         	movff	sprintf@prec+1,___wmul@multiplier+1
  2026  0011EE  0E00               	movlw	0
  2027  0011F0  6E1B               	movwf	___wmul@multiplicand+1,c
  2028  0011F2  0E0A               	movlw	10
  2029  0011F4  6E1A               	movwf	___wmul@multiplicand,c
  2030  0011F6  EC7C  F021         	call	___wmul	;wreg free
  2031  0011FA  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2032  0011FE  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2033  001202                     	if	0	;tblptru may be non-zero
  2034  001202                     	endif
  2035  001202                     	if	0	;tblptru may be non-zero
  2036  001202                     	endif
  2037  001202  0008               	tblrd		*
  2038  001204  50F5               	movf	tablat,w,c
  2039  001206  2618               	addwf	?___wmul,f,c
  2040  001208  0E00               	movlw	0
  2041  00120A  2219               	addwfc	?___wmul+1,f,c
  2042  00120C  0ED0               	movlw	208
  2043  00120E  2418               	addwf	?___wmul,w,c
  2044  001210  0100               	movlb	0	; () banked
  2045  001212  6FDD               	movwf	sprintf@prec& (0+255),b
  2046  001214  0EFF               	movlw	255
  2047  001216  2019               	addwfc	?___wmul+1,w,c
  2048  001218  0100               	movlb	0	; () banked
  2049  00121A  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2050                           
  2051                           ; BSR set to: 0
  2052  00121C  0100               	movlb	0	; () banked
  2053  00121E  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2054  001220  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2055  001222                     l5363:
  2056                           
  2057                           ; BSR set to: 0
  2058  001222  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2059  001226  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2060  00122A                     	if	0	;tblptru may be non-zero
  2061  00122A                     	endif
  2062  00122A                     	if	0	;tblptru may be non-zero
  2063  00122A                     	endif
  2064  00122A  0008               	tblrd		*
  2065  00122C  50F5               	movf	tablat,w,c
  2066  00122E  ECE9  F021         	call	_isdigit
  2067  001232  A0D8               	btfss	status,0,c
  2068  001234  D00C               	goto	l5373
  2069  001236  D7D7               	goto	l5359
  2070  001238                     l5365:
  2071                           
  2072                           ;doprnt.c: 626: prec = 0;
  2073  001238  0E00               	movlw	0
  2074  00123A  0100               	movlb	0	; () banked
  2075  00123C  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2076  00123E  0E00               	movlw	0
  2077  001240  6FDD               	movwf	sprintf@prec& (0+255),b
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;doprnt.c: 628: flag |= 0x1000;
  2081  001242  0100               	movlb	0	; () banked
  2082  001244  89CC               	bsf	(sprintf@flag+1)& (0+255),4,b
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;doprnt.c: 630: }
  2086                           ;doprnt.c: 635: switch(c = *f++) {
  2087  001246  D003               	goto	l5373
  2088  001248                     l5369:
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;doprnt.c: 663: flag |= 0x400;
  2092  001248  0100               	movlb	0	; () banked
  2093  00124A  85CC               	bsf	(sprintf@flag+1)& (0+255),2,b
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;doprnt.c: 698: case 'i':
  2097                           ;doprnt.c: 699: break;
  2098                           
  2099                           ; BSR set to: 0
  2100                           
  2101                           ;doprnt.c: 697: case 'd':
  2102                           
  2103                           ;doprnt.c: 664: break;
  2104  00124C  D01A               	goto	l5375
  2105  00124E                     l5373:
  2106  00124E  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2107  001252  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2108  001256  0100               	movlb	0	; () banked
  2109  001258  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2110  00125A  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2111  00125C                     	if	0	;tblptru may be non-zero
  2112  00125C                     	endif
  2113  00125C                     	if	0	;tblptru may be non-zero
  2114  00125C                     	endif
  2115  00125C  0008               	tblrd		*
  2116  00125E  CFF5 F0DF          	movff	tablat,sprintf@c
  2117  001262  0100               	movlb	0	; () banked
  2118  001264  51DF               	movf	sprintf@c& (0+255),w,b
  2119                           
  2120                           ; Switch size 1, requested type "space"
  2121                           ; Number of cases is 4, Range of values is 0 to 105
  2122                           ; switch strategies available:
  2123                           ; Name         Instructions Cycles
  2124                           ; simple_byte           13     7 (average)
  2125                           ;	Chosen strategy is simple_byte
  2126  001266  0A00               	xorlw	0	; case 0
  2127  001268  B4D8               	btfsc	status,2,c
  2128  00126A  EF44  F00E         	goto	l5621
  2129  00126E  0A64               	xorlw	100	; case 100
  2130  001270  B4D8               	btfsc	status,2,c
  2131  001272  D007               	goto	l5375
  2132  001274  0A02               	xorlw	2	; case 102
  2133  001276  B4D8               	btfsc	status,2,c
  2134  001278  D7E7               	goto	l5369
  2135  00127A  0A0F               	xorlw	15	; case 105
  2136  00127C  A4D8               	btfss	status,2,c
  2137  00127E  EF35  F00E         	goto	l5619
  2138  001282                     l5375:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 825: if(flag & (0x700)) {
  2142  001282  0E07               	movlw	7
  2143  001284  0100               	movlb	0	; () banked
  2144  001286  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2145  001288  B4D8               	btfsc	status,2,c
  2146  00128A  D389               	goto	l5539
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 827: if(flag & 0x1000)
  2150  00128C  0100               	movlb	0	; () banked
  2151  00128E  A9CC               	btfss	(sprintf@flag+1)& (0+255),4,b
  2152  001290  D005               	goto	l5381
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;doprnt.c: 829: prec = 6;
  2156  001292  0E00               	movlw	0
  2157  001294  0100               	movlb	0	; () banked
  2158  001296  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2159  001298  0E06               	movlw	6
  2160  00129A  6FDD               	movwf	sprintf@prec& (0+255),b
  2161  00129C                     l5381:
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2165  00129C  C0C9  FFD9         	movff	sprintf@ap,fsr2l
  2166  0012A0  C0CA  FFDA         	movff	sprintf@ap+1,fsr2h
  2167  0012A4  CFDE F0D9          	movff	postinc2,sprintf@fval
  2168  0012A8  CFDE F0DA          	movff	postinc2,sprintf@fval+1
  2169  0012AC  CFDE F0DB          	movff	postinc2,sprintf@fval+2
  2170  0012B0  CFDE F0DC          	movff	postinc2,sprintf@fval+3
  2171                           
  2172                           ; BSR set to: 0
  2173  0012B4  0E04               	movlw	4
  2174  0012B6  0100               	movlb	0	; () banked
  2175  0012B8  27C9               	addwf	sprintf@ap& (0+255),f,b
  2176  0012BA  0E00               	movlw	0
  2177  0012BC  23CA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;doprnt.c: 831: if(fval < 0.0) {
  2181  0012BE  0100               	movlb	0	; () banked
  2182  0012C0  AFDC               	btfss	(sprintf@fval+3)& (0+255),7,b
  2183  0012C2  D015               	goto	l5391
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;doprnt.c: 832: fval = -fval;
  2187  0012C4  C0D9  F018         	movff	sprintf@fval,___flneg@f1
  2188  0012C8  C0DA  F019         	movff	sprintf@fval+1,___flneg@f1+1
  2189  0012CC  C0DB  F01A         	movff	sprintf@fval+2,___flneg@f1+2
  2190  0012D0  C0DC  F01B         	movff	sprintf@fval+3,___flneg@f1+3
  2191  0012D4  EC0B  F021         	call	___flneg	;wreg free
  2192  0012D8  C018  F0D9         	movff	?___flneg,sprintf@fval
  2193  0012DC  C019  F0DA         	movff	?___flneg+1,sprintf@fval+1
  2194  0012E0  C01A  F0DB         	movff	?___flneg+2,sprintf@fval+2
  2195  0012E4  C01B  F0DC         	movff	?___flneg+3,sprintf@fval+3
  2196                           
  2197                           ;doprnt.c: 833: flag |= 0x03;
  2198  0012E8  0E03               	movlw	3
  2199  0012EA  0100               	movlb	0	; () banked
  2200  0012EC  13CB               	iorwf	sprintf@flag& (0+255),f,b
  2201  0012EE                     l5391:
  2202                           
  2203                           ; BSR set to: 0
  2204                           ;doprnt.c: 834: }
  2205                           ;doprnt.c: 835: exp = 0;
  2206  0012EE  0E00               	movlw	0
  2207  0012F0  0100               	movlb	0	; () banked
  2208  0012F2  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  2209  0012F4  0E00               	movlw	0
  2210  0012F6  6FD7               	movwf	sprintf@exp& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;doprnt.c: 836: if( fval!=0) {
  2214  0012F8  0100               	movlb	0	; () banked
  2215  0012FA  51D9               	movf	sprintf@fval& (0+255),w,b
  2216  0012FC  0100               	movlb	0	; () banked
  2217  0012FE  11DA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2218  001300  0100               	movlb	0	; () banked
  2219  001302  11DB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2220  001304  0100               	movlb	0	; () banked
  2221  001306  11DC               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2222  001308  B4D8               	btfsc	status,2,c
  2223  00130A  D088               	goto	l5419
  2224                           
  2225                           ; BSR set to: 0
  2226                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2227  00130C  0100               	movlb	0	; () banked
  2228  00130E  35DB               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2229  001310  35DC               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2230  001312  0F82               	addlw	130
  2231  001314  0100               	movlb	0	; () banked
  2232  001316  6FD7               	movwf	sprintf@exp& (0+255),b
  2233  001318  0100               	movlb	0	; () banked
  2234  00131A  6BD8               	clrf	(sprintf@exp+1)& (0+255),b
  2235  00131C  0EFF               	movlw	255
  2236  00131E  23D8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;doprnt.c: 838: exp--;
  2240  001320  0100               	movlb	0	; () banked
  2241  001322  07D7               	decf	sprintf@exp& (0+255),f,b
  2242  001324  A0D8               	btfss	status,0,c
  2243  001326  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 839: exp *= 3;
  2247  001328  C0D7  F018         	movff	sprintf@exp,___wmul@multiplier
  2248  00132C  C0D8  F019         	movff	sprintf@exp+1,___wmul@multiplier+1
  2249  001330  0E00               	movlw	0
  2250  001332  6E1B               	movwf	___wmul@multiplicand+1,c
  2251  001334  0E03               	movlw	3
  2252  001336  6E1A               	movwf	___wmul@multiplicand,c
  2253  001338  EC7C  F021         	call	___wmul	;wreg free
  2254  00133C  C018  F0D7         	movff	?___wmul,sprintf@exp
  2255  001340  C019  F0D8         	movff	?___wmul+1,sprintf@exp+1
  2256                           
  2257                           ;doprnt.c: 840: exp /= 10;
  2258  001344  C0D7  F018         	movff	sprintf@exp,___awdiv@dividend
  2259  001348  C0D8  F019         	movff	sprintf@exp+1,___awdiv@dividend+1
  2260  00134C  0E00               	movlw	0
  2261  00134E  6E1B               	movwf	___awdiv@divisor+1,c
  2262  001350  0E0A               	movlw	10
  2263  001352  6E1A               	movwf	___awdiv@divisor,c
  2264  001354  ECED  F01D         	call	___awdiv	;wreg free
  2265  001358  C018  F0D7         	movff	?___awdiv,sprintf@exp
  2266  00135C  C019  F0D8         	movff	?___awdiv+1,sprintf@exp+1
  2267                           
  2268                           ;doprnt.c: 841: if(exp < 0)
  2269  001360  0100               	movlb	0	; () banked
  2270  001362  AFD8               	btfss	(sprintf@exp+1)& (0+255),7,b
  2271  001364  D004               	goto	l5407
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 842: exp--;
  2275  001366  0100               	movlb	0	; () banked
  2276  001368  07D7               	decf	sprintf@exp& (0+255),f,b
  2277  00136A  A0D8               	btfss	status,0,c
  2278  00136C  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2279  00136E                     l5407:
  2280                           
  2281                           ; BSR set to: 0
  2282                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2283  00136E  0100               	movlb	0	; () banked
  2284  001370  51D7               	movf	sprintf@exp& (0+255),w,b
  2285  001372  0800               	sublw	0
  2286  001374  ECB9  F012         	call	_scale
  2287  001378  C049  F0CF         	movff	?_scale,sprintf@tmpval
  2288  00137C  C04A  F0D0         	movff	?_scale+1,sprintf@tmpval+1
  2289  001380  C04B  F0D1         	movff	?_scale+2,sprintf@tmpval+2
  2290  001384  C04C  F0D2         	movff	?_scale+3,sprintf@tmpval+3
  2291                           
  2292                           ;doprnt.c: 847: tmpval.integ *= fval;
  2293  001388  C0CF  F020         	movff	sprintf@tmpval,___flmul@b
  2294  00138C  C0D0  F021         	movff	sprintf@tmpval+1,___flmul@b+1
  2295  001390  C0D1  F022         	movff	sprintf@tmpval+2,___flmul@b+2
  2296  001394  C0D2  F023         	movff	sprintf@tmpval+3,___flmul@b+3
  2297  001398  C0D9  F024         	movff	sprintf@fval,___flmul@a
  2298  00139C  C0DA  F025         	movff	sprintf@fval+1,___flmul@a+1
  2299  0013A0  C0DB  F026         	movff	sprintf@fval+2,___flmul@a+2
  2300  0013A4  C0DC  F027         	movff	sprintf@fval+3,___flmul@a+3
  2301  0013A8  ECA5  F016         	call	___flmul	;wreg free
  2302  0013AC  C020  F0CF         	movff	?___flmul,sprintf@tmpval
  2303  0013B0  C021  F0D0         	movff	?___flmul+1,sprintf@tmpval+1
  2304  0013B4  C022  F0D1         	movff	?___flmul+2,sprintf@tmpval+2
  2305  0013B8  C023  F0D2         	movff	?___flmul+3,sprintf@tmpval+3
  2306                           
  2307                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2308  0013BC  C0CF  F039         	movff	sprintf@tmpval,___flge@ff1
  2309  0013C0  C0D0  F03A         	movff	sprintf@tmpval+1,___flge@ff1+1
  2310  0013C4  C0D1  F03B         	movff	sprintf@tmpval+2,___flge@ff1+2
  2311  0013C8  C0D2  F03C         	movff	sprintf@tmpval+3,___flge@ff1+3
  2312  0013CC  0E00               	movlw	0
  2313  0013CE  6E3D               	movwf	___flge@ff2,c
  2314  0013D0  0E00               	movlw	0
  2315  0013D2  6E3E               	movwf	___flge@ff2+1,c
  2316  0013D4  0E80               	movlw	128
  2317  0013D6  6E3F               	movwf	___flge@ff2+2,c
  2318  0013D8  0E3F               	movlw	63
  2319  0013DA  6E40               	movwf	___flge@ff2+3,c
  2320  0013DC  EC63  F01B         	call	___flge	;wreg free
  2321  0013E0  B0D8               	btfsc	status,0,c
  2322  0013E2  D005               	goto	l5415
  2323                           
  2324                           ;doprnt.c: 849: exp--;
  2325  0013E4  0100               	movlb	0	; () banked
  2326  0013E6  07D7               	decf	sprintf@exp& (0+255),f,b
  2327  0013E8  A0D8               	btfss	status,0,c
  2328  0013EA  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2329  0013EC  D017               	goto	l5419
  2330  0013EE                     l5415:
  2331                           
  2332                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2333  0013EE  C0CF  F039         	movff	sprintf@tmpval,___flge@ff1
  2334  0013F2  C0D0  F03A         	movff	sprintf@tmpval+1,___flge@ff1+1
  2335  0013F6  C0D1  F03B         	movff	sprintf@tmpval+2,___flge@ff1+2
  2336  0013FA  C0D2  F03C         	movff	sprintf@tmpval+3,___flge@ff1+3
  2337  0013FE  0E00               	movlw	0
  2338  001400  6E3D               	movwf	___flge@ff2,c
  2339  001402  0E00               	movlw	0
  2340  001404  6E3E               	movwf	___flge@ff2+1,c
  2341  001406  0E20               	movlw	32
  2342  001408  6E3F               	movwf	___flge@ff2+2,c
  2343  00140A  0E41               	movlw	65
  2344  00140C  6E40               	movwf	___flge@ff2+3,c
  2345  00140E  EC63  F01B         	call	___flge	;wreg free
  2346  001412  A0D8               	btfss	status,0,c
  2347  001414  D003               	goto	l5419
  2348                           
  2349                           ;doprnt.c: 851: exp++;
  2350  001416  0100               	movlb	0	; () banked
  2351  001418  4BD7               	infsnz	sprintf@exp& (0+255),f,b
  2352  00141A  2BD8               	incf	(sprintf@exp+1)& (0+255),f,b
  2353  00141C                     l5419:
  2354                           
  2355                           ;doprnt.c: 852: }
  2356                           ;doprnt.c: 1112: if(prec <= 12)
  2357  00141C  0100               	movlb	0	; () banked
  2358  00141E  BFDE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2359  001420  D008               	goto	l5421
  2360  001422  0100               	movlb	0	; () banked
  2361  001424  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  2362  001426  E123               	bnz	l5423
  2363  001428  0E0D               	movlw	13
  2364  00142A  0100               	movlb	0	; () banked
  2365  00142C  5DDD               	subwf	sprintf@prec& (0+255),w,b
  2366  00142E  B0D8               	btfsc	status,0,c
  2367  001430  D01E               	goto	l5423
  2368  001432                     l5421:
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;doprnt.c: 1113: fval += fround(prec);
  2372  001432  C0D9  F099         	movff	sprintf@fval,___fladd@b
  2373  001436  C0DA  F09A         	movff	sprintf@fval+1,___fladd@b+1
  2374  00143A  C0DB  F09B         	movff	sprintf@fval+2,___fladd@b+2
  2375  00143E  C0DC  F09C         	movff	sprintf@fval+3,___fladd@b+3
  2376  001442  0100               	movlb	0	; () banked
  2377  001444  51DD               	movf	sprintf@prec& (0+255),w,b
  2378  001446  EC4D  F018         	call	_fround
  2379  00144A  C049  F09D         	movff	?_fround,___fladd@a
  2380  00144E  C04A  F09E         	movff	?_fround+1,___fladd@a+1
  2381  001452  C04B  F09F         	movff	?_fround+2,___fladd@a+2
  2382  001456  C04C  F0A0         	movff	?_fround+3,___fladd@a+3
  2383  00145A  EC4B  F00E         	call	___fladd	;wreg free
  2384  00145E  C099  F0D9         	movff	?___fladd,sprintf@fval
  2385  001462  C09A  F0DA         	movff	?___fladd+1,sprintf@fval+1
  2386  001466  C09B  F0DB         	movff	?___fladd+2,sprintf@fval+2
  2387  00146A  C09C  F0DC         	movff	?___fladd+3,sprintf@fval+3
  2388  00146E                     l5423:
  2389                           
  2390                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2391  00146E  0100               	movlb	0	; () banked
  2392  001470  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2393  001472  D008               	goto	l5425
  2394  001474  0100               	movlb	0	; () banked
  2395  001476  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2396  001478  E12A               	bnz	l5431
  2397  00147A  0E0A               	movlw	10
  2398  00147C  0100               	movlb	0	; () banked
  2399  00147E  5DD7               	subwf	sprintf@exp& (0+255),w,b
  2400  001480  B0D8               	btfsc	status,0,c
  2401  001482  D025               	goto	l5431
  2402  001484                     l5425:
  2403                           
  2404                           ; BSR set to: 0
  2405  001484  0100               	movlb	0	; () banked
  2406  001486  51D9               	movf	sprintf@fval& (0+255),w,b
  2407  001488  0100               	movlb	0	; () banked
  2408  00148A  11DA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2409  00148C  0100               	movlb	0	; () banked
  2410  00148E  11DB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2411  001490  0100               	movlb	0	; () banked
  2412  001492  11DC               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2413  001494  B4D8               	btfsc	status,2,c
  2414  001496  D067               	goto	l5445
  2415                           
  2416                           ; BSR set to: 0
  2417  001498  C0D9  F039         	movff	sprintf@fval,___fltol@f1
  2418  00149C  C0DA  F03A         	movff	sprintf@fval+1,___fltol@f1+1
  2419  0014A0  C0DB  F03B         	movff	sprintf@fval+2,___fltol@f1+2
  2420  0014A4  C0DC  F03C         	movff	sprintf@fval+3,___fltol@f1+3
  2421  0014A8  EC82  F01C         	call	___fltol	;wreg free
  2422  0014AC  5039               	movf	?___fltol,w,c
  2423  0014AE  103A               	iorwf	?___fltol+1,w,c
  2424  0014B0  103B               	iorwf	?___fltol+2,w,c
  2425  0014B2  103C               	iorwf	?___fltol+3,w,c
  2426  0014B4  A4D8               	btfss	status,2,c
  2427  0014B6  D057               	goto	l5445
  2428  0014B8  0100               	movlb	0	; () banked
  2429  0014BA  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2430  0014BC  D054               	goto	l5445
  2431  0014BE  0100               	movlb	0	; () banked
  2432  0014C0  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2433  0014C2  E105               	bnz	l5431
  2434  0014C4  0E02               	movlw	2
  2435  0014C6  0100               	movlb	0	; () banked
  2436  0014C8  5DD7               	subwf	sprintf@exp& (0+255),w,b
  2437  0014CA  A0D8               	btfss	status,0,c
  2438  0014CC  D04C               	goto	l5445
  2439  0014CE                     l5431:
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2443  0014CE  C0CF  F039         	movff	sprintf@tmpval,___flge@ff1
  2444  0014D2  C0D0  F03A         	movff	sprintf@tmpval+1,___flge@ff1+1
  2445  0014D6  C0D1  F03B         	movff	sprintf@tmpval+2,___flge@ff1+2
  2446  0014DA  C0D2  F03C         	movff	sprintf@tmpval+3,___flge@ff1+3
  2447  0014DE  0E5F               	movlw	95
  2448  0014E0  6E3D               	movwf	___flge@ff2,c
  2449  0014E2  0E70               	movlw	112
  2450  0014E4  6E3E               	movwf	___flge@ff2+1,c
  2451  0014E6  0E89               	movlw	137
  2452  0014E8  6E3F               	movwf	___flge@ff2+2,c
  2453  0014EA  0E40               	movlw	64
  2454  0014EC  6E40               	movwf	___flge@ff2+3,c
  2455  0014EE  EC63  F01B         	call	___flge	;wreg free
  2456  0014F2  B0D8               	btfsc	status,0,c
  2457  0014F4  D003               	goto	l5435
  2458                           
  2459                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2460  0014F6  0100               	movlb	0	; () banked
  2461  0014F8  0EF7               	movlw	247
  2462  0014FA  D002               	goto	L2
  2463  0014FC                     l5435:
  2464                           
  2465                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2466  0014FC  0100               	movlb	0	; () banked
  2467  0014FE  0EF8               	movlw	248
  2468  001500                     L2:
  2469  001500  27D7               	addwf	sprintf@exp& (0+255),f,b
  2470  001502  0EFF               	movlw	255
  2471  001504  23D8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2475                           
  2476                           ; BSR set to: 0
  2477  001506  0100               	movlb	0	; () banked
  2478  001508  51D7               	movf	sprintf@exp& (0+255),w,b
  2479  00150A  ECB9  F012         	call	_scale
  2480  00150E  C049  F0CF         	movff	?_scale,sprintf@tmpval
  2481  001512  C04A  F0D0         	movff	?_scale+1,sprintf@tmpval+1
  2482  001516  C04B  F0D1         	movff	?_scale+2,sprintf@tmpval+2
  2483  00151A  C04C  F0D2         	movff	?_scale+3,sprintf@tmpval+3
  2484  00151E  C0D9  F018         	movff	sprintf@fval,__div_to_l_@f1
  2485  001522  C0DA  F019         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2486  001526  C0DB  F01A         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2487  00152A  C0DC  F01B         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2488  00152E  C0CF  F01C         	movff	sprintf@tmpval,__div_to_l_@f2
  2489  001532  C0D0  F01D         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2490  001536  C0D1  F01E         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2491  00153A  C0D2  F01F         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2492  00153E  ECCF  F01A         	call	__div_to_l_	;wreg free
  2493  001542  C018  F0D3         	movff	?__div_to_l_,sprintf@val
  2494  001546  C019  F0D4         	movff	?__div_to_l_+1,sprintf@val+1
  2495  00154A  C01A  F0D5         	movff	?__div_to_l_+2,sprintf@val+2
  2496  00154E  C01B  F0D6         	movff	?__div_to_l_+3,sprintf@val+3
  2497                           
  2498                           ;doprnt.c: 1129: fval = 0.0;
  2499  001552  0E00               	movlw	0
  2500  001554  0100               	movlb	0	; () banked
  2501  001556  6FD9               	movwf	sprintf@fval& (0+255),b
  2502  001558  0E00               	movlw	0
  2503  00155A  6FDA               	movwf	(sprintf@fval+1)& (0+255),b
  2504  00155C  0E00               	movlw	0
  2505  00155E  6FDB               	movwf	(sprintf@fval+2)& (0+255),b
  2506  001560  0E00               	movlw	0
  2507  001562  6FDC               	movwf	(sprintf@fval+3)& (0+255),b
  2508                           
  2509                           ;doprnt.c: 1130: } else {
  2510  001564  D03C               	goto	l5449
  2511  001566                     l5445:
  2512                           
  2513                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2514  001566  C0D9  F039         	movff	sprintf@fval,___fltol@f1
  2515  00156A  C0DA  F03A         	movff	sprintf@fval+1,___fltol@f1+1
  2516  00156E  C0DB  F03B         	movff	sprintf@fval+2,___fltol@f1+2
  2517  001572  C0DC  F03C         	movff	sprintf@fval+3,___fltol@f1+3
  2518  001576  EC82  F01C         	call	___fltol	;wreg free
  2519  00157A  C039  F0D3         	movff	?___fltol,sprintf@val
  2520  00157E  C03A  F0D4         	movff	?___fltol+1,sprintf@val+1
  2521  001582  C03B  F0D5         	movff	?___fltol+2,sprintf@val+2
  2522  001586  C03C  F0D6         	movff	?___fltol+3,sprintf@val+3
  2523                           
  2524                           ;doprnt.c: 1132: fval -= (double)val;
  2525  00158A  C0D9  F0AD         	movff	sprintf@fval,___flsub@b
  2526  00158E  C0DA  F0AE         	movff	sprintf@fval+1,___flsub@b+1
  2527  001592  C0DB  F0AF         	movff	sprintf@fval+2,___flsub@b+2
  2528  001596  C0DC  F0B0         	movff	sprintf@fval+3,___flsub@b+3
  2529  00159A  C0D3  F043         	movff	sprintf@val,___xxtofl@val
  2530  00159E  C0D4  F044         	movff	sprintf@val+1,___xxtofl@val+1
  2531  0015A2  C0D5  F045         	movff	sprintf@val+2,___xxtofl@val+2
  2532  0015A6  C0D6  F046         	movff	sprintf@val+3,___xxtofl@val+3
  2533  0015AA  0E00               	movlw	0
  2534  0015AC  EC8E  F019         	call	___xxtofl
  2535  0015B0  C043  F0B1         	movff	?___xxtofl,___flsub@a
  2536  0015B4  C044  F0B2         	movff	?___xxtofl+1,___flsub@a+1
  2537  0015B8  C045  F0B3         	movff	?___xxtofl+2,___flsub@a+2
  2538  0015BC  C046  F0B4         	movff	?___xxtofl+3,___flsub@a+3
  2539  0015C0  EC4B  F020         	call	___flsub	;wreg free
  2540  0015C4  C0AD  F0D9         	movff	?___flsub,sprintf@fval
  2541  0015C8  C0AE  F0DA         	movff	?___flsub+1,sprintf@fval+1
  2542  0015CC  C0AF  F0DB         	movff	?___flsub+2,sprintf@fval+2
  2543  0015D0  C0B0  F0DC         	movff	?___flsub+3,sprintf@fval+3
  2544                           
  2545                           ;doprnt.c: 1133: exp = 0;
  2546  0015D4  0E00               	movlw	0
  2547  0015D6  0100               	movlb	0	; () banked
  2548  0015D8  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  2549  0015DA  0E00               	movlw	0
  2550  0015DC  6FD7               	movwf	sprintf@exp& (0+255),b
  2551  0015DE                     l5449:
  2552                           
  2553                           ; BSR set to: 0
  2554                           ;doprnt.c: 1134: }
  2555                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2556  0015DE  0E01               	movlw	1
  2557  0015E0  0100               	movlb	0	; () banked
  2558  0015E2  6FDF               	movwf	sprintf@c& (0+255),b
  2559  0015E4                     l5451:
  2560                           
  2561                           ; BSR set to: 0
  2562  0015E4  0E0A               	movlw	10
  2563  0015E6  0100               	movlb	0	; () banked
  2564  0015E8  19DF               	xorwf	sprintf@c& (0+255),w,b
  2565  0015EA  B4D8               	btfsc	status,2,c
  2566  0015EC  D01E               	goto	l5463
  2567                           
  2568                           ; BSR set to: 0
  2569                           ;doprnt.c: 1137: if(val < dpowers[c])
  2570                           
  2571                           ; BSR set to: 0
  2572                           
  2573                           ; BSR set to: 0
  2574  0015EE  0100               	movlb	0	; () banked
  2575  0015F0  51DF               	movf	sprintf@c& (0+255),w,b
  2576  0015F2  0D04               	mullw	4
  2577  0015F4  0E69               	movlw	low _dpowers
  2578  0015F6  24F3               	addwf	prodl,w,c
  2579  0015F8  6EF6               	movwf	tblptrl,c
  2580  0015FA  0E10               	movlw	high _dpowers
  2581  0015FC  20F4               	addwfc	prodh,w,c
  2582  0015FE  6EF7               	movwf	tblptrh,c
  2583  001600                     	if	0	;There are less than 3 active tblptr bytes
  2584  001600                     	endif
  2585  001600  0009               	tblrd		*+
  2586  001602  50F5               	movf	tablat,w,c
  2587  001604  0100               	movlb	0	; () banked
  2588  001606  5DD3               	subwf	sprintf@val& (0+255),w,b
  2589  001608  0009               	tblrd		*+
  2590  00160A  50F5               	movf	tablat,w,c
  2591  00160C  0100               	movlb	0	; () banked
  2592  00160E  59D4               	subwfb	(sprintf@val+1)& (0+255),w,b
  2593  001610  0009               	tblrd		*+
  2594  001612  50F5               	movf	tablat,w,c
  2595  001614  0100               	movlb	0	; () banked
  2596  001616  59D5               	subwfb	(sprintf@val+2)& (0+255),w,b
  2597  001618  0009               	tblrd		*+
  2598  00161A  50F5               	movf	tablat,w,c
  2599  00161C  0100               	movlb	0	; () banked
  2600  00161E  59D6               	subwfb	(sprintf@val+3)& (0+255),w,b
  2601  001620  A0D8               	btfss	status,0,c
  2602  001622  D003               	goto	l5463
  2603                           
  2604                           ; BSR set to: 0
  2605                           
  2606                           ; BSR set to: 0
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1138: break;
  2610  001624  0100               	movlb	0	; () banked
  2611  001626  2BDF               	incf	sprintf@c& (0+255),f,b
  2612  001628  D7DD               	goto	l5451
  2613  00162A                     l5463:
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;doprnt.c: 1142: width -= prec + c + exp;
  2617  00162A  C0DF  F0C1         	movff	sprintf@c,??_sprintf
  2618  00162E  0100               	movlb	0	; () banked
  2619  001630  6BC2               	clrf	(??_sprintf+1)& (0+255),b
  2620  001632  BFC1               	btfsc	??_sprintf& (0+255),7,b
  2621  001634  07C2               	decf	(??_sprintf+1)& (0+255),f,b
  2622  001636  0100               	movlb	0	; () banked
  2623  001638  51DD               	movf	sprintf@prec& (0+255),w,b
  2624  00163A  0100               	movlb	0	; () banked
  2625  00163C  27C1               	addwf	??_sprintf& (0+255),f,b
  2626  00163E  0100               	movlb	0	; () banked
  2627  001640  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  2628  001642  0100               	movlb	0	; () banked
  2629  001644  23C2               	addwfc	(??_sprintf+1)& (0+255),f,b
  2630  001646  0100               	movlb	0	; () banked
  2631  001648  51D7               	movf	sprintf@exp& (0+255),w,b
  2632  00164A  0100               	movlb	0	; () banked
  2633  00164C  27C1               	addwf	??_sprintf& (0+255),f,b
  2634  00164E  0100               	movlb	0	; () banked
  2635  001650  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2636  001652  0100               	movlb	0	; () banked
  2637  001654  23C2               	addwfc	(??_sprintf+1)& (0+255),f,b
  2638  001656  0100               	movlb	0	; () banked
  2639  001658  51C1               	movf	??_sprintf& (0+255),w,b
  2640  00165A  0100               	movlb	0	; () banked
  2641  00165C  5FCD               	subwf	sprintf@width& (0+255),f,b
  2642  00165E  0100               	movlb	0	; () banked
  2643  001660  51C2               	movf	(??_sprintf+1)& (0+255),w,b
  2644  001662  0100               	movlb	0	; () banked
  2645  001664  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  2646                           
  2647                           ;doprnt.c: 1143: if(
  2648                           ;doprnt.c: 1147: prec)
  2649  001666  0100               	movlb	0	; () banked
  2650  001668  51DD               	movf	sprintf@prec& (0+255),w,b
  2651  00166A  0100               	movlb	0	; () banked
  2652  00166C  11DE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2653  00166E  B4D8               	btfsc	status,2,c
  2654  001670  D004               	goto	l5467
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1148: width--;
  2658  001672  0100               	movlb	0	; () banked
  2659  001674  07CD               	decf	sprintf@width& (0+255),f,b
  2660  001676  A0D8               	btfss	status,0,c
  2661  001678  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  2662  00167A                     l5467:
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;doprnt.c: 1149: if(flag & 0x03)
  2666  00167A  0E03               	movlw	3
  2667  00167C  0100               	movlb	0	; () banked
  2668  00167E  15CB               	andwf	sprintf@flag& (0+255),w,b
  2669  001680  0100               	movlb	0	; () banked
  2670  001682  6FC1               	movwf	??_sprintf& (0+255),b
  2671  001684  0E00               	movlw	0
  2672  001686  0100               	movlb	0	; () banked
  2673  001688  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2674  00168A  0100               	movlb	0	; () banked
  2675  00168C  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  2676  00168E  0100               	movlb	0	; () banked
  2677  001690  51C1               	movf	??_sprintf& (0+255),w,b
  2678  001692  0100               	movlb	0	; () banked
  2679  001694  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  2680  001696  B4D8               	btfsc	status,2,c
  2681  001698  D00E               	goto	l5477
  2682  00169A  D009               	goto	l5475
  2683  00169C                     l5471:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2687  00169C  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2688  0016A0  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2689  0016A4  0E20               	movlw	32
  2690  0016A6  6EDF               	movwf	indf2,c
  2691                           
  2692                           ; BSR set to: 0
  2693  0016A8  0100               	movlb	0	; () banked
  2694  0016AA  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2695  0016AC  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2696  0016AE                     l5475:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 1182: width--;
  2700  0016AE  0100               	movlb	0	; () banked
  2701  0016B0  07CD               	decf	sprintf@width& (0+255),f,b
  2702  0016B2  A0D8               	btfss	status,0,c
  2703  0016B4  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  2704  0016B6                     l5477:
  2705                           
  2706                           ; BSR set to: 0
  2707  0016B6  0100               	movlb	0	; () banked
  2708  0016B8  BFCE               	btfsc	(sprintf@width+1)& (0+255),7,b
  2709  0016BA  D007               	goto	l5479
  2710  0016BC  0100               	movlb	0	; () banked
  2711  0016BE  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  2712  0016C0  E1ED               	bnz	l5471
  2713  0016C2  0100               	movlb	0	; () banked
  2714  0016C4  05CD               	decf	sprintf@width& (0+255),w,b
  2715  0016C6  B0D8               	btfsc	status,0,c
  2716  0016C8  D7E9               	goto	l5471
  2717  0016CA                     l5479:
  2718                           
  2719                           ; BSR set to: 0
  2720                           ;doprnt.c: 1183: }
  2721                           ;doprnt.c: 1188: if(flag & 0x03)
  2722  0016CA  0E03               	movlw	3
  2723  0016CC  0100               	movlb	0	; () banked
  2724  0016CE  15CB               	andwf	sprintf@flag& (0+255),w,b
  2725  0016D0  0100               	movlb	0	; () banked
  2726  0016D2  6FC1               	movwf	??_sprintf& (0+255),b
  2727  0016D4  0E00               	movlw	0
  2728  0016D6  0100               	movlb	0	; () banked
  2729  0016D8  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2730  0016DA  0100               	movlb	0	; () banked
  2731  0016DC  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  2732  0016DE  0100               	movlb	0	; () banked
  2733  0016E0  51C1               	movf	??_sprintf& (0+255),w,b
  2734  0016E2  0100               	movlb	0	; () banked
  2735  0016E4  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  2736  0016E6  B4D8               	btfsc	status,2,c
  2737  0016E8  D054               	goto	l5493
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2741  0016EA  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2742  0016EE  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2743  0016F2  0E2D               	movlw	45
  2744  0016F4  D04C               	goto	L3
  2745  0016F6                     l5483:
  2746                           
  2747                           ; BSR set to: 0
  2748  0016F6  0100               	movlb	0	; () banked
  2749  0016F8  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2750  0016FA  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;doprnt.c: 1195: }
  2754                           ;doprnt.c: 1196: while(c--) {
  2755  0016FC  D04A               	goto	l5493
  2756  0016FE                     l5485:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;doprnt.c: 1200: {
  2760                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2761  0016FE  C0D3  F018         	movff	sprintf@val,___lldiv@dividend
  2762  001702  C0D4  F019         	movff	sprintf@val+1,___lldiv@dividend+1
  2763  001706  C0D5  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
  2764  00170A  C0D6  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
  2765  00170E  0100               	movlb	0	; () banked
  2766  001710  51DF               	movf	sprintf@c& (0+255),w,b
  2767  001712  0D04               	mullw	4
  2768  001714  0E69               	movlw	low _dpowers
  2769  001716  24F3               	addwf	prodl,w,c
  2770  001718  6EF6               	movwf	tblptrl,c
  2771  00171A  0E10               	movlw	high _dpowers
  2772  00171C  20F4               	addwfc	prodh,w,c
  2773  00171E  6EF7               	movwf	tblptrh,c
  2774  001720                     	if	0	;There are less than 3 active tblptr bytes
  2775  001720                     	endif
  2776  001720  0009               	tblrd		*+
  2777  001722  CFF5 F01C          	movff	tablat,___lldiv@divisor
  2778  001726  0009               	tblrd		*+
  2779  001728  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
  2780  00172C  0009               	tblrd		*+
  2781  00172E  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
  2782  001732  000A               	tblrd		*-
  2783  001734  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
  2784  001738  EC2F  F01E         	call	___lldiv	;wreg free
  2785  00173C  C018  F0CF         	movff	?___lldiv,sprintf@tmpval
  2786  001740  C019  F0D0         	movff	?___lldiv+1,sprintf@tmpval+1
  2787  001744  C01A  F0D1         	movff	?___lldiv+2,sprintf@tmpval+2
  2788  001748  C01B  F0D2         	movff	?___lldiv+3,sprintf@tmpval+3
  2789                           
  2790                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2791  00174C  C0CF  F025         	movff	sprintf@tmpval,___llmod@dividend
  2792  001750  C0D0  F026         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2793  001754  C0D1  F027         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2794  001758  C0D2  F028         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2795  00175C  0E0A               	movlw	10
  2796  00175E  6E29               	movwf	___llmod@divisor,c
  2797  001760  0E00               	movlw	0
  2798  001762  6E2A               	movwf	___llmod@divisor+1,c
  2799  001764  0E00               	movlw	0
  2800  001766  6E2B               	movwf	___llmod@divisor+2,c
  2801  001768  0E00               	movlw	0
  2802  00176A  6E2C               	movwf	___llmod@divisor+3,c
  2803  00176C  EC5C  F01F         	call	___llmod	;wreg free
  2804  001770  C025  F0CF         	movff	?___llmod,sprintf@tmpval
  2805  001774  C026  F0D0         	movff	?___llmod+1,sprintf@tmpval+1
  2806  001778  C027  F0D1         	movff	?___llmod+2,sprintf@tmpval+2
  2807  00177C  C028  F0D2         	movff	?___llmod+3,sprintf@tmpval+3
  2808                           
  2809                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2810  001780  0100               	movlb	0	; () banked
  2811  001782  51CF               	movf	sprintf@tmpval& (0+255),w,b
  2812  001784  0F30               	addlw	48
  2813  001786  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2814  00178A  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2815  00178E                     L3:
  2816  00178E  6EDF               	movwf	indf2,c
  2817  001790  D7B2               	goto	l5483
  2818  001792                     l5493:
  2819                           
  2820                           ; BSR set to: 0
  2821  001792  0100               	movlb	0	; () banked
  2822  001794  07DF               	decf	sprintf@c& (0+255),f,b
  2823  001796  0100               	movlb	0	; () banked
  2824  001798  29DF               	incf	sprintf@c& (0+255),w,b
  2825  00179A  B4D8               	btfsc	status,2,c
  2826  00179C  D00E               	goto	l5501
  2827  00179E  D7AF               	goto	l5485
  2828  0017A0                     l5495:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2832  0017A0  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2833  0017A4  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2834  0017A8  0E30               	movlw	48
  2835  0017AA  6EDF               	movwf	indf2,c
  2836                           
  2837                           ; BSR set to: 0
  2838  0017AC  0100               	movlb	0	; () banked
  2839  0017AE  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2840  0017B0  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2841                           
  2842                           ; BSR set to: 0
  2843                           ;doprnt.c: 1209: exp--;
  2844  0017B2  0100               	movlb	0	; () banked
  2845  0017B4  07D7               	decf	sprintf@exp& (0+255),f,b
  2846  0017B6  A0D8               	btfss	status,0,c
  2847  0017B8  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2848  0017BA                     l5501:
  2849                           
  2850                           ; BSR set to: 0
  2851  0017BA  0100               	movlb	0	; () banked
  2852  0017BC  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2853  0017BE  D007               	goto	l5503
  2854  0017C0  0100               	movlb	0	; () banked
  2855  0017C2  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2856  0017C4  E1ED               	bnz	l5495
  2857  0017C6  0100               	movlb	0	; () banked
  2858  0017C8  05D7               	decf	sprintf@exp& (0+255),w,b
  2859  0017CA  B0D8               	btfsc	status,0,c
  2860  0017CC  D7E9               	goto	l5495
  2861  0017CE                     l5503:
  2862                           
  2863                           ; BSR set to: 0
  2864                           ;doprnt.c: 1210: }
  2865                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2866  0017CE  0100               	movlb	0	; () banked
  2867  0017D0  BFDE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2868  0017D2  D00C               	goto	l456
  2869  0017D4  0100               	movlb	0	; () banked
  2870  0017D6  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  2871  0017D8  E105               	bnz	u6420
  2872  0017DA  0E09               	movlw	9
  2873  0017DC  0100               	movlb	0	; () banked
  2874  0017DE  5DDD               	subwf	sprintf@prec& (0+255),w,b
  2875  0017E0  A0D8               	btfss	status,0,c
  2876  0017E2  D004               	goto	l456
  2877  0017E4                     u6420:
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2881  0017E4  0E08               	movlw	8
  2882  0017E6  0100               	movlb	0	; () banked
  2883  0017E8  6FDF               	movwf	sprintf@c& (0+255),b
  2884  0017EA  D002               	goto	l5507
  2885  0017EC                     l456:
  2886                           
  2887                           ; BSR set to: 0
  2888                           ;doprnt.c: 1213: else
  2889                           ;doprnt.c: 1214: c = prec;
  2890  0017EC  C0DD  F0DF         	movff	sprintf@prec,sprintf@c
  2891  0017F0                     l5507:
  2892                           
  2893                           ; BSR set to: 0
  2894                           ;doprnt.c: 1215: prec -= c;
  2895  0017F0  0100               	movlb	0	; () banked
  2896  0017F2  51DF               	movf	sprintf@c& (0+255),w,b
  2897  0017F4  0100               	movlb	0	; () banked
  2898  0017F6  5FDD               	subwf	sprintf@prec& (0+255),f,b
  2899  0017F8  0E00               	movlw	0
  2900  0017FA  0100               	movlb	0	; () banked
  2901  0017FC  BFDF               	btfsc	sprintf@c& (0+255),7,b
  2902  0017FE  0EFF               	movlw	255
  2903  001800  0100               	movlb	0	; () banked
  2904  001802  5BDE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;doprnt.c: 1219: if(c)
  2908  001804  0100               	movlb	0	; () banked
  2909  001806  51DF               	movf	sprintf@c& (0+255),w,b
  2910  001808  0100               	movlb	0	; () banked
  2911  00180A  B4D8               	btfsc	status,2,c
  2912  00180C  D009               	goto	l5515
  2913                           
  2914                           ; BSR set to: 0
  2915                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2916  00180E  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2917  001812  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2918  001816  0E2E               	movlw	46
  2919  001818  6EDF               	movwf	indf2,c
  2920                           
  2921                           ; BSR set to: 0
  2922  00181A  0100               	movlb	0	; () banked
  2923  00181C  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2924  00181E  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2925  001820                     l5515:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2929  001820  0100               	movlb	0	; () banked
  2930  001822  51DF               	movf	sprintf@c& (0+255),w,b
  2931  001824  ECB9  F012         	call	_scale
  2932  001828  C049  F0C5         	movff	?_scale,_sprintf$2154
  2933  00182C  C04A  F0C6         	movff	?_scale+1,_sprintf$2154+1
  2934  001830  C04B  F0C7         	movff	?_scale+2,_sprintf$2154+2
  2935  001834  C04C  F0C8         	movff	?_scale+3,_sprintf$2154+3
  2936                           
  2937                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2938  001838  C0D9  F024         	movff	sprintf@fval,___flmul@a
  2939  00183C  C0DA  F025         	movff	sprintf@fval+1,___flmul@a+1
  2940  001840  C0DB  F026         	movff	sprintf@fval+2,___flmul@a+2
  2941  001844  C0DC  F027         	movff	sprintf@fval+3,___flmul@a+3
  2942  001848  C0C5  F020         	movff	_sprintf$2154,___flmul@b
  2943  00184C  C0C6  F021         	movff	_sprintf$2154+1,___flmul@b+1
  2944  001850  C0C7  F022         	movff	_sprintf$2154+2,___flmul@b+2
  2945  001854  C0C8  F023         	movff	_sprintf$2154+3,___flmul@b+3
  2946  001858  ECA5  F016         	call	___flmul	;wreg free
  2947  00185C  C020  F039         	movff	?___flmul,___fltol@f1
  2948  001860  C021  F03A         	movff	?___flmul+1,___fltol@f1+1
  2949  001864  C022  F03B         	movff	?___flmul+2,___fltol@f1+2
  2950  001868  C023  F03C         	movff	?___flmul+3,___fltol@f1+3
  2951  00186C  EC82  F01C         	call	___fltol	;wreg free
  2952  001870  C039  F0D3         	movff	?___fltol,sprintf@val
  2953  001874  C03A  F0D4         	movff	?___fltol+1,sprintf@val+1
  2954  001878  C03B  F0D5         	movff	?___fltol+2,sprintf@val+2
  2955  00187C  C03C  F0D6         	movff	?___fltol+3,sprintf@val+3
  2956                           
  2957                           ;doprnt.c: 1228: while(c--) {
  2958  001880  D073               	goto	l5529
  2959  001882                     l5519:
  2960                           
  2961                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2962  001882  C0D3  F018         	movff	sprintf@val,___lldiv@dividend
  2963  001886  C0D4  F019         	movff	sprintf@val+1,___lldiv@dividend+1
  2964  00188A  C0D5  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
  2965  00188E  C0D6  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
  2966  001892  0100               	movlb	0	; () banked
  2967  001894  51DF               	movf	sprintf@c& (0+255),w,b
  2968  001896  0D04               	mullw	4
  2969  001898  0E69               	movlw	low _dpowers
  2970  00189A  24F3               	addwf	prodl,w,c
  2971  00189C  6EF6               	movwf	tblptrl,c
  2972  00189E  0E10               	movlw	high _dpowers
  2973  0018A0  20F4               	addwfc	prodh,w,c
  2974  0018A2  6EF7               	movwf	tblptrh,c
  2975  0018A4                     	if	0	;There are less than 3 active tblptr bytes
  2976  0018A4                     	endif
  2977  0018A4  0009               	tblrd		*+
  2978  0018A6  CFF5 F01C          	movff	tablat,___lldiv@divisor
  2979  0018AA  0009               	tblrd		*+
  2980  0018AC  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
  2981  0018B0  0009               	tblrd		*+
  2982  0018B2  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
  2983  0018B6  000A               	tblrd		*-
  2984  0018B8  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
  2985  0018BC  EC2F  F01E         	call	___lldiv	;wreg free
  2986  0018C0  C018  F0CF         	movff	?___lldiv,sprintf@tmpval
  2987  0018C4  C019  F0D0         	movff	?___lldiv+1,sprintf@tmpval+1
  2988  0018C8  C01A  F0D1         	movff	?___lldiv+2,sprintf@tmpval+2
  2989  0018CC  C01B  F0D2         	movff	?___lldiv+3,sprintf@tmpval+3
  2990                           
  2991                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2992  0018D0  C0CF  F025         	movff	sprintf@tmpval,___llmod@dividend
  2993  0018D4  C0D0  F026         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2994  0018D8  C0D1  F027         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2995  0018DC  C0D2  F028         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2996  0018E0  0E0A               	movlw	10
  2997  0018E2  6E29               	movwf	___llmod@divisor,c
  2998  0018E4  0E00               	movlw	0
  2999  0018E6  6E2A               	movwf	___llmod@divisor+1,c
  3000  0018E8  0E00               	movlw	0
  3001  0018EA  6E2B               	movwf	___llmod@divisor+2,c
  3002  0018EC  0E00               	movlw	0
  3003  0018EE  6E2C               	movwf	___llmod@divisor+3,c
  3004  0018F0  EC5C  F01F         	call	___llmod	;wreg free
  3005  0018F4  C025  F0CF         	movff	?___llmod,sprintf@tmpval
  3006  0018F8  C026  F0D0         	movff	?___llmod+1,sprintf@tmpval+1
  3007  0018FC  C027  F0D1         	movff	?___llmod+2,sprintf@tmpval+2
  3008  001900  C028  F0D2         	movff	?___llmod+3,sprintf@tmpval+3
  3009                           
  3010                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3011  001904  0100               	movlb	0	; () banked
  3012  001906  51CF               	movf	sprintf@tmpval& (0+255),w,b
  3013  001908  0F30               	addlw	48
  3014  00190A  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3015  00190E  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3016  001912  6EDF               	movwf	indf2,c
  3017                           
  3018                           ; BSR set to: 0
  3019  001914  0100               	movlb	0	; () banked
  3020  001916  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3021  001918  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3022                           
  3023                           ; BSR set to: 0
  3024                           ;doprnt.c: 1232: val %= dpowers[c];
  3025  00191A  C0D3  F025         	movff	sprintf@val,___llmod@dividend
  3026  00191E  C0D4  F026         	movff	sprintf@val+1,___llmod@dividend+1
  3027  001922  C0D5  F027         	movff	sprintf@val+2,___llmod@dividend+2
  3028  001926  C0D6  F028         	movff	sprintf@val+3,___llmod@dividend+3
  3029  00192A  0100               	movlb	0	; () banked
  3030  00192C  51DF               	movf	sprintf@c& (0+255),w,b
  3031  00192E  0D04               	mullw	4
  3032  001930  0E69               	movlw	low _dpowers
  3033  001932  24F3               	addwf	prodl,w,c
  3034  001934  6EF6               	movwf	tblptrl,c
  3035  001936  0E10               	movlw	high _dpowers
  3036  001938  20F4               	addwfc	prodh,w,c
  3037  00193A  6EF7               	movwf	tblptrh,c
  3038  00193C                     	if	0	;There are less than 3 active tblptr bytes
  3039  00193C                     	endif
  3040  00193C  0009               	tblrd		*+
  3041  00193E  CFF5 F029          	movff	tablat,___llmod@divisor
  3042  001942  0009               	tblrd		*+
  3043  001944  CFF5 F02A          	movff	tablat,___llmod@divisor+1
  3044  001948  0009               	tblrd		*+
  3045  00194A  CFF5 F02B          	movff	tablat,___llmod@divisor+2
  3046  00194E  000A               	tblrd		*-
  3047  001950  CFF5 F02C          	movff	tablat,___llmod@divisor+3
  3048  001954  EC5C  F01F         	call	___llmod	;wreg free
  3049  001958  C025  F0D3         	movff	?___llmod,sprintf@val
  3050  00195C  C026  F0D4         	movff	?___llmod+1,sprintf@val+1
  3051  001960  C027  F0D5         	movff	?___llmod+2,sprintf@val+2
  3052  001964  C028  F0D6         	movff	?___llmod+3,sprintf@val+3
  3053  001968                     l5529:
  3054  001968  0100               	movlb	0	; () banked
  3055  00196A  07DF               	decf	sprintf@c& (0+255),f,b
  3056  00196C  0100               	movlb	0	; () banked
  3057  00196E  29DF               	incf	sprintf@c& (0+255),w,b
  3058  001970  B4D8               	btfsc	status,2,c
  3059  001972  D00E               	goto	l5537
  3060  001974  D786               	goto	l5519
  3061  001976                     l5531:
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3065  001976  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3066  00197A  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3067  00197E  0E30               	movlw	48
  3068  001980  6EDF               	movwf	indf2,c
  3069                           
  3070                           ; BSR set to: 0
  3071  001982  0100               	movlb	0	; () banked
  3072  001984  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3073  001986  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;doprnt.c: 1237: prec--;
  3077  001988  0100               	movlb	0	; () banked
  3078  00198A  07DD               	decf	sprintf@prec& (0+255),f,b
  3079  00198C  A0D8               	btfss	status,0,c
  3080  00198E  07DE               	decf	(sprintf@prec+1)& (0+255),f,b
  3081  001990                     l5537:
  3082                           
  3083                           ; BSR set to: 0
  3084  001990  0100               	movlb	0	; () banked
  3085  001992  51DD               	movf	sprintf@prec& (0+255),w,b
  3086  001994  0100               	movlb	0	; () banked
  3087  001996  11DE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3088  001998  B4D8               	btfsc	status,2,c
  3089  00199A  D167               	goto	l5619
  3090  00199C  D7EC               	goto	l5531
  3091  00199E                     l5539:
  3092                           
  3093                           ; BSR set to: 0
  3094                           ;doprnt.c: 1246: }
  3095                           ;doprnt.c: 1253: {
  3096                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3097  00199E  C0C9  FFD9         	movff	sprintf@ap,fsr2l
  3098  0019A2  C0CA  FFDA         	movff	sprintf@ap+1,fsr2h
  3099  0019A6  CFDE F0D3          	movff	postinc2,sprintf@val
  3100  0019AA  CFDD F0D4          	movff	postdec2,sprintf@val+1
  3101  0019AE  0100               	movlb	0	; () banked
  3102  0019B0  0E00               	movlw	0
  3103  0019B2  BFD4               	btfsc	(sprintf@val+1)& (0+255),7,b
  3104  0019B4  0EFF               	movlw	-1
  3105  0019B6  6FD5               	movwf	(sprintf@val+2)& (0+255),b
  3106  0019B8  6FD6               	movwf	(sprintf@val+3)& (0+255),b
  3107                           
  3108                           ; BSR set to: 0
  3109  0019BA  0E02               	movlw	2
  3110  0019BC  0100               	movlb	0	; () banked
  3111  0019BE  27C9               	addwf	sprintf@ap& (0+255),f,b
  3112  0019C0  0E00               	movlw	0
  3113  0019C2  23CA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;doprnt.c: 1261: if((long)val < 0) {
  3117  0019C4  0100               	movlb	0	; () banked
  3118  0019C6  AFD6               	btfss	(sprintf@val+3)& (0+255),7,b
  3119  0019C8  D00C               	goto	l5549
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;doprnt.c: 1262: flag |= 0x03;
  3123  0019CA  0E03               	movlw	3
  3124  0019CC  0100               	movlb	0	; () banked
  3125  0019CE  13CB               	iorwf	sprintf@flag& (0+255),f,b
  3126                           
  3127                           ; BSR set to: 0
  3128                           ;doprnt.c: 1263: val = -val;
  3129  0019D0  0100               	movlb	0	; () banked
  3130  0019D2  1FD6               	comf	(sprintf@val+3)& (0+255),f,b
  3131  0019D4  1FD5               	comf	(sprintf@val+2)& (0+255),f,b
  3132  0019D6  1FD4               	comf	(sprintf@val+1)& (0+255),f,b
  3133  0019D8  6DD3               	negf	sprintf@val& (0+255),b
  3134  0019DA  0E00               	movlw	0
  3135  0019DC  23D4               	addwfc	(sprintf@val+1)& (0+255),f,b
  3136  0019DE  23D5               	addwfc	(sprintf@val+2)& (0+255),f,b
  3137  0019E0  23D6               	addwfc	(sprintf@val+3)& (0+255),f,b
  3138  0019E2                     l5549:
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;doprnt.c: 1264: }
  3142                           ;doprnt.c: 1266: }
  3143                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3144  0019E2  0100               	movlb	0	; () banked
  3145  0019E4  51DD               	movf	sprintf@prec& (0+255),w,b
  3146  0019E6  0100               	movlb	0	; () banked
  3147  0019E8  11DE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3148  0019EA  A4D8               	btfss	status,2,c
  3149  0019EC  D00D               	goto	l5555
  3150                           
  3151                           ; BSR set to: 0
  3152  0019EE  0100               	movlb	0	; () banked
  3153  0019F0  51D3               	movf	sprintf@val& (0+255),w,b
  3154  0019F2  0100               	movlb	0	; () banked
  3155  0019F4  11D4               	iorwf	(sprintf@val+1)& (0+255),w,b
  3156  0019F6  0100               	movlb	0	; () banked
  3157  0019F8  11D5               	iorwf	(sprintf@val+2)& (0+255),w,b
  3158  0019FA  0100               	movlb	0	; () banked
  3159  0019FC  11D6               	iorwf	(sprintf@val+3)& (0+255),w,b
  3160  0019FE  A4D8               	btfss	status,2,c
  3161  001A00  D003               	goto	l5555
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 1291: prec++;
  3165  001A02  0100               	movlb	0	; () banked
  3166  001A04  4BDD               	infsnz	sprintf@prec& (0+255),f,b
  3167  001A06  2BDE               	incf	(sprintf@prec+1)& (0+255),f,b
  3168  001A08                     l5555:
  3169                           
  3170                           ; BSR set to: 0
  3171                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3172  001A08  0E01               	movlw	1
  3173  001A0A  0100               	movlb	0	; () banked
  3174  001A0C  6FDF               	movwf	sprintf@c& (0+255),b
  3175  001A0E                     l5557:
  3176                           
  3177                           ; BSR set to: 0
  3178  001A0E  0E0A               	movlw	10
  3179  001A10  0100               	movlb	0	; () banked
  3180  001A12  19DF               	xorwf	sprintf@c& (0+255),w,b
  3181  001A14  B4D8               	btfsc	status,2,c
  3182  001A16  D01E               	goto	l5569
  3183                           
  3184                           ; BSR set to: 0
  3185                           ;doprnt.c: 1306: if(val < dpowers[c])
  3186                           
  3187                           ; BSR set to: 0
  3188                           
  3189                           ; BSR set to: 0
  3190  001A18  0100               	movlb	0	; () banked
  3191  001A1A  51DF               	movf	sprintf@c& (0+255),w,b
  3192  001A1C  0D04               	mullw	4
  3193  001A1E  0E69               	movlw	low _dpowers
  3194  001A20  24F3               	addwf	prodl,w,c
  3195  001A22  6EF6               	movwf	tblptrl,c
  3196  001A24  0E10               	movlw	high _dpowers
  3197  001A26  20F4               	addwfc	prodh,w,c
  3198  001A28  6EF7               	movwf	tblptrh,c
  3199  001A2A                     	if	0	;There are less than 3 active tblptr bytes
  3200  001A2A                     	endif
  3201  001A2A  0009               	tblrd		*+
  3202  001A2C  50F5               	movf	tablat,w,c
  3203  001A2E  0100               	movlb	0	; () banked
  3204  001A30  5DD3               	subwf	sprintf@val& (0+255),w,b
  3205  001A32  0009               	tblrd		*+
  3206  001A34  50F5               	movf	tablat,w,c
  3207  001A36  0100               	movlb	0	; () banked
  3208  001A38  59D4               	subwfb	(sprintf@val+1)& (0+255),w,b
  3209  001A3A  0009               	tblrd		*+
  3210  001A3C  50F5               	movf	tablat,w,c
  3211  001A3E  0100               	movlb	0	; () banked
  3212  001A40  59D5               	subwfb	(sprintf@val+2)& (0+255),w,b
  3213  001A42  0009               	tblrd		*+
  3214  001A44  50F5               	movf	tablat,w,c
  3215  001A46  0100               	movlb	0	; () banked
  3216  001A48  59D6               	subwfb	(sprintf@val+3)& (0+255),w,b
  3217  001A4A  A0D8               	btfss	status,0,c
  3218  001A4C  D003               	goto	l5569
  3219                           
  3220                           ; BSR set to: 0
  3221                           
  3222                           ; BSR set to: 0
  3223                           
  3224                           ; BSR set to: 0
  3225                           ;doprnt.c: 1307: break;
  3226  001A4E  0100               	movlb	0	; () banked
  3227  001A50  2BDF               	incf	sprintf@c& (0+255),f,b
  3228  001A52  D7DD               	goto	l5557
  3229  001A54                     l5569:
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;doprnt.c: 1339: if(c < prec)
  3233  001A54  0E80               	movlw	128
  3234  001A56  0100               	movlb	0	; () banked
  3235  001A58  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3236  001A5A  0E7F               	movlw	127
  3237  001A5C  0100               	movlb	0	; () banked
  3238  001A5E  6FC1               	movwf	??_sprintf& (0+255),b
  3239  001A60  0100               	movlb	0	; () banked
  3240  001A62  51DD               	movf	sprintf@prec& (0+255),w,b
  3241  001A64  0100               	movlb	0	; () banked
  3242  001A66  5DDF               	subwf	sprintf@c& (0+255),w,b
  3243  001A68  0100               	movlb	0	; () banked
  3244  001A6A  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3245  001A6C  0A80               	xorlw	128
  3246  001A6E  0100               	movlb	0	; () banked
  3247  001A70  59C1               	subwfb	??_sprintf& (0+255),w,b
  3248  001A72  B0D8               	btfsc	status,0,c
  3249  001A74  D003               	goto	l5573
  3250                           
  3251                           ; BSR set to: 0
  3252                           ;doprnt.c: 1340: c = prec;
  3253  001A76  C0DD  F0DF         	movff	sprintf@prec,sprintf@c
  3254  001A7A  D018               	goto	l5577
  3255  001A7C                     l5573:
  3256                           
  3257                           ; BSR set to: 0
  3258                           ;doprnt.c: 1341: else if(prec < c)
  3259  001A7C  0100               	movlb	0	; () banked
  3260  001A7E  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3261  001A80  0A80               	xorlw	128
  3262  001A82  0100               	movlb	0	; () banked
  3263  001A84  6FC1               	movwf	??_sprintf& (0+255),b
  3264  001A86  0100               	movlb	0	; () banked
  3265  001A88  51DF               	movf	sprintf@c& (0+255),w,b
  3266  001A8A  0100               	movlb	0	; () banked
  3267  001A8C  5DDD               	subwf	sprintf@prec& (0+255),w,b
  3268  001A8E  0E80               	movlw	128
  3269  001A90  0100               	movlb	0	; () banked
  3270  001A92  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3271  001A94  0E7F               	movlw	127
  3272  001A96  0100               	movlb	0	; () banked
  3273  001A98  59C1               	subwfb	??_sprintf& (0+255),w,b
  3274  001A9A  B0D8               	btfsc	status,0,c
  3275  001A9C  D007               	goto	l5577
  3276                           
  3277                           ; BSR set to: 0
  3278                           ;doprnt.c: 1342: prec = c;
  3279  001A9E  0100               	movlb	0	; () banked
  3280  001AA0  51DF               	movf	sprintf@c& (0+255),w,b
  3281  001AA2  0100               	movlb	0	; () banked
  3282  001AA4  6FDD               	movwf	sprintf@prec& (0+255),b
  3283  001AA6  6BDE               	clrf	(sprintf@prec+1)& (0+255),b
  3284  001AA8  BFDD               	btfsc	sprintf@prec& (0+255),7,b
  3285  001AAA  07DE               	decf	(sprintf@prec+1)& (0+255),f,b
  3286  001AAC                     l5577:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3290  001AAC  0100               	movlb	0	; () banked
  3291  001AAE  51CD               	movf	sprintf@width& (0+255),w,b
  3292  001AB0  0100               	movlb	0	; () banked
  3293  001AB2  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3294  001AB4  B4D8               	btfsc	status,2,c
  3295  001AB6  D014               	goto	l5583
  3296                           
  3297                           ; BSR set to: 0
  3298  001AB8  0E03               	movlw	3
  3299  001ABA  0100               	movlb	0	; () banked
  3300  001ABC  15CB               	andwf	sprintf@flag& (0+255),w,b
  3301  001ABE  0100               	movlb	0	; () banked
  3302  001AC0  6FC1               	movwf	??_sprintf& (0+255),b
  3303  001AC2  0E00               	movlw	0
  3304  001AC4  0100               	movlb	0	; () banked
  3305  001AC6  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3306  001AC8  0100               	movlb	0	; () banked
  3307  001ACA  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  3308  001ACC  0100               	movlb	0	; () banked
  3309  001ACE  51C1               	movf	??_sprintf& (0+255),w,b
  3310  001AD0  0100               	movlb	0	; () banked
  3311  001AD2  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3312  001AD4  B4D8               	btfsc	status,2,c
  3313  001AD6  D004               	goto	l5583
  3314                           
  3315                           ; BSR set to: 0
  3316                           ;doprnt.c: 1346: width--;
  3317  001AD8  0100               	movlb	0	; () banked
  3318  001ADA  07CD               	decf	sprintf@width& (0+255),f,b
  3319  001ADC  A0D8               	btfss	status,0,c
  3320  001ADE  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  3321  001AE0                     l5583:
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3325  001AE0  0100               	movlb	0	; () banked
  3326  001AE2  ADCC               	btfss	(sprintf@flag+1)& (0+255),6,b
  3327  001AE4  D01E               	goto	l5591
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;doprnt.c: 1349: if(width > prec)
  3331  001AE6  0100               	movlb	0	; () banked
  3332  001AE8  51CD               	movf	sprintf@width& (0+255),w,b
  3333  001AEA  0100               	movlb	0	; () banked
  3334  001AEC  5DDD               	subwf	sprintf@prec& (0+255),w,b
  3335  001AEE  0100               	movlb	0	; () banked
  3336  001AF0  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3337  001AF2  0A80               	xorlw	128
  3338  001AF4  0100               	movlb	0	; () banked
  3339  001AF6  6FC1               	movwf	??_sprintf& (0+255),b
  3340  001AF8  0100               	movlb	0	; () banked
  3341  001AFA  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  3342  001AFC  0A80               	xorlw	128
  3343  001AFE  0100               	movlb	0	; () banked
  3344  001B00  59C1               	subwfb	??_sprintf& (0+255),w,b
  3345  001B02  B0D8               	btfsc	status,0,c
  3346  001B04  D009               	goto	l5589
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;doprnt.c: 1350: width -= prec;
  3350  001B06  0100               	movlb	0	; () banked
  3351  001B08  51DD               	movf	sprintf@prec& (0+255),w,b
  3352  001B0A  0100               	movlb	0	; () banked
  3353  001B0C  5FCD               	subwf	sprintf@width& (0+255),f,b
  3354  001B0E  0100               	movlb	0	; () banked
  3355  001B10  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3356  001B12  0100               	movlb	0	; () banked
  3357  001B14  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3358  001B16  D005               	goto	l5591
  3359  001B18                     l5589:
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;doprnt.c: 1351: else
  3363                           ;doprnt.c: 1352: width = 0;
  3364  001B18  0E00               	movlw	0
  3365  001B1A  0100               	movlb	0	; () banked
  3366  001B1C  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3367  001B1E  0E00               	movlw	0
  3368  001B20  6FCD               	movwf	sprintf@width& (0+255),b
  3369  001B22                     l5591:
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;doprnt.c: 1353: }
  3373                           ;doprnt.c: 1381: if(width > c)
  3374  001B22  0E80               	movlw	128
  3375  001B24  0100               	movlb	0	; () banked
  3376  001B26  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3377  001B28  0E7F               	movlw	127
  3378  001B2A  0100               	movlb	0	; () banked
  3379  001B2C  6FC1               	movwf	??_sprintf& (0+255),b
  3380  001B2E  0100               	movlb	0	; () banked
  3381  001B30  51CD               	movf	sprintf@width& (0+255),w,b
  3382  001B32  0100               	movlb	0	; () banked
  3383  001B34  5DDF               	subwf	sprintf@c& (0+255),w,b
  3384  001B36  0100               	movlb	0	; () banked
  3385  001B38  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  3386  001B3A  0A80               	xorlw	128
  3387  001B3C  0100               	movlb	0	; () banked
  3388  001B3E  59C1               	subwfb	??_sprintf& (0+255),w,b
  3389  001B40  B0D8               	btfsc	status,0,c
  3390  001B42  D00B               	goto	l5595
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;doprnt.c: 1382: width -= c;
  3394  001B44  0100               	movlb	0	; () banked
  3395  001B46  51DF               	movf	sprintf@c& (0+255),w,b
  3396  001B48  0100               	movlb	0	; () banked
  3397  001B4A  5FCD               	subwf	sprintf@width& (0+255),f,b
  3398  001B4C  0E00               	movlw	0
  3399  001B4E  0100               	movlb	0	; () banked
  3400  001B50  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3401  001B52  0EFF               	movlw	255
  3402  001B54  0100               	movlb	0	; () banked
  3403  001B56  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3404  001B58  D005               	goto	l5597
  3405  001B5A                     l5595:
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;doprnt.c: 1383: else
  3409                           ;doprnt.c: 1384: width = 0;
  3410  001B5A  0E00               	movlw	0
  3411  001B5C  0100               	movlb	0	; () banked
  3412  001B5E  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3413  001B60  0E00               	movlw	0
  3414  001B62  6FCD               	movwf	sprintf@width& (0+255),b
  3415  001B64                     l5597:
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;doprnt.c: 1422: {
  3419                           ;doprnt.c: 1424: if(width
  3420                           ;doprnt.c: 1428: )
  3421  001B64  0100               	movlb	0	; () banked
  3422  001B66  51CD               	movf	sprintf@width& (0+255),w,b
  3423  001B68  0100               	movlb	0	; () banked
  3424  001B6A  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3425  001B6C  B4D8               	btfsc	status,2,c
  3426  001B6E  D013               	goto	l5605
  3427  001B70                     l5599:
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3431  001B70  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3432  001B74  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3433  001B78  0E20               	movlw	32
  3434  001B7A  6EDF               	movwf	indf2,c
  3435                           
  3436                           ; BSR set to: 0
  3437  001B7C  0100               	movlb	0	; () banked
  3438  001B7E  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3439  001B80  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;doprnt.c: 1431: while(--width);
  3443  001B82  0100               	movlb	0	; () banked
  3444  001B84  07CD               	decf	sprintf@width& (0+255),f,b
  3445  001B86  A0D8               	btfss	status,0,c
  3446  001B88  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  3447  001B8A  0100               	movlb	0	; () banked
  3448  001B8C  51CD               	movf	sprintf@width& (0+255),w,b
  3449  001B8E  0100               	movlb	0	; () banked
  3450  001B90  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3451  001B92  A4D8               	btfss	status,2,c
  3452  001B94  D7ED               	goto	l5599
  3453  001B96                     l5605:
  3454                           
  3455                           ; BSR set to: 0
  3456                           ;doprnt.c: 1438: if(flag & 0x03)
  3457  001B96  0E03               	movlw	3
  3458  001B98  0100               	movlb	0	; () banked
  3459  001B9A  15CB               	andwf	sprintf@flag& (0+255),w,b
  3460  001B9C  0100               	movlb	0	; () banked
  3461  001B9E  6FC1               	movwf	??_sprintf& (0+255),b
  3462  001BA0  0E00               	movlw	0
  3463  001BA2  0100               	movlb	0	; () banked
  3464  001BA4  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3465  001BA6  0100               	movlb	0	; () banked
  3466  001BA8  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  3467  001BAA  0100               	movlb	0	; () banked
  3468  001BAC  51C1               	movf	??_sprintf& (0+255),w,b
  3469  001BAE  0100               	movlb	0	; () banked
  3470  001BB0  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3471  001BB2  B4D8               	btfsc	status,2,c
  3472  001BB4  D04F               	goto	l5617
  3473                           
  3474                           ; BSR set to: 0
  3475                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3476  001BB6  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3477  001BBA  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3478  001BBE  0E2D               	movlw	45
  3479  001BC0  6EDF               	movwf	indf2,c
  3480  001BC2  D045               	goto	l5615
  3481  001BC4                     l5611:
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;doprnt.c: 1478: {
  3485                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3486  001BC4  C0DD  F0C1         	movff	sprintf@prec,??_sprintf
  3487  001BC8  C0DE  F0C2         	movff	sprintf@prec+1,??_sprintf+1
  3488  001BCC  0100               	movlb	0	; () banked
  3489  001BCE  90D8               	bcf	status,0,c
  3490  001BD0  37C1               	rlcf	??_sprintf& (0+255),f,b
  3491  001BD2  37C2               	rlcf	(??_sprintf+1)& (0+255),f,b
  3492  001BD4  0100               	movlb	0	; () banked
  3493  001BD6  90D8               	bcf	status,0,c
  3494  001BD8  37C1               	rlcf	??_sprintf& (0+255),f,b
  3495  001BDA  37C2               	rlcf	(??_sprintf+1)& (0+255),f,b
  3496  001BDC  0E69               	movlw	low _dpowers
  3497  001BDE  0100               	movlb	0	; () banked
  3498  001BE0  25C1               	addwf	??_sprintf& (0+255),w,b
  3499  001BE2  6EF6               	movwf	tblptrl,c
  3500  001BE4  0E10               	movlw	high _dpowers
  3501  001BE6  21C2               	addwfc	(??_sprintf+1)& (0+255),w,b
  3502  001BE8  6EF7               	movwf	tblptrh,c
  3503  001BEA                     	if	0	;There are less than 3 active tblptr bytes
  3504  001BEA                     	endif
  3505  001BEA  0009               	tblrd		*+
  3506  001BEC  CFF5 F01C          	movff	tablat,___lldiv@divisor
  3507  001BF0  0009               	tblrd		*+
  3508  001BF2  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
  3509  001BF6  0009               	tblrd		*+
  3510  001BF8  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
  3511  001BFC  000A               	tblrd		*-
  3512  001BFE  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
  3513  001C02  C0D3  F018         	movff	sprintf@val,___lldiv@dividend
  3514  001C06  C0D4  F019         	movff	sprintf@val+1,___lldiv@dividend+1
  3515  001C0A  C0D5  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
  3516  001C0E  C0D6  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
  3517  001C12  EC2F  F01E         	call	___lldiv	;wreg free
  3518  001C16  C018  F025         	movff	?___lldiv,___llmod@dividend
  3519  001C1A  C019  F026         	movff	?___lldiv+1,___llmod@dividend+1
  3520  001C1E  C01A  F027         	movff	?___lldiv+2,___llmod@dividend+2
  3521  001C22  C01B  F028         	movff	?___lldiv+3,___llmod@dividend+3
  3522  001C26  0E0A               	movlw	10
  3523  001C28  6E29               	movwf	___llmod@divisor,c
  3524  001C2A  0E00               	movlw	0
  3525  001C2C  6E2A               	movwf	___llmod@divisor+1,c
  3526  001C2E  0E00               	movlw	0
  3527  001C30  6E2B               	movwf	___llmod@divisor+2,c
  3528  001C32  0E00               	movlw	0
  3529  001C34  6E2C               	movwf	___llmod@divisor+3,c
  3530  001C36  EC5C  F01F         	call	___llmod	;wreg free
  3531  001C3A  5025               	movf	?___llmod,w,c
  3532  001C3C  0F30               	addlw	48
  3533  001C3E  0100               	movlb	0	; () banked
  3534  001C40  6FDF               	movwf	sprintf@c& (0+255),b
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;doprnt.c: 1523: }
  3538                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3539  001C42  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3540  001C46  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3541  001C4A  C0DF  FFDF         	movff	sprintf@c,indf2
  3542  001C4E                     l5615:
  3543                           
  3544                           ; BSR set to: 0
  3545  001C4E  0100               	movlb	0	; () banked
  3546  001C50  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3547  001C52  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3548  001C54                     l5617:
  3549                           
  3550                           ; BSR set to: 0
  3551  001C54  0100               	movlb	0	; () banked
  3552  001C56  07DD               	decf	sprintf@prec& (0+255),f,b
  3553  001C58  A0D8               	btfss	status,0,c
  3554  001C5A  07DE               	decf	(sprintf@prec+1)& (0+255),f,b
  3555  001C5C  0100               	movlb	0	; () banked
  3556  001C5E  29DD               	incf	sprintf@prec& (0+255),w,b
  3557  001C60  E1B1               	bnz	l5611
  3558  001C62  0100               	movlb	0	; () banked
  3559  001C64  29DE               	incf	(sprintf@prec+1)& (0+255),w,b
  3560  001C66  A4D8               	btfss	status,2,c
  3561  001C68  D7AD               	goto	l5611
  3562  001C6A                     l5619:
  3563                           
  3564                           ; BSR set to: 0
  3565  001C6A  C0B9  FFF6         	movff	sprintf@f,tblptrl
  3566  001C6E  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  3567  001C72  0100               	movlb	0	; () banked
  3568  001C74  4BB9               	infsnz	sprintf@f& (0+255),f,b
  3569  001C76  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  3570  001C78                     	if	0	;tblptru may be non-zero
  3571  001C78                     	endif
  3572  001C78                     	if	0	;tblptru may be non-zero
  3573  001C78                     	endif
  3574  001C78  0008               	tblrd		*
  3575  001C7A  CFF5 F0DF          	movff	tablat,sprintf@c
  3576  001C7E  0100               	movlb	0	; () banked
  3577  001C80  51DF               	movf	sprintf@c& (0+255),w,b
  3578  001C82  A4D8               	btfss	status,2,c
  3579  001C84  EF7C  F008         	goto	l5333
  3580  001C88                     l5621:
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;doprnt.c: 1538: *sp = 0;
  3584  001C88  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3585  001C8C  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3586  001C90  0E00               	movlw	0
  3587  001C92  6EDF               	movwf	indf2,c
  3588  001C94  0012               	return	
  3589  001C96                     __end_of_sprintf:
  3590                           	opt stack 0
  3591                           tblptru	equ	0xFF8
  3592                           tblptrh	equ	0xFF7
  3593                           tblptrl	equ	0xFF6
  3594                           tablat	equ	0xFF5
  3595                           prodh	equ	0xFF4
  3596                           prodl	equ	0xFF3
  3597                           postinc0	equ	0xFEE
  3598                           wreg	equ	0xFE8
  3599                           postdec1	equ	0xFE5
  3600                           fsr1l	equ	0xFE1
  3601                           indf2	equ	0xFDF
  3602                           postinc2	equ	0xFDE
  3603                           postdec2	equ	0xFDD
  3604                           fsr2h	equ	0xFDA
  3605                           fsr2l	equ	0xFD9
  3606                           status	equ	0xFD8
  3607                           
  3608 ;; *************** function _scale *****************
  3609 ;; Defined at:
  3610 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3611 ;; Parameters:    Size  Location     Type
  3612 ;;  scl             1    wreg     char 
  3613 ;; Auto vars:     Size  Location     Type
  3614 ;;  scl             1   80[COMRAM] char 
  3615 ;; Return value:  Size  Location     Type
  3616 ;;                  4   72[COMRAM] char 
  3617 ;; Registers used:
  3618 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3619 ;; Tracked objects:
  3620 ;;		On entry : 0/0
  3621 ;;		On exit  : 0/0
  3622 ;;		Unchanged: 0/0
  3623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3624 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3625 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3627 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;Total ram usage:        9 bytes
  3629 ;; Hardware stack levels used:    1
  3630 ;; Hardware stack levels required when called:    4
  3631 ;; This function calls:
  3632 ;;		___awdiv
  3633 ;;		___awmod
  3634 ;;		___flmul
  3635 ;; This function is called by:
  3636 ;;		_sprintf
  3637 ;; This function uses a non-reentrant model
  3638 ;;
  3639                           
  3640                           	psect	text2
  3641  002572                     __ptext2:
  3642                           	opt stack 0
  3643  002572                     _scale:
  3644                           	opt stack 25
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;incstack = 0
  3648                           ;scale@scl stored from wreg
  3649  002572  6E51               	movwf	scale@scl,c
  3650                           
  3651                           ;doprnt.c: 428: if(scl < 0) {
  3652  002574  AE51               	btfss	scale@scl,7,c
  3653  002576  D105               	goto	l5115
  3654                           
  3655                           ;doprnt.c: 429: scl = -scl;
  3656  002578  6C51               	negf	scale@scl,c
  3657                           
  3658                           ;doprnt.c: 430: if(scl>=110)
  3659  00257A  5051               	movf	scale@scl,w,c
  3660  00257C  0A80               	xorlw	128
  3661  00257E  0F12               	addlw	-238
  3662  002580  A0D8               	btfss	status,0,c
  3663  002582  D098               	goto	l5105
  3664                           
  3665                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3666  002584  0E00               	movlw	0
  3667  002586  6E1B               	movwf	___awdiv@divisor+1,c
  3668  002588  0E0A               	movlw	10
  3669  00258A  6E1A               	movwf	___awdiv@divisor,c
  3670  00258C  0E00               	movlw	0
  3671  00258E  6E46               	movwf	___awmod@divisor+1,c
  3672  002590  0E64               	movlw	100
  3673  002592  6E45               	movwf	___awmod@divisor,c
  3674  002594  5051               	movf	scale@scl,w,c
  3675  002596  6E43               	movwf	___awmod@dividend,c
  3676  002598  6A44               	clrf	___awmod@dividend+1,c
  3677  00259A  BE43               	btfsc	___awmod@dividend,7,c
  3678  00259C  0644               	decf	___awmod@dividend+1,f,c
  3679  00259E  ECEC  F01E         	call	___awmod	;wreg free
  3680  0025A2  C043  F018         	movff	?___awmod,___awdiv@dividend
  3681  0025A6  C044  F019         	movff	?___awmod+1,___awdiv@dividend+1
  3682  0025AA  ECED  F01D         	call	___awdiv	;wreg free
  3683  0025AE  90D8               	bcf	status,0,c
  3684  0025B0  3618               	rlcf	?___awdiv,f,c
  3685  0025B2  3619               	rlcf	?___awdiv+1,f,c
  3686  0025B4  90D8               	bcf	status,0,c
  3687  0025B6  3618               	rlcf	?___awdiv,f,c
  3688  0025B8  3619               	rlcf	?___awdiv+1,f,c
  3689  0025BA  0E24               	movlw	36
  3690  0025BC  2618               	addwf	?___awdiv,f,c
  3691  0025BE  0E00               	movlw	0
  3692  0025C0  2219               	addwfc	?___awdiv+1,f,c
  3693  0025C2  0E01               	movlw	low __npowers_
  3694  0025C4  2418               	addwf	?___awdiv,w,c
  3695  0025C6  6EF6               	movwf	tblptrl,c
  3696  0025C8  0E10               	movlw	high __npowers_
  3697  0025CA  2019               	addwfc	?___awdiv+1,w,c
  3698  0025CC  6EF7               	movwf	tblptrh,c
  3699  0025CE                     	if	0	;There are less than 3 active tblptr bytes
  3700  0025CE                     	endif
  3701  0025CE  0009               	tblrd		*+
  3702  0025D0  CFF5 F024          	movff	tablat,___flmul@a
  3703  0025D4  0009               	tblrd		*+
  3704  0025D6  CFF5 F025          	movff	tablat,___flmul@a+1
  3705  0025DA  0009               	tblrd		*+
  3706  0025DC  CFF5 F026          	movff	tablat,___flmul@a+2
  3707  0025E0  000A               	tblrd		*-
  3708  0025E2  CFF5 F027          	movff	tablat,___flmul@a+3
  3709  0025E6  0E00               	movlw	0
  3710  0025E8  6E1B               	movwf	___awdiv@divisor+1,c
  3711  0025EA  0E64               	movlw	100
  3712  0025EC  6E1A               	movwf	___awdiv@divisor,c
  3713  0025EE  5051               	movf	scale@scl,w,c
  3714  0025F0  6E18               	movwf	___awdiv@dividend,c
  3715  0025F2  6A19               	clrf	___awdiv@dividend+1,c
  3716  0025F4  BE18               	btfsc	___awdiv@dividend,7,c
  3717  0025F6  0619               	decf	___awdiv@dividend+1,f,c
  3718  0025F8  ECED  F01D         	call	___awdiv	;wreg free
  3719  0025FC  90D8               	bcf	status,0,c
  3720  0025FE  3618               	rlcf	?___awdiv,f,c
  3721  002600  3619               	rlcf	?___awdiv+1,f,c
  3722  002602  90D8               	bcf	status,0,c
  3723  002604  3618               	rlcf	?___awdiv,f,c
  3724  002606  3619               	rlcf	?___awdiv+1,f,c
  3725  002608  0E48               	movlw	72
  3726  00260A  2618               	addwf	?___awdiv,f,c
  3727  00260C  0E00               	movlw	0
  3728  00260E  2219               	addwfc	?___awdiv+1,f,c
  3729  002610  0E01               	movlw	low __npowers_
  3730  002612  2418               	addwf	?___awdiv,w,c
  3731  002614  6EF6               	movwf	tblptrl,c
  3732  002616  0E10               	movlw	high __npowers_
  3733  002618  2019               	addwfc	?___awdiv+1,w,c
  3734  00261A  6EF7               	movwf	tblptrh,c
  3735  00261C                     	if	0	;There are less than 3 active tblptr bytes
  3736  00261C                     	endif
  3737  00261C  0009               	tblrd		*+
  3738  00261E  CFF5 F020          	movff	tablat,___flmul@b
  3739  002622  0009               	tblrd		*+
  3740  002624  CFF5 F021          	movff	tablat,___flmul@b+1
  3741  002628  0009               	tblrd		*+
  3742  00262A  CFF5 F022          	movff	tablat,___flmul@b+2
  3743  00262E  000A               	tblrd		*-
  3744  002630  CFF5 F023          	movff	tablat,___flmul@b+3
  3745  002634  ECA5  F016         	call	___flmul	;wreg free
  3746  002638  C020  F04D         	movff	?___flmul,_scale$2153
  3747  00263C  C021  F04E         	movff	?___flmul+1,_scale$2153+1
  3748  002640  C022  F04F         	movff	?___flmul+2,_scale$2153+2
  3749  002644  C023  F050         	movff	?___flmul+3,_scale$2153+3
  3750                           
  3751                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3752  002648  C04D  F020         	movff	_scale$2153,___flmul@b
  3753  00264C  C04E  F021         	movff	_scale$2153+1,___flmul@b+1
  3754  002650  C04F  F022         	movff	_scale$2153+2,___flmul@b+2
  3755  002654  C050  F023         	movff	_scale$2153+3,___flmul@b+3
  3756  002658  0E00               	movlw	0
  3757  00265A  6E46               	movwf	___awmod@divisor+1,c
  3758  00265C  0E0A               	movlw	10
  3759  00265E  6E45               	movwf	___awmod@divisor,c
  3760  002660  5051               	movf	scale@scl,w,c
  3761  002662  6E43               	movwf	___awmod@dividend,c
  3762  002664  6A44               	clrf	___awmod@dividend+1,c
  3763  002666  BE43               	btfsc	___awmod@dividend,7,c
  3764  002668  0644               	decf	___awmod@dividend+1,f,c
  3765  00266A  ECEC  F01E         	call	___awmod	;wreg free
  3766  00266E  90D8               	bcf	status,0,c
  3767  002670  3643               	rlcf	?___awmod,f,c
  3768  002672  3644               	rlcf	?___awmod+1,f,c
  3769  002674  90D8               	bcf	status,0,c
  3770  002676  3643               	rlcf	?___awmod,f,c
  3771  002678  3644               	rlcf	?___awmod+1,f,c
  3772  00267A  0E01               	movlw	low __npowers_
  3773  00267C  2443               	addwf	?___awmod,w,c
  3774  00267E  6EF6               	movwf	tblptrl,c
  3775  002680  0E10               	movlw	high __npowers_
  3776  002682  2044               	addwfc	?___awmod+1,w,c
  3777  002684  6EF7               	movwf	tblptrh,c
  3778  002686                     	if	0	;There are less than 3 active tblptr bytes
  3779  002686                     	endif
  3780  002686  0009               	tblrd		*+
  3781  002688  CFF5 F024          	movff	tablat,___flmul@a
  3782  00268C  0009               	tblrd		*+
  3783  00268E  CFF5 F025          	movff	tablat,___flmul@a+1
  3784  002692  0009               	tblrd		*+
  3785  002694  CFF5 F026          	movff	tablat,___flmul@a+2
  3786  002698  000A               	tblrd		*-
  3787  00269A  CFF5 F027          	movff	tablat,___flmul@a+3
  3788  00269E  ECA5  F016         	call	___flmul	;wreg free
  3789  0026A2  C020  F049         	movff	?___flmul,?_scale
  3790  0026A6  C021  F04A         	movff	?___flmul+1,?_scale+1
  3791  0026AA  C022  F04B         	movff	?___flmul+2,?_scale+2
  3792  0026AE  C023  F04C         	movff	?___flmul+3,?_scale+3
  3793  0026B2  0012               	return	
  3794  0026B4                     l5105:
  3795                           
  3796                           ;doprnt.c: 432: else if(scl > 10)
  3797  0026B4  5051               	movf	scale@scl,w,c
  3798  0026B6  0A80               	xorlw	128
  3799  0026B8  0F75               	addlw	-139
  3800  0026BA  A0D8               	btfss	status,0,c
  3801  0026BC  D04D               	goto	l5111
  3802                           
  3803                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3804  0026BE  0E00               	movlw	0
  3805  0026C0  6E1B               	movwf	___awdiv@divisor+1,c
  3806  0026C2  0E0A               	movlw	10
  3807  0026C4  6E1A               	movwf	___awdiv@divisor,c
  3808  0026C6  5051               	movf	scale@scl,w,c
  3809  0026C8  6E18               	movwf	___awdiv@dividend,c
  3810  0026CA  6A19               	clrf	___awdiv@dividend+1,c
  3811  0026CC  BE18               	btfsc	___awdiv@dividend,7,c
  3812  0026CE  0619               	decf	___awdiv@dividend+1,f,c
  3813  0026D0  ECED  F01D         	call	___awdiv	;wreg free
  3814  0026D4  90D8               	bcf	status,0,c
  3815  0026D6  3618               	rlcf	?___awdiv,f,c
  3816  0026D8  3619               	rlcf	?___awdiv+1,f,c
  3817  0026DA  90D8               	bcf	status,0,c
  3818  0026DC  3618               	rlcf	?___awdiv,f,c
  3819  0026DE  3619               	rlcf	?___awdiv+1,f,c
  3820  0026E0  0E24               	movlw	36
  3821  0026E2  2618               	addwf	?___awdiv,f,c
  3822  0026E4  0E00               	movlw	0
  3823  0026E6  2219               	addwfc	?___awdiv+1,f,c
  3824  0026E8  0E01               	movlw	low __npowers_
  3825  0026EA  2418               	addwf	?___awdiv,w,c
  3826  0026EC  6EF6               	movwf	tblptrl,c
  3827  0026EE  0E10               	movlw	high __npowers_
  3828  0026F0  2019               	addwfc	?___awdiv+1,w,c
  3829  0026F2  6EF7               	movwf	tblptrh,c
  3830  0026F4                     	if	0	;There are less than 3 active tblptr bytes
  3831  0026F4                     	endif
  3832  0026F4  0009               	tblrd		*+
  3833  0026F6  CFF5 F020          	movff	tablat,___flmul@b
  3834  0026FA  0009               	tblrd		*+
  3835  0026FC  CFF5 F021          	movff	tablat,___flmul@b+1
  3836  002700  0009               	tblrd		*+
  3837  002702  CFF5 F022          	movff	tablat,___flmul@b+2
  3838  002706  000A               	tblrd		*-
  3839  002708  CFF5 F023          	movff	tablat,___flmul@b+3
  3840  00270C  0E00               	movlw	0
  3841  00270E  6E46               	movwf	___awmod@divisor+1,c
  3842  002710  0E0A               	movlw	10
  3843  002712  6E45               	movwf	___awmod@divisor,c
  3844  002714  5051               	movf	scale@scl,w,c
  3845  002716  6E43               	movwf	___awmod@dividend,c
  3846  002718  6A44               	clrf	___awmod@dividend+1,c
  3847  00271A  BE43               	btfsc	___awmod@dividend,7,c
  3848  00271C  0644               	decf	___awmod@dividend+1,f,c
  3849  00271E  ECEC  F01E         	call	___awmod	;wreg free
  3850  002722  90D8               	bcf	status,0,c
  3851  002724  3643               	rlcf	?___awmod,f,c
  3852  002726  3644               	rlcf	?___awmod+1,f,c
  3853  002728  90D8               	bcf	status,0,c
  3854  00272A  3643               	rlcf	?___awmod,f,c
  3855  00272C  3644               	rlcf	?___awmod+1,f,c
  3856  00272E  0E01               	movlw	low __npowers_
  3857  002730  2443               	addwf	?___awmod,w,c
  3858  002732  6EF6               	movwf	tblptrl,c
  3859  002734  0E10               	movlw	high __npowers_
  3860  002736  2044               	addwfc	?___awmod+1,w,c
  3861  002738  6EF7               	movwf	tblptrh,c
  3862  00273A                     	if	0	;There are less than 3 active tblptr bytes
  3863  00273A                     	endif
  3864  00273A  0009               	tblrd		*+
  3865  00273C  CFF5 F024          	movff	tablat,___flmul@a
  3866  002740  0009               	tblrd		*+
  3867  002742  CFF5 F025          	movff	tablat,___flmul@a+1
  3868  002746  0009               	tblrd		*+
  3869  002748  CFF5 F026          	movff	tablat,___flmul@a+2
  3870  00274C  000A               	tblrd		*-
  3871  00274E  CFF5 F027          	movff	tablat,___flmul@a+3
  3872  002752  ECA5  F016         	call	___flmul	;wreg free
  3873  002756  D7A5               	goto	L4
  3874  002758                     l5111:
  3875                           
  3876                           ;doprnt.c: 434: return _npowers_[scl];
  3877  002758  5051               	movf	scale@scl,w,c
  3878  00275A  0D04               	mullw	4
  3879  00275C  0E01               	movlw	low __npowers_
  3880  00275E  24F3               	addwf	prodl,w,c
  3881  002760  6EF6               	movwf	tblptrl,c
  3882  002762  0E10               	movlw	high __npowers_
  3883  002764  20F4               	addwfc	prodh,w,c
  3884  002766  6EF7               	movwf	tblptrh,c
  3885  002768                     	if	0	;There are less than 3 active tblptr bytes
  3886  002768                     	endif
  3887  002768  0009               	tblrd		*+
  3888  00276A  CFF5 F049          	movff	tablat,?_scale
  3889  00276E  0009               	tblrd		*+
  3890  002770  CFF5 F04A          	movff	tablat,?_scale+1
  3891  002774  0009               	tblrd		*+
  3892  002776  CFF5 F04B          	movff	tablat,?_scale+2
  3893  00277A  000A               	tblrd		*-
  3894  00277C  CFF5 F04C          	movff	tablat,?_scale+3
  3895  002780  0012               	return	
  3896  002782                     l5115:
  3897                           
  3898                           ;doprnt.c: 435: }
  3899                           ;doprnt.c: 436: if(scl>=110)
  3900  002782  5051               	movf	scale@scl,w,c
  3901  002784  0A80               	xorlw	128
  3902  002786  0F12               	addlw	-238
  3903  002788  A0D8               	btfss	status,0,c
  3904  00278A  D098               	goto	l5123
  3905                           
  3906                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3907  00278C  0E00               	movlw	0
  3908  00278E  6E1B               	movwf	___awdiv@divisor+1,c
  3909  002790  0E0A               	movlw	10
  3910  002792  6E1A               	movwf	___awdiv@divisor,c
  3911  002794  0E00               	movlw	0
  3912  002796  6E46               	movwf	___awmod@divisor+1,c
  3913  002798  0E64               	movlw	100
  3914  00279A  6E45               	movwf	___awmod@divisor,c
  3915  00279C  5051               	movf	scale@scl,w,c
  3916  00279E  6E43               	movwf	___awmod@dividend,c
  3917  0027A0  6A44               	clrf	___awmod@dividend+1,c
  3918  0027A2  BE43               	btfsc	___awmod@dividend,7,c
  3919  0027A4  0644               	decf	___awmod@dividend+1,f,c
  3920  0027A6  ECEC  F01E         	call	___awmod	;wreg free
  3921  0027AA  C043  F018         	movff	?___awmod,___awdiv@dividend
  3922  0027AE  C044  F019         	movff	?___awmod+1,___awdiv@dividend+1
  3923  0027B2  ECED  F01D         	call	___awdiv	;wreg free
  3924  0027B6  90D8               	bcf	status,0,c
  3925  0027B8  3618               	rlcf	?___awdiv,f,c
  3926  0027BA  3619               	rlcf	?___awdiv+1,f,c
  3927  0027BC  90D8               	bcf	status,0,c
  3928  0027BE  3618               	rlcf	?___awdiv,f,c
  3929  0027C0  3619               	rlcf	?___awdiv+1,f,c
  3930  0027C2  0E24               	movlw	36
  3931  0027C4  2618               	addwf	?___awdiv,f,c
  3932  0027C6  0E00               	movlw	0
  3933  0027C8  2219               	addwfc	?___awdiv+1,f,c
  3934  0027CA  0E35               	movlw	low __powers_
  3935  0027CC  2418               	addwf	?___awdiv,w,c
  3936  0027CE  6EF6               	movwf	tblptrl,c
  3937  0027D0  0E10               	movlw	high __powers_
  3938  0027D2  2019               	addwfc	?___awdiv+1,w,c
  3939  0027D4  6EF7               	movwf	tblptrh,c
  3940  0027D6                     	if	0	;There are less than 3 active tblptr bytes
  3941  0027D6                     	endif
  3942  0027D6  0009               	tblrd		*+
  3943  0027D8  CFF5 F024          	movff	tablat,___flmul@a
  3944  0027DC  0009               	tblrd		*+
  3945  0027DE  CFF5 F025          	movff	tablat,___flmul@a+1
  3946  0027E2  0009               	tblrd		*+
  3947  0027E4  CFF5 F026          	movff	tablat,___flmul@a+2
  3948  0027E8  000A               	tblrd		*-
  3949  0027EA  CFF5 F027          	movff	tablat,___flmul@a+3
  3950  0027EE  0E00               	movlw	0
  3951  0027F0  6E1B               	movwf	___awdiv@divisor+1,c
  3952  0027F2  0E64               	movlw	100
  3953  0027F4  6E1A               	movwf	___awdiv@divisor,c
  3954  0027F6  5051               	movf	scale@scl,w,c
  3955  0027F8  6E18               	movwf	___awdiv@dividend,c
  3956  0027FA  6A19               	clrf	___awdiv@dividend+1,c
  3957  0027FC  BE18               	btfsc	___awdiv@dividend,7,c
  3958  0027FE  0619               	decf	___awdiv@dividend+1,f,c
  3959  002800  ECED  F01D         	call	___awdiv	;wreg free
  3960  002804  90D8               	bcf	status,0,c
  3961  002806  3618               	rlcf	?___awdiv,f,c
  3962  002808  3619               	rlcf	?___awdiv+1,f,c
  3963  00280A  90D8               	bcf	status,0,c
  3964  00280C  3618               	rlcf	?___awdiv,f,c
  3965  00280E  3619               	rlcf	?___awdiv+1,f,c
  3966  002810  0E48               	movlw	72
  3967  002812  2618               	addwf	?___awdiv,f,c
  3968  002814  0E00               	movlw	0
  3969  002816  2219               	addwfc	?___awdiv+1,f,c
  3970  002818  0E35               	movlw	low __powers_
  3971  00281A  2418               	addwf	?___awdiv,w,c
  3972  00281C  6EF6               	movwf	tblptrl,c
  3973  00281E  0E10               	movlw	high __powers_
  3974  002820  2019               	addwfc	?___awdiv+1,w,c
  3975  002822  6EF7               	movwf	tblptrh,c
  3976  002824                     	if	0	;There are less than 3 active tblptr bytes
  3977  002824                     	endif
  3978  002824  0009               	tblrd		*+
  3979  002826  CFF5 F020          	movff	tablat,___flmul@b
  3980  00282A  0009               	tblrd		*+
  3981  00282C  CFF5 F021          	movff	tablat,___flmul@b+1
  3982  002830  0009               	tblrd		*+
  3983  002832  CFF5 F022          	movff	tablat,___flmul@b+2
  3984  002836  000A               	tblrd		*-
  3985  002838  CFF5 F023          	movff	tablat,___flmul@b+3
  3986  00283C  ECA5  F016         	call	___flmul	;wreg free
  3987  002840  C020  F04D         	movff	?___flmul,_scale$2153
  3988  002844  C021  F04E         	movff	?___flmul+1,_scale$2153+1
  3989  002848  C022  F04F         	movff	?___flmul+2,_scale$2153+2
  3990  00284C  C023  F050         	movff	?___flmul+3,_scale$2153+3
  3991                           
  3992                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3993  002850  C04D  F020         	movff	_scale$2153,___flmul@b
  3994  002854  C04E  F021         	movff	_scale$2153+1,___flmul@b+1
  3995  002858  C04F  F022         	movff	_scale$2153+2,___flmul@b+2
  3996  00285C  C050  F023         	movff	_scale$2153+3,___flmul@b+3
  3997  002860  0E00               	movlw	0
  3998  002862  6E46               	movwf	___awmod@divisor+1,c
  3999  002864  0E0A               	movlw	10
  4000  002866  6E45               	movwf	___awmod@divisor,c
  4001  002868  5051               	movf	scale@scl,w,c
  4002  00286A  6E43               	movwf	___awmod@dividend,c
  4003  00286C  6A44               	clrf	___awmod@dividend+1,c
  4004  00286E  BE43               	btfsc	___awmod@dividend,7,c
  4005  002870  0644               	decf	___awmod@dividend+1,f,c
  4006  002872  ECEC  F01E         	call	___awmod	;wreg free
  4007  002876  90D8               	bcf	status,0,c
  4008  002878  3643               	rlcf	?___awmod,f,c
  4009  00287A  3644               	rlcf	?___awmod+1,f,c
  4010  00287C  90D8               	bcf	status,0,c
  4011  00287E  3643               	rlcf	?___awmod,f,c
  4012  002880  3644               	rlcf	?___awmod+1,f,c
  4013  002882  0E35               	movlw	low __powers_
  4014  002884  2443               	addwf	?___awmod,w,c
  4015  002886  6EF6               	movwf	tblptrl,c
  4016  002888  0E10               	movlw	high __powers_
  4017  00288A  2044               	addwfc	?___awmod+1,w,c
  4018  00288C  6EF7               	movwf	tblptrh,c
  4019  00288E                     	if	0	;There are less than 3 active tblptr bytes
  4020  00288E                     	endif
  4021  00288E  0009               	tblrd		*+
  4022  002890  CFF5 F024          	movff	tablat,___flmul@a
  4023  002894  0009               	tblrd		*+
  4024  002896  CFF5 F025          	movff	tablat,___flmul@a+1
  4025  00289A  0009               	tblrd		*+
  4026  00289C  CFF5 F026          	movff	tablat,___flmul@a+2
  4027  0028A0  000A               	tblrd		*-
  4028  0028A2  CFF5 F027          	movff	tablat,___flmul@a+3
  4029  0028A6  ECA5  F016         	call	___flmul	;wreg free
  4030  0028AA  C020  F049         	movff	?___flmul,?_scale
  4031  0028AE  C021  F04A         	movff	?___flmul+1,?_scale+1
  4032  0028B2  C022  F04B         	movff	?___flmul+2,?_scale+2
  4033  0028B6  C023  F04C         	movff	?___flmul+3,?_scale+3
  4034  0028BA  0012               	return	
  4035  0028BC                     l5123:
  4036                           
  4037                           ;doprnt.c: 438: else if(scl > 10)
  4038  0028BC  5051               	movf	scale@scl,w,c
  4039  0028BE  0A80               	xorlw	128
  4040  0028C0  0F75               	addlw	-139
  4041  0028C2  A0D8               	btfss	status,0,c
  4042  0028C4  D04D               	goto	l5129
  4043                           
  4044                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4045  0028C6  0E00               	movlw	0
  4046  0028C8  6E1B               	movwf	___awdiv@divisor+1,c
  4047  0028CA  0E0A               	movlw	10
  4048  0028CC  6E1A               	movwf	___awdiv@divisor,c
  4049  0028CE  5051               	movf	scale@scl,w,c
  4050  0028D0  6E18               	movwf	___awdiv@dividend,c
  4051  0028D2  6A19               	clrf	___awdiv@dividend+1,c
  4052  0028D4  BE18               	btfsc	___awdiv@dividend,7,c
  4053  0028D6  0619               	decf	___awdiv@dividend+1,f,c
  4054  0028D8  ECED  F01D         	call	___awdiv	;wreg free
  4055  0028DC  90D8               	bcf	status,0,c
  4056  0028DE  3618               	rlcf	?___awdiv,f,c
  4057  0028E0  3619               	rlcf	?___awdiv+1,f,c
  4058  0028E2  90D8               	bcf	status,0,c
  4059  0028E4  3618               	rlcf	?___awdiv,f,c
  4060  0028E6  3619               	rlcf	?___awdiv+1,f,c
  4061  0028E8  0E24               	movlw	36
  4062  0028EA  2618               	addwf	?___awdiv,f,c
  4063  0028EC  0E00               	movlw	0
  4064  0028EE  2219               	addwfc	?___awdiv+1,f,c
  4065  0028F0  0E35               	movlw	low __powers_
  4066  0028F2  2418               	addwf	?___awdiv,w,c
  4067  0028F4  6EF6               	movwf	tblptrl,c
  4068  0028F6  0E10               	movlw	high __powers_
  4069  0028F8  2019               	addwfc	?___awdiv+1,w,c
  4070  0028FA  6EF7               	movwf	tblptrh,c
  4071  0028FC                     	if	0	;There are less than 3 active tblptr bytes
  4072  0028FC                     	endif
  4073  0028FC  0009               	tblrd		*+
  4074  0028FE  CFF5 F020          	movff	tablat,___flmul@b
  4075  002902  0009               	tblrd		*+
  4076  002904  CFF5 F021          	movff	tablat,___flmul@b+1
  4077  002908  0009               	tblrd		*+
  4078  00290A  CFF5 F022          	movff	tablat,___flmul@b+2
  4079  00290E  000A               	tblrd		*-
  4080  002910  CFF5 F023          	movff	tablat,___flmul@b+3
  4081  002914  0E00               	movlw	0
  4082  002916  6E46               	movwf	___awmod@divisor+1,c
  4083  002918  0E0A               	movlw	10
  4084  00291A  6E45               	movwf	___awmod@divisor,c
  4085  00291C  5051               	movf	scale@scl,w,c
  4086  00291E  6E43               	movwf	___awmod@dividend,c
  4087  002920  6A44               	clrf	___awmod@dividend+1,c
  4088  002922  BE43               	btfsc	___awmod@dividend,7,c
  4089  002924  0644               	decf	___awmod@dividend+1,f,c
  4090  002926  ECEC  F01E         	call	___awmod	;wreg free
  4091  00292A  90D8               	bcf	status,0,c
  4092  00292C  3643               	rlcf	?___awmod,f,c
  4093  00292E  3644               	rlcf	?___awmod+1,f,c
  4094  002930  90D8               	bcf	status,0,c
  4095  002932  3643               	rlcf	?___awmod,f,c
  4096  002934  3644               	rlcf	?___awmod+1,f,c
  4097  002936  0E35               	movlw	low __powers_
  4098  002938  2443               	addwf	?___awmod,w,c
  4099  00293A  6EF6               	movwf	tblptrl,c
  4100  00293C  0E10               	movlw	high __powers_
  4101  00293E  2044               	addwfc	?___awmod+1,w,c
  4102  002940  6EF7               	movwf	tblptrh,c
  4103  002942                     	if	0	;There are less than 3 active tblptr bytes
  4104  002942                     	endif
  4105  002942  0009               	tblrd		*+
  4106  002944  CFF5 F024          	movff	tablat,___flmul@a
  4107  002948  0009               	tblrd		*+
  4108  00294A  CFF5 F025          	movff	tablat,___flmul@a+1
  4109  00294E  0009               	tblrd		*+
  4110  002950  CFF5 F026          	movff	tablat,___flmul@a+2
  4111  002954  000A               	tblrd		*-
  4112  002956  CFF5 F027          	movff	tablat,___flmul@a+3
  4113  00295A  ECA5  F016         	call	___flmul	;wreg free
  4114  00295E  D7A5               	goto	L5
  4115  002960                     l5129:
  4116                           
  4117                           ;doprnt.c: 440: return _powers_[scl];
  4118  002960  5051               	movf	scale@scl,w,c
  4119  002962  0D04               	mullw	4
  4120  002964  0E35               	movlw	low __powers_
  4121  002966  24F3               	addwf	prodl,w,c
  4122  002968  6EF6               	movwf	tblptrl,c
  4123  00296A  0E10               	movlw	high __powers_
  4124  00296C  20F4               	addwfc	prodh,w,c
  4125  00296E  6EF7               	movwf	tblptrh,c
  4126  002970                     	if	0	;There are less than 3 active tblptr bytes
  4127  002970                     	endif
  4128  002970  0009               	tblrd		*+
  4129  002972  CFF5 F049          	movff	tablat,?_scale
  4130  002976  0009               	tblrd		*+
  4131  002978  CFF5 F04A          	movff	tablat,?_scale+1
  4132  00297C  0009               	tblrd		*+
  4133  00297E  CFF5 F04B          	movff	tablat,?_scale+2
  4134  002982  000A               	tblrd		*-
  4135  002984  CFF5 F04C          	movff	tablat,?_scale+3
  4136  002988  0012               	return	
  4137  00298A                     __end_of_scale:
  4138                           	opt stack 0
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           postinc0	equ	0xFEE
  4146                           wreg	equ	0xFE8
  4147                           postdec1	equ	0xFE5
  4148                           fsr1l	equ	0xFE1
  4149                           indf2	equ	0xFDF
  4150                           postinc2	equ	0xFDE
  4151                           postdec2	equ	0xFDD
  4152                           fsr2h	equ	0xFDA
  4153                           fsr2l	equ	0xFD9
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _isdigit *****************
  4157 ;; Defined at:
  4158 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  c               1    wreg     unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;  c               1   25[COMRAM] unsigned char 
  4163 ;; Return value:  Size  Location     Type
  4164 ;;		None               void
  4165 ;; Registers used:
  4166 ;;		wreg, status,2, status,0
  4167 ;; Tracked objects:
  4168 ;;		On entry : 0/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;Total ram usage:        3 bytes
  4177 ;; Hardware stack levels used:    1
  4178 ;; Hardware stack levels required when called:    3
  4179 ;; This function calls:
  4180 ;;		Nothing
  4181 ;; This function is called by:
  4182 ;;		_sprintf
  4183 ;; This function uses a non-reentrant model
  4184 ;;
  4185                           
  4186                           	psect	text3
  4187  0043D2                     __ptext3:
  4188                           	opt stack 0
  4189  0043D2                     _isdigit:
  4190                           	opt stack 26
  4191                           
  4192                           ;incstack = 0
  4193                           ;isdigit@c stored from wreg
  4194  0043D2  6E1A               	movwf	isdigit@c,c
  4195  0043D4  0E00               	movlw	0
  4196  0043D6  6E19               	movwf	_isdigit$1798,c
  4197  0043D8  0E3A               	movlw	58
  4198  0043DA  601A               	cpfslt	isdigit@c,c
  4199  0043DC  D005               	goto	l3493
  4200  0043DE  0E2F               	movlw	47
  4201  0043E0  641A               	cpfsgt	isdigit@c,c
  4202  0043E2  D002               	goto	l3493
  4203  0043E4  0E01               	movlw	1
  4204  0043E6  6E19               	movwf	_isdigit$1798,c
  4205  0043E8                     l3493:
  4206  0043E8  C019  F018         	movff	_isdigit$1798,??_isdigit
  4207  0043EC  3018               	rrcf	??_isdigit,w,c
  4208  0043EE  0012               	return	
  4209  0043F0                     __end_of_isdigit:
  4210                           	opt stack 0
  4211                           tblptru	equ	0xFF8
  4212                           tblptrh	equ	0xFF7
  4213                           tblptrl	equ	0xFF6
  4214                           tablat	equ	0xFF5
  4215                           prodh	equ	0xFF4
  4216                           prodl	equ	0xFF3
  4217                           postinc0	equ	0xFEE
  4218                           wreg	equ	0xFE8
  4219                           postdec1	equ	0xFE5
  4220                           fsr1l	equ	0xFE1
  4221                           indf2	equ	0xFDF
  4222                           postinc2	equ	0xFDE
  4223                           postdec2	equ	0xFDD
  4224                           fsr2h	equ	0xFDA
  4225                           fsr2l	equ	0xFD9
  4226                           status	equ	0xFD8
  4227                           
  4228 ;; *************** function _fround *****************
  4229 ;; Defined at:
  4230 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;  prec            1    wreg     unsigned char 
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;  prec            1    8[BANK0 ] unsigned char 
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  4   72[COMRAM] unsigned char 
  4237 ;; Registers used:
  4238 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4244 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4245 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;Total ram usage:       13 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; Hardware stack levels required when called:    4
  4251 ;; This function calls:
  4252 ;;		___awdiv
  4253 ;;		___awmod
  4254 ;;		___flmul
  4255 ;; This function is called by:
  4256 ;;		_sprintf
  4257 ;; This function uses a non-reentrant model
  4258 ;;
  4259                           
  4260                           	psect	text4
  4261  00309A                     __ptext4:
  4262                           	opt stack 0
  4263  00309A                     _fround:
  4264                           	opt stack 25
  4265                           
  4266                           ;incstack = 0
  4267                           ;fround@prec stored from wreg
  4268  00309A  0100               	movlb	0	; () banked
  4269  00309C  6F88               	movwf	fround@prec& (0+255),b
  4270                           
  4271                           ;doprnt.c: 413: if(prec>=110)
  4272  00309E  0E6D               	movlw	109
  4273  0030A0  0100               	movlb	0	; () banked
  4274  0030A2  6588               	cpfsgt	fround@prec& (0+255),b
  4275  0030A4  D0AC               	goto	l5083
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4279  0030A6  0E00               	movlw	0
  4280  0030A8  6E1B               	movwf	___awdiv@divisor+1,c
  4281  0030AA  0E0A               	movlw	10
  4282  0030AC  6E1A               	movwf	___awdiv@divisor,c
  4283  0030AE  0E00               	movlw	0
  4284  0030B0  6E46               	movwf	___awmod@divisor+1,c
  4285  0030B2  0E64               	movlw	100
  4286  0030B4  6E45               	movwf	___awmod@divisor,c
  4287  0030B6  C088  F043         	movff	fround@prec,___awmod@dividend
  4288  0030BA  6A44               	clrf	___awmod@dividend+1,c
  4289  0030BC  ECEC  F01E         	call	___awmod	;wreg free
  4290  0030C0  C043  F018         	movff	?___awmod,___awdiv@dividend
  4291  0030C4  C044  F019         	movff	?___awmod+1,___awdiv@dividend+1
  4292  0030C8  ECED  F01D         	call	___awdiv	;wreg free
  4293  0030CC  90D8               	bcf	status,0,c
  4294  0030CE  3618               	rlcf	?___awdiv,f,c
  4295  0030D0  3619               	rlcf	?___awdiv+1,f,c
  4296  0030D2  90D8               	bcf	status,0,c
  4297  0030D4  3618               	rlcf	?___awdiv,f,c
  4298  0030D6  3619               	rlcf	?___awdiv+1,f,c
  4299  0030D8  0E24               	movlw	36
  4300  0030DA  2618               	addwf	?___awdiv,f,c
  4301  0030DC  0E00               	movlw	0
  4302  0030DE  2219               	addwfc	?___awdiv+1,f,c
  4303  0030E0  0E01               	movlw	low __npowers_
  4304  0030E2  2418               	addwf	?___awdiv,w,c
  4305  0030E4  6EF6               	movwf	tblptrl,c
  4306  0030E6  0E10               	movlw	high __npowers_
  4307  0030E8  2019               	addwfc	?___awdiv+1,w,c
  4308  0030EA  6EF7               	movwf	tblptrh,c
  4309  0030EC                     	if	0	;There are less than 3 active tblptr bytes
  4310  0030EC                     	endif
  4311  0030EC  0009               	tblrd		*+
  4312  0030EE  CFF5 F024          	movff	tablat,___flmul@a
  4313  0030F2  0009               	tblrd		*+
  4314  0030F4  CFF5 F025          	movff	tablat,___flmul@a+1
  4315  0030F8  0009               	tblrd		*+
  4316  0030FA  CFF5 F026          	movff	tablat,___flmul@a+2
  4317  0030FE  000A               	tblrd		*-
  4318  003100  CFF5 F027          	movff	tablat,___flmul@a+3
  4319  003104  0E00               	movlw	0
  4320  003106  6E1B               	movwf	___awdiv@divisor+1,c
  4321  003108  0E64               	movlw	100
  4322  00310A  6E1A               	movwf	___awdiv@divisor,c
  4323  00310C  C088  F018         	movff	fround@prec,___awdiv@dividend
  4324  003110  6A19               	clrf	___awdiv@dividend+1,c
  4325  003112  ECED  F01D         	call	___awdiv	;wreg free
  4326  003116  90D8               	bcf	status,0,c
  4327  003118  3618               	rlcf	?___awdiv,f,c
  4328  00311A  3619               	rlcf	?___awdiv+1,f,c
  4329  00311C  90D8               	bcf	status,0,c
  4330  00311E  3618               	rlcf	?___awdiv,f,c
  4331  003120  3619               	rlcf	?___awdiv+1,f,c
  4332  003122  0E48               	movlw	72
  4333  003124  2618               	addwf	?___awdiv,f,c
  4334  003126  0E00               	movlw	0
  4335  003128  2219               	addwfc	?___awdiv+1,f,c
  4336  00312A  0E01               	movlw	low __npowers_
  4337  00312C  2418               	addwf	?___awdiv,w,c
  4338  00312E  6EF6               	movwf	tblptrl,c
  4339  003130  0E10               	movlw	high __npowers_
  4340  003132  2019               	addwfc	?___awdiv+1,w,c
  4341  003134  6EF7               	movwf	tblptrh,c
  4342  003136                     	if	0	;There are less than 3 active tblptr bytes
  4343  003136                     	endif
  4344  003136  0009               	tblrd		*+
  4345  003138  CFF5 F020          	movff	tablat,___flmul@b
  4346  00313C  0009               	tblrd		*+
  4347  00313E  CFF5 F021          	movff	tablat,___flmul@b+1
  4348  003142  0009               	tblrd		*+
  4349  003144  CFF5 F022          	movff	tablat,___flmul@b+2
  4350  003148  000A               	tblrd		*-
  4351  00314A  CFF5 F023          	movff	tablat,___flmul@b+3
  4352  00314E  ECA5  F016         	call	___flmul	;wreg free
  4353  003152  C020  F084         	movff	?___flmul,_fround$2151
  4354  003156  C021  F085         	movff	?___flmul+1,_fround$2151+1
  4355  00315A  C022  F086         	movff	?___flmul+2,_fround$2151+2
  4356  00315E  C023  F087         	movff	?___flmul+3,_fround$2151+3
  4357                           
  4358                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4359  003162  0E00               	movlw	0
  4360  003164  6E46               	movwf	___awmod@divisor+1,c
  4361  003166  0E0A               	movlw	10
  4362  003168  6E45               	movwf	___awmod@divisor,c
  4363  00316A  C088  F043         	movff	fround@prec,___awmod@dividend
  4364  00316E  6A44               	clrf	___awmod@dividend+1,c
  4365  003170  ECEC  F01E         	call	___awmod	;wreg free
  4366  003174  90D8               	bcf	status,0,c
  4367  003176  3643               	rlcf	?___awmod,f,c
  4368  003178  3644               	rlcf	?___awmod+1,f,c
  4369  00317A  90D8               	bcf	status,0,c
  4370  00317C  3643               	rlcf	?___awmod,f,c
  4371  00317E  3644               	rlcf	?___awmod+1,f,c
  4372  003180  0E01               	movlw	low __npowers_
  4373  003182  2443               	addwf	?___awmod,w,c
  4374  003184  6EF6               	movwf	tblptrl,c
  4375  003186  0E10               	movlw	high __npowers_
  4376  003188  2044               	addwfc	?___awmod+1,w,c
  4377  00318A  6EF7               	movwf	tblptrh,c
  4378  00318C                     	if	0	;There are less than 3 active tblptr bytes
  4379  00318C                     	endif
  4380  00318C  0009               	tblrd		*+
  4381  00318E  CFF5 F024          	movff	tablat,___flmul@a
  4382  003192  0009               	tblrd		*+
  4383  003194  CFF5 F025          	movff	tablat,___flmul@a+1
  4384  003198  0009               	tblrd		*+
  4385  00319A  CFF5 F026          	movff	tablat,___flmul@a+2
  4386  00319E  000A               	tblrd		*-
  4387  0031A0  CFF5 F027          	movff	tablat,___flmul@a+3
  4388  0031A4  C084  F020         	movff	_fround$2151,___flmul@b
  4389  0031A8  C085  F021         	movff	_fround$2151+1,___flmul@b+1
  4390  0031AC  C086  F022         	movff	_fround$2151+2,___flmul@b+2
  4391  0031B0  C087  F023         	movff	_fround$2151+3,___flmul@b+3
  4392  0031B4  ECA5  F016         	call	___flmul	;wreg free
  4393  0031B8  C020  F080         	movff	?___flmul,_fround$2152
  4394  0031BC  C021  F081         	movff	?___flmul+1,_fround$2152+1
  4395  0031C0  C022  F082         	movff	?___flmul+2,_fround$2152+2
  4396  0031C4  C023  F083         	movff	?___flmul+3,_fround$2152+3
  4397                           
  4398                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4399  0031C8  C080  F020         	movff	_fround$2152,___flmul@b
  4400  0031CC  C081  F021         	movff	_fround$2152+1,___flmul@b+1
  4401  0031D0  C082  F022         	movff	_fround$2152+2,___flmul@b+2
  4402  0031D4  C083  F023         	movff	_fround$2152+3,___flmul@b+3
  4403  0031D8  0E00               	movlw	0
  4404  0031DA  6E24               	movwf	___flmul@a,c
  4405  0031DC  0E00               	movlw	0
  4406  0031DE  6E25               	movwf	___flmul@a+1,c
  4407  0031E0  0E00               	movlw	0
  4408  0031E2  6E26               	movwf	___flmul@a+2,c
  4409  0031E4  0E3F               	movlw	63
  4410  0031E6  6E27               	movwf	___flmul@a+3,c
  4411  0031E8  ECA5  F016         	call	___flmul	;wreg free
  4412  0031EC  C020  F049         	movff	?___flmul,?_fround
  4413  0031F0  C021  F04A         	movff	?___flmul+1,?_fround+1
  4414  0031F4  C022  F04B         	movff	?___flmul+2,?_fround+2
  4415  0031F8  C023  F04C         	movff	?___flmul+3,?_fround+3
  4416  0031FC  0012               	return	
  4417  0031FE                     l5083:
  4418                           
  4419                           ;doprnt.c: 415: else if(prec > 10)
  4420  0031FE  0E0A               	movlw	10
  4421  003200  0100               	movlb	0	; () banked
  4422  003202  6588               	cpfsgt	fround@prec& (0+255),b
  4423  003204  D063               	goto	l5091
  4424                           
  4425                           ; BSR set to: 0
  4426                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4427  003206  0E00               	movlw	0
  4428  003208  6E46               	movwf	___awmod@divisor+1,c
  4429  00320A  0E0A               	movlw	10
  4430  00320C  6E45               	movwf	___awmod@divisor,c
  4431  00320E  C088  F043         	movff	fround@prec,___awmod@dividend
  4432  003212  6A44               	clrf	___awmod@dividend+1,c
  4433  003214  ECEC  F01E         	call	___awmod	;wreg free
  4434  003218  90D8               	bcf	status,0,c
  4435  00321A  3643               	rlcf	?___awmod,f,c
  4436  00321C  3644               	rlcf	?___awmod+1,f,c
  4437  00321E  90D8               	bcf	status,0,c
  4438  003220  3643               	rlcf	?___awmod,f,c
  4439  003222  3644               	rlcf	?___awmod+1,f,c
  4440  003224  0E01               	movlw	low __npowers_
  4441  003226  2443               	addwf	?___awmod,w,c
  4442  003228  6EF6               	movwf	tblptrl,c
  4443  00322A  0E10               	movlw	high __npowers_
  4444  00322C  2044               	addwfc	?___awmod+1,w,c
  4445  00322E  6EF7               	movwf	tblptrh,c
  4446  003230                     	if	0	;There are less than 3 active tblptr bytes
  4447  003230                     	endif
  4448  003230  0009               	tblrd		*+
  4449  003232  CFF5 F024          	movff	tablat,___flmul@a
  4450  003236  0009               	tblrd		*+
  4451  003238  CFF5 F025          	movff	tablat,___flmul@a+1
  4452  00323C  0009               	tblrd		*+
  4453  00323E  CFF5 F026          	movff	tablat,___flmul@a+2
  4454  003242  000A               	tblrd		*-
  4455  003244  CFF5 F027          	movff	tablat,___flmul@a+3
  4456  003248  0E00               	movlw	0
  4457  00324A  6E1B               	movwf	___awdiv@divisor+1,c
  4458  00324C  0E0A               	movlw	10
  4459  00324E  6E1A               	movwf	___awdiv@divisor,c
  4460  003250  C088  F018         	movff	fround@prec,___awdiv@dividend
  4461  003254  6A19               	clrf	___awdiv@dividend+1,c
  4462  003256  ECED  F01D         	call	___awdiv	;wreg free
  4463  00325A  90D8               	bcf	status,0,c
  4464  00325C  3618               	rlcf	?___awdiv,f,c
  4465  00325E  3619               	rlcf	?___awdiv+1,f,c
  4466  003260  90D8               	bcf	status,0,c
  4467  003262  3618               	rlcf	?___awdiv,f,c
  4468  003264  3619               	rlcf	?___awdiv+1,f,c
  4469  003266  0E24               	movlw	36
  4470  003268  2618               	addwf	?___awdiv,f,c
  4471  00326A  0E00               	movlw	0
  4472  00326C  2219               	addwfc	?___awdiv+1,f,c
  4473  00326E  0E01               	movlw	low __npowers_
  4474  003270  2418               	addwf	?___awdiv,w,c
  4475  003272  6EF6               	movwf	tblptrl,c
  4476  003274  0E10               	movlw	high __npowers_
  4477  003276  2019               	addwfc	?___awdiv+1,w,c
  4478  003278  6EF7               	movwf	tblptrh,c
  4479  00327A                     	if	0	;There are less than 3 active tblptr bytes
  4480  00327A                     	endif
  4481  00327A  0009               	tblrd		*+
  4482  00327C  CFF5 F020          	movff	tablat,___flmul@b
  4483  003280  0009               	tblrd		*+
  4484  003282  CFF5 F021          	movff	tablat,___flmul@b+1
  4485  003286  0009               	tblrd		*+
  4486  003288  CFF5 F022          	movff	tablat,___flmul@b+2
  4487  00328C  000A               	tblrd		*-
  4488  00328E  CFF5 F023          	movff	tablat,___flmul@b+3
  4489  003292  ECA5  F016         	call	___flmul	;wreg free
  4490  003296  C020  F084         	movff	?___flmul,_fround$2151
  4491  00329A  C021  F085         	movff	?___flmul+1,_fround$2151+1
  4492  00329E  C022  F086         	movff	?___flmul+2,_fround$2151+2
  4493  0032A2  C023  F087         	movff	?___flmul+3,_fround$2151+3
  4494                           
  4495                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4496  0032A6  C084  F020         	movff	_fround$2151,___flmul@b
  4497  0032AA  C085  F021         	movff	_fround$2151+1,___flmul@b+1
  4498  0032AE  C086  F022         	movff	_fround$2151+2,___flmul@b+2
  4499  0032B2  C087  F023         	movff	_fround$2151+3,___flmul@b+3
  4500  0032B6  0E00               	movlw	0
  4501  0032B8  6E24               	movwf	___flmul@a,c
  4502  0032BA  0E00               	movlw	0
  4503  0032BC  6E25               	movwf	___flmul@a+1,c
  4504  0032BE  0E00               	movlw	0
  4505  0032C0  6E26               	movwf	___flmul@a+2,c
  4506  0032C2  0E3F               	movlw	63
  4507  0032C4  6E27               	movwf	___flmul@a+3,c
  4508  0032C6  ECA5  F016         	call	___flmul	;wreg free
  4509  0032CA  D790               	goto	L6
  4510  0032CC                     l5091:
  4511                           
  4512                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4513  0032CC  0100               	movlb	0	; () banked
  4514  0032CE  5188               	movf	fround@prec& (0+255),w,b
  4515  0032D0  0D04               	mullw	4
  4516  0032D2  0E01               	movlw	low __npowers_
  4517  0032D4  24F3               	addwf	prodl,w,c
  4518  0032D6  6EF6               	movwf	tblptrl,c
  4519  0032D8  0E10               	movlw	high __npowers_
  4520  0032DA  20F4               	addwfc	prodh,w,c
  4521  0032DC  6EF7               	movwf	tblptrh,c
  4522  0032DE                     	if	0	;There are less than 3 active tblptr bytes
  4523  0032DE                     	endif
  4524  0032DE  0009               	tblrd		*+
  4525  0032E0  CFF5 F020          	movff	tablat,___flmul@b
  4526  0032E4  0009               	tblrd		*+
  4527  0032E6  CFF5 F021          	movff	tablat,___flmul@b+1
  4528  0032EA  0009               	tblrd		*+
  4529  0032EC  CFF5 F022          	movff	tablat,___flmul@b+2
  4530  0032F0  000A               	tblrd		*-
  4531  0032F2  CFF5 F023          	movff	tablat,___flmul@b+3
  4532  0032F6  0E00               	movlw	0
  4533  0032F8  6E24               	movwf	___flmul@a,c
  4534  0032FA  0E00               	movlw	0
  4535  0032FC  6E25               	movwf	___flmul@a+1,c
  4536  0032FE  0E00               	movlw	0
  4537  003300  6E26               	movwf	___flmul@a+2,c
  4538  003302  0E3F               	movlw	63
  4539  003304  6E27               	movwf	___flmul@a+3,c
  4540  003306  ECA5  F016         	call	___flmul	;wreg free
  4541  00330A  C020  F049         	movff	?___flmul,?_fround
  4542  00330E  C021  F04A         	movff	?___flmul+1,?_fround+1
  4543  003312  C022  F04B         	movff	?___flmul+2,?_fround+2
  4544  003316  C023  F04C         	movff	?___flmul+3,?_fround+3
  4545  00331A  0012               	return	
  4546  00331C                     __end_of_fround:
  4547                           	opt stack 0
  4548                           tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           postinc0	equ	0xFEE
  4555                           wreg	equ	0xFE8
  4556                           postdec1	equ	0xFE5
  4557                           fsr1l	equ	0xFE1
  4558                           indf2	equ	0xFDF
  4559                           postinc2	equ	0xFDE
  4560                           postdec2	equ	0xFDD
  4561                           fsr2h	equ	0xFDA
  4562                           fsr2l	equ	0xFD9
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function ___flmul *****************
  4566 ;; Defined at:
  4567 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcmul.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  b               4   31[COMRAM] unsigned char 
  4570 ;;  a               4   35[COMRAM] unsigned char 
  4571 ;; Auto vars:     Size  Location     Type
  4572 ;;  prod            4   50[COMRAM] struct .
  4573 ;;  grs             4   45[COMRAM] unsigned long 
  4574 ;;  temp            2   54[COMRAM] struct .
  4575 ;;  bexp            1   49[COMRAM] unsigned char 
  4576 ;;  aexp            1   44[COMRAM] unsigned char 
  4577 ;;  sign            1   43[COMRAM] unsigned char 
  4578 ;; Return value:  Size  Location     Type
  4579 ;;                  4   31[COMRAM] unsigned char 
  4580 ;; Registers used:
  4581 ;;		wreg, status,2, status,0, prodl, prodh
  4582 ;; Tracked objects:
  4583 ;;		On entry : 0/0
  4584 ;;		On exit  : 0/0
  4585 ;;		Unchanged: 0/0
  4586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4587 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4591 ;;Total ram usage:       25 bytes
  4592 ;; Hardware stack levels used:    1
  4593 ;; Hardware stack levels required when called:    3
  4594 ;; This function calls:
  4595 ;;		Nothing
  4596 ;; This function is called by:
  4597 ;;		_main
  4598 ;;		_fround
  4599 ;;		_scale
  4600 ;;		_sprintf
  4601 ;;		_set_pwm1_percent
  4602 ;;		_set_pwm1_voltage
  4603 ;;		_set_pwm1_general
  4604 ;; This function uses a non-reentrant model
  4605 ;;
  4606                           
  4607                           	psect	text5
  4608  002D4A                     __ptext5:
  4609                           	opt stack 0
  4610  002D4A                     ___flmul:
  4611                           	opt stack 25
  4612                           
  4613                           ;incstack = 0
  4614  002D4A  5023               	movf	___flmul@b+3,w,c
  4615  002D4C  0B80               	andlw	128
  4616  002D4E  6E2C               	movwf	___flmul@sign,c
  4617  002D50  5023               	movf	___flmul@b+3,w,c
  4618  002D52  2423               	addwf	___flmul@b+3,w,c
  4619  002D54  6E32               	movwf	___flmul@bexp,c
  4620  002D56  BE22               	btfsc	___flmul@b+2,7,c
  4621  002D58  8032               	bsf	___flmul@bexp,0,c
  4622  002D5A  5032               	movf	___flmul@bexp,w,c
  4623  002D5C  B4D8               	btfsc	status,2,c
  4624  002D5E  D00D               	goto	l4867
  4625  002D60  2832               	incf	___flmul@bexp,w,c
  4626  002D62  A4D8               	btfss	status,2,c
  4627  002D64  D008               	goto	l4865
  4628  002D66  0E00               	movlw	0
  4629  002D68  6E20               	movwf	___flmul@b,c
  4630  002D6A  0E00               	movlw	0
  4631  002D6C  6E21               	movwf	___flmul@b+1,c
  4632  002D6E  0E00               	movlw	0
  4633  002D70  6E22               	movwf	___flmul@b+2,c
  4634  002D72  0E00               	movlw	0
  4635  002D74  6E23               	movwf	___flmul@b+3,c
  4636  002D76                     l4865:
  4637  002D76  8E22               	bsf	___flmul@b+2,7,c
  4638  002D78  D008               	goto	l4869
  4639  002D7A                     l4867:
  4640  002D7A  0E00               	movlw	0
  4641  002D7C  6E20               	movwf	___flmul@b,c
  4642  002D7E  0E00               	movlw	0
  4643  002D80  6E21               	movwf	___flmul@b+1,c
  4644  002D82  0E00               	movlw	0
  4645  002D84  6E22               	movwf	___flmul@b+2,c
  4646  002D86  0E00               	movlw	0
  4647  002D88  6E23               	movwf	___flmul@b+3,c
  4648  002D8A                     l4869:
  4649  002D8A  5027               	movf	___flmul@a+3,w,c
  4650  002D8C  0B80               	andlw	128
  4651  002D8E  1A2C               	xorwf	___flmul@sign,f,c
  4652  002D90  5027               	movf	___flmul@a+3,w,c
  4653  002D92  2427               	addwf	___flmul@a+3,w,c
  4654  002D94  6E2D               	movwf	___flmul@aexp,c
  4655  002D96  BE26               	btfsc	___flmul@a+2,7,c
  4656  002D98  802D               	bsf	___flmul@aexp,0,c
  4657  002D9A  502D               	movf	___flmul@aexp,w,c
  4658  002D9C  B4D8               	btfsc	status,2,c
  4659  002D9E  D00D               	goto	l4885
  4660  002DA0  282D               	incf	___flmul@aexp,w,c
  4661  002DA2  A4D8               	btfss	status,2,c
  4662  002DA4  D008               	goto	l4883
  4663  002DA6  0E00               	movlw	0
  4664  002DA8  6E24               	movwf	___flmul@a,c
  4665  002DAA  0E00               	movlw	0
  4666  002DAC  6E25               	movwf	___flmul@a+1,c
  4667  002DAE  0E00               	movlw	0
  4668  002DB0  6E26               	movwf	___flmul@a+2,c
  4669  002DB2  0E00               	movlw	0
  4670  002DB4  6E27               	movwf	___flmul@a+3,c
  4671  002DB6                     l4883:
  4672  002DB6  8E26               	bsf	___flmul@a+2,7,c
  4673  002DB8  D008               	goto	l1081
  4674  002DBA                     l4885:
  4675  002DBA  0E00               	movlw	0
  4676  002DBC  6E24               	movwf	___flmul@a,c
  4677  002DBE  0E00               	movlw	0
  4678  002DC0  6E25               	movwf	___flmul@a+1,c
  4679  002DC2  0E00               	movlw	0
  4680  002DC4  6E26               	movwf	___flmul@a+2,c
  4681  002DC6  0E00               	movlw	0
  4682  002DC8  6E27               	movwf	___flmul@a+3,c
  4683  002DCA                     l1081:
  4684  002DCA  502D               	movf	___flmul@aexp,w,c
  4685  002DCC  B4D8               	btfsc	status,2,c
  4686  002DCE  D003               	goto	l4889
  4687  002DD0  5032               	movf	___flmul@bexp,w,c
  4688  002DD2  A4D8               	btfss	status,2,c
  4689  002DD4  D009               	goto	l4893
  4690  002DD6                     l4889:
  4691  002DD6  0E00               	movlw	0
  4692  002DD8  6E20               	movwf	?___flmul,c
  4693  002DDA  0E00               	movlw	0
  4694  002DDC  6E21               	movwf	?___flmul+1,c
  4695  002DDE  0E00               	movlw	0
  4696  002DE0  6E22               	movwf	?___flmul+2,c
  4697  002DE2  0E00               	movlw	0
  4698  002DE4  6E23               	movwf	?___flmul+3,c
  4699  002DE6  0012               	return	
  4700  002DE8                     l4893:
  4701  002DE8  5026               	movf	___flmul@a+2,w,c
  4702  002DEA  0220               	mulwf	___flmul@b,c
  4703  002DEC  CFF3 F037          	movff	prodl,___flmul@temp
  4704  002DF0  CFF4 F038          	movff	prodh,___flmul@temp+1
  4705  002DF4  5037               	movf	___flmul@temp,w,c
  4706  002DF6  6E2E               	movwf	___flmul@grs,c
  4707  002DF8  6A2F               	clrf	___flmul@grs+1,c
  4708  002DFA  6A30               	clrf	___flmul@grs+2,c
  4709  002DFC  6A31               	clrf	___flmul@grs+3,c
  4710  002DFE  5038               	movf	___flmul@temp+1,w,c
  4711  002E00  6E33               	movwf	___flmul@prod,c
  4712  002E02  6A34               	clrf	___flmul@prod+1,c
  4713  002E04  6A35               	clrf	___flmul@prod+2,c
  4714  002E06  6A36               	clrf	___flmul@prod+3,c
  4715  002E08  5025               	movf	___flmul@a+1,w,c
  4716  002E0A  0221               	mulwf	___flmul@b+1,c
  4717  002E0C  CFF3 F037          	movff	prodl,___flmul@temp
  4718  002E10  CFF4 F038          	movff	prodh,___flmul@temp+1
  4719  002E14  5037               	movf	___flmul@temp,w,c
  4720  002E16  262E               	addwf	___flmul@grs,f,c
  4721  002E18  0E00               	movlw	0
  4722  002E1A  222F               	addwfc	___flmul@grs+1,f,c
  4723  002E1C  2230               	addwfc	___flmul@grs+2,f,c
  4724  002E1E  2231               	addwfc	___flmul@grs+3,f,c
  4725  002E20  5038               	movf	___flmul@temp+1,w,c
  4726  002E22  2633               	addwf	___flmul@prod,f,c
  4727  002E24  0E00               	movlw	0
  4728  002E26  2234               	addwfc	___flmul@prod+1,f,c
  4729  002E28  2235               	addwfc	___flmul@prod+2,f,c
  4730  002E2A  2236               	addwfc	___flmul@prod+3,f,c
  4731  002E2C  5024               	movf	___flmul@a,w,c
  4732  002E2E  0222               	mulwf	___flmul@b+2,c
  4733  002E30  CFF3 F037          	movff	prodl,___flmul@temp
  4734  002E34  CFF4 F038          	movff	prodh,___flmul@temp+1
  4735  002E38  5037               	movf	___flmul@temp,w,c
  4736  002E3A  262E               	addwf	___flmul@grs,f,c
  4737  002E3C  0E00               	movlw	0
  4738  002E3E  222F               	addwfc	___flmul@grs+1,f,c
  4739  002E40  2230               	addwfc	___flmul@grs+2,f,c
  4740  002E42  2231               	addwfc	___flmul@grs+3,f,c
  4741  002E44  5038               	movf	___flmul@temp+1,w,c
  4742  002E46  2633               	addwf	___flmul@prod,f,c
  4743  002E48  0E00               	movlw	0
  4744  002E4A  2234               	addwfc	___flmul@prod+1,f,c
  4745  002E4C  2235               	addwfc	___flmul@prod+2,f,c
  4746  002E4E  2236               	addwfc	___flmul@prod+3,f,c
  4747  002E50  C030  F031         	movff	___flmul@grs+2,___flmul@grs+3
  4748  002E54  C02F  F030         	movff	___flmul@grs+1,___flmul@grs+2
  4749  002E58  C02E  F02F         	movff	___flmul@grs,___flmul@grs+1
  4750  002E5C  6A2E               	clrf	___flmul@grs,c
  4751  002E5E  5024               	movf	___flmul@a,w,c
  4752  002E60  0221               	mulwf	___flmul@b+1,c
  4753  002E62  CFF3 F037          	movff	prodl,___flmul@temp
  4754  002E66  CFF4 F038          	movff	prodh,___flmul@temp+1
  4755  002E6A  5037               	movf	___flmul@temp,w,c
  4756  002E6C  262E               	addwf	___flmul@grs,f,c
  4757  002E6E  5038               	movf	___flmul@temp+1,w,c
  4758  002E70  222F               	addwfc	___flmul@grs+1,f,c
  4759  002E72  0E00               	movlw	0
  4760  002E74  2230               	addwfc	___flmul@grs+2,f,c
  4761  002E76  0E00               	movlw	0
  4762  002E78  2231               	addwfc	___flmul@grs+3,f,c
  4763  002E7A  5025               	movf	___flmul@a+1,w,c
  4764  002E7C  0220               	mulwf	___flmul@b,c
  4765  002E7E  CFF3 F037          	movff	prodl,___flmul@temp
  4766  002E82  CFF4 F038          	movff	prodh,___flmul@temp+1
  4767  002E86  5037               	movf	___flmul@temp,w,c
  4768  002E88  262E               	addwf	___flmul@grs,f,c
  4769  002E8A  5038               	movf	___flmul@temp+1,w,c
  4770  002E8C  222F               	addwfc	___flmul@grs+1,f,c
  4771  002E8E  0E00               	movlw	0
  4772  002E90  2230               	addwfc	___flmul@grs+2,f,c
  4773  002E92  0E00               	movlw	0
  4774  002E94  2231               	addwfc	___flmul@grs+3,f,c
  4775  002E96  C030  F031         	movff	___flmul@grs+2,___flmul@grs+3
  4776  002E9A  C02F  F030         	movff	___flmul@grs+1,___flmul@grs+2
  4777  002E9E  C02E  F02F         	movff	___flmul@grs,___flmul@grs+1
  4778  002EA2  6A2E               	clrf	___flmul@grs,c
  4779  002EA4  5024               	movf	___flmul@a,w,c
  4780  002EA6  0220               	mulwf	___flmul@b,c
  4781  002EA8  CFF3 F037          	movff	prodl,___flmul@temp
  4782  002EAC  CFF4 F038          	movff	prodh,___flmul@temp+1
  4783  002EB0  5037               	movf	___flmul@temp,w,c
  4784  002EB2  262E               	addwf	___flmul@grs,f,c
  4785  002EB4  5038               	movf	___flmul@temp+1,w,c
  4786  002EB6  222F               	addwfc	___flmul@grs+1,f,c
  4787  002EB8  0E00               	movlw	0
  4788  002EBA  2230               	addwfc	___flmul@grs+2,f,c
  4789  002EBC  0E00               	movlw	0
  4790  002EBE  2231               	addwfc	___flmul@grs+3,f,c
  4791  002EC0  5026               	movf	___flmul@a+2,w,c
  4792  002EC2  0221               	mulwf	___flmul@b+1,c
  4793  002EC4  CFF3 F037          	movff	prodl,___flmul@temp
  4794  002EC8  CFF4 F038          	movff	prodh,___flmul@temp+1
  4795  002ECC  5037               	movf	___flmul@temp,w,c
  4796  002ECE  2633               	addwf	___flmul@prod,f,c
  4797  002ED0  5038               	movf	___flmul@temp+1,w,c
  4798  002ED2  2234               	addwfc	___flmul@prod+1,f,c
  4799  002ED4  0E00               	movlw	0
  4800  002ED6  2235               	addwfc	___flmul@prod+2,f,c
  4801  002ED8  0E00               	movlw	0
  4802  002EDA  2236               	addwfc	___flmul@prod+3,f,c
  4803  002EDC  5025               	movf	___flmul@a+1,w,c
  4804  002EDE  0222               	mulwf	___flmul@b+2,c
  4805  002EE0  CFF3 F037          	movff	prodl,___flmul@temp
  4806  002EE4  CFF4 F038          	movff	prodh,___flmul@temp+1
  4807  002EE8  5037               	movf	___flmul@temp,w,c
  4808  002EEA  2633               	addwf	___flmul@prod,f,c
  4809  002EEC  5038               	movf	___flmul@temp+1,w,c
  4810  002EEE  2234               	addwfc	___flmul@prod+1,f,c
  4811  002EF0  0E00               	movlw	0
  4812  002EF2  2235               	addwfc	___flmul@prod+2,f,c
  4813  002EF4  0E00               	movlw	0
  4814  002EF6  2236               	addwfc	___flmul@prod+3,f,c
  4815  002EF8  5026               	movf	___flmul@a+2,w,c
  4816  002EFA  0222               	mulwf	___flmul@b+2,c
  4817  002EFC  CFF3 F037          	movff	prodl,___flmul@temp
  4818  002F00  CFF4 F038          	movff	prodh,___flmul@temp+1
  4819  002F04  5037               	movf	___flmul@temp,w,c
  4820  002F06  6E28               	movwf	??___flmul& (0+255),c
  4821  002F08  5038               	movf	___flmul@temp+1,w,c
  4822  002F0A  6E29               	movwf	(??___flmul+1)& (0+255),c
  4823  002F0C  6A2A               	clrf	(??___flmul+2)& (0+255),c
  4824  002F0E  6A2B               	clrf	(??___flmul+3)& (0+255),c
  4825  002F10  C02A  F02B         	movff	??___flmul+2,??___flmul+3
  4826  002F14  C029  F02A         	movff	??___flmul+1,??___flmul+2
  4827  002F18  C028  F029         	movff	??___flmul,??___flmul+1
  4828  002F1C  6A28               	clrf	??___flmul,c
  4829  002F1E  5028               	movf	??___flmul,w,c
  4830  002F20  2633               	addwf	___flmul@prod,f,c
  4831  002F22  5029               	movf	??___flmul+1,w,c
  4832  002F24  2234               	addwfc	___flmul@prod+1,f,c
  4833  002F26  502A               	movf	??___flmul+2,w,c
  4834  002F28  2235               	addwfc	___flmul@prod+2,f,c
  4835  002F2A  502B               	movf	??___flmul+3,w,c
  4836  002F2C  2236               	addwfc	___flmul@prod+3,f,c
  4837  002F2E  C02E  F028         	movff	___flmul@grs,??___flmul
  4838  002F32  C02F  F029         	movff	___flmul@grs+1,??___flmul+1
  4839  002F36  C030  F02A         	movff	___flmul@grs+2,??___flmul+2
  4840  002F3A  C031  F02B         	movff	___flmul@grs+3,??___flmul+3
  4841  002F3E  0E19               	movlw	25
  4842  002F40  D005               	goto	u5510
  4843  002F42                     u5515:
  4844  002F42  90D8               	bcf	status,0,c
  4845  002F44  322B               	rrcf	??___flmul+3,f,c
  4846  002F46  322A               	rrcf	??___flmul+2,f,c
  4847  002F48  3229               	rrcf	??___flmul+1,f,c
  4848  002F4A  3228               	rrcf	??___flmul,f,c
  4849  002F4C                     u5510:
  4850  002F4C  2EE8               	decfsz	wreg,f,c
  4851  002F4E  D7F9               	goto	u5515
  4852  002F50  5028               	movf	??___flmul,w,c
  4853  002F52  2633               	addwf	___flmul@prod,f,c
  4854  002F54  5029               	movf	??___flmul+1,w,c
  4855  002F56  2234               	addwfc	___flmul@prod+1,f,c
  4856  002F58  502A               	movf	??___flmul+2,w,c
  4857  002F5A  2235               	addwfc	___flmul@prod+2,f,c
  4858  002F5C  502B               	movf	??___flmul+3,w,c
  4859  002F5E  2236               	addwfc	___flmul@prod+3,f,c
  4860  002F60  C030  F031         	movff	___flmul@grs+2,___flmul@grs+3
  4861  002F64  C02F  F030         	movff	___flmul@grs+1,___flmul@grs+2
  4862  002F68  C02E  F02F         	movff	___flmul@grs,___flmul@grs+1
  4863  002F6C  6A2E               	clrf	___flmul@grs,c
  4864  002F6E  502D               	movf	___flmul@aexp,w,c
  4865  002F70  C032  F028         	movff	___flmul@bexp,??___flmul
  4866  002F74  6A29               	clrf	(??___flmul+1)& (0+255),c
  4867  002F76  2628               	addwf	??___flmul,f,c
  4868  002F78  0E00               	movlw	0
  4869  002F7A  2229               	addwfc	??___flmul+1,f,c
  4870  002F7C  0E82               	movlw	130
  4871  002F7E  2428               	addwf	??___flmul,w,c
  4872  002F80  6E37               	movwf	___flmul@temp,c
  4873  002F82  0EFF               	movlw	255
  4874  002F84  2029               	addwfc	??___flmul+1,w,c
  4875  002F86  6E38               	movwf	___flmul@temp+1,c
  4876  002F88  D00F               	goto	l4941
  4877  002F8A                     l4935:
  4878  002F8A  90D8               	bcf	status,0,c
  4879  002F8C  3633               	rlcf	___flmul@prod,f,c
  4880  002F8E  3634               	rlcf	___flmul@prod+1,f,c
  4881  002F90  3635               	rlcf	___flmul@prod+2,f,c
  4882  002F92  3636               	rlcf	___flmul@prod+3,f,c
  4883  002F94  BE31               	btfsc	___flmul@grs+3,7,c
  4884  002F96  8033               	bsf	___flmul@prod,0,c
  4885  002F98  90D8               	bcf	status,0,c
  4886  002F9A  362E               	rlcf	___flmul@grs,f,c
  4887  002F9C  362F               	rlcf	___flmul@grs+1,f,c
  4888  002F9E  3630               	rlcf	___flmul@grs+2,f,c
  4889  002FA0  3631               	rlcf	___flmul@grs+3,f,c
  4890  002FA2  0637               	decf	___flmul@temp,f,c
  4891  002FA4  A0D8               	btfss	status,0,c
  4892  002FA6  0638               	decf	___flmul@temp+1,f,c
  4893  002FA8                     l4941:
  4894  002FA8  AE35               	btfss	___flmul@prod+2,7,c
  4895  002FAA  D7EF               	goto	l4935
  4896  002FAC  0E00               	movlw	0
  4897  002FAE  6E2D               	movwf	___flmul@aexp,c
  4898  002FB0  AE31               	btfss	___flmul@grs+3,7,c
  4899  002FB2  D016               	goto	l1090
  4900  002FB4  0EFF               	movlw	255
  4901  002FB6  142E               	andwf	___flmul@grs,w,c
  4902  002FB8  6E28               	movwf	??___flmul& (0+255),c
  4903  002FBA  0EFF               	movlw	255
  4904  002FBC  142F               	andwf	___flmul@grs+1,w,c
  4905  002FBE  6E29               	movwf	(??___flmul+1)& (0+255),c
  4906  002FC0  0EFF               	movlw	255
  4907  002FC2  1430               	andwf	___flmul@grs+2,w,c
  4908  002FC4  6E2A               	movwf	(??___flmul+2)& (0+255),c
  4909  002FC6  0E7F               	movlw	127
  4910  002FC8  1431               	andwf	___flmul@grs+3,w,c
  4911  002FCA  6E2B               	movwf	(??___flmul+3)& (0+255),c
  4912  002FCC  5028               	movf	??___flmul,w,c
  4913  002FCE  1029               	iorwf	??___flmul+1,w,c
  4914  002FD0  102A               	iorwf	??___flmul+2,w,c
  4915  002FD2  102B               	iorwf	??___flmul+3,w,c
  4916  002FD4  A4D8               	btfss	status,2,c
  4917  002FD6  D002               	goto	l4951
  4918  002FD8  A033               	btfss	___flmul@prod,0,c
  4919  002FDA  D002               	goto	l1090
  4920  002FDC                     l4951:
  4921  002FDC  0E01               	movlw	1
  4922  002FDE  6E2D               	movwf	___flmul@aexp,c
  4923  002FE0                     l1090:
  4924  002FE0  502D               	movf	___flmul@aexp,w,c
  4925  002FE2  B4D8               	btfsc	status,2,c
  4926  002FE4  D01F               	goto	l4961
  4927  002FE6  0E01               	movlw	1
  4928  002FE8  2633               	addwf	___flmul@prod,f,c
  4929  002FEA  0E00               	movlw	0
  4930  002FEC  2234               	addwfc	___flmul@prod+1,f,c
  4931  002FEE  2235               	addwfc	___flmul@prod+2,f,c
  4932  002FF0  2236               	addwfc	___flmul@prod+3,f,c
  4933  002FF2  A036               	btfss	___flmul@prod+3,0,c
  4934  002FF4  D017               	goto	l4961
  4935  002FF6  C033  F028         	movff	___flmul@prod,??___flmul
  4936  002FFA  C034  F029         	movff	___flmul@prod+1,??___flmul+1
  4937  002FFE  C035  F02A         	movff	___flmul@prod+2,??___flmul+2
  4938  003002  C036  F02B         	movff	___flmul@prod+3,??___flmul+3
  4939  003006  342B               	rlcf	??___flmul+3,w,c
  4940  003008  322B               	rrcf	??___flmul+3,f,c
  4941  00300A  322A               	rrcf	??___flmul+2,f,c
  4942  00300C  3229               	rrcf	??___flmul+1,f,c
  4943  00300E  3228               	rrcf	??___flmul,f,c
  4944  003010  C028  F033         	movff	??___flmul,___flmul@prod
  4945  003014  C029  F034         	movff	??___flmul+1,___flmul@prod+1
  4946  003018  C02A  F035         	movff	??___flmul+2,___flmul@prod+2
  4947  00301C  C02B  F036         	movff	??___flmul+3,___flmul@prod+3
  4948  003020  4A37               	infsnz	___flmul@temp,f,c
  4949  003022  2A38               	incf	___flmul@temp+1,f,c
  4950  003024                     l4961:
  4951  003024  BE38               	btfsc	___flmul@temp+1,7,c
  4952  003026  D00D               	goto	l4965
  4953  003028  5038               	movf	___flmul@temp+1,w,c
  4954  00302A  E103               	bnz	u5590
  4955  00302C  2837               	incf	___flmul@temp,w,c
  4956  00302E  A0D8               	btfss	status,0,c
  4957  003030  D008               	goto	l4965
  4958  003032                     u5590:
  4959  003032  0E00               	movlw	0
  4960  003034  6E33               	movwf	___flmul@prod,c
  4961  003036  0E00               	movlw	0
  4962  003038  6E34               	movwf	___flmul@prod+1,c
  4963  00303A  0E80               	movlw	128
  4964  00303C  6E35               	movwf	___flmul@prod+2,c
  4965  00303E  0E7F               	movlw	127
  4966  003040  D020               	goto	L7
  4967  003042                     l4965:
  4968  003042  BE38               	btfsc	___flmul@temp+1,7,c
  4969  003044  D005               	goto	l4967
  4970  003046  5038               	movf	___flmul@temp+1,w,c
  4971  003048  E10E               	bnz	l1098
  4972  00304A  0437               	decf	___flmul@temp,w,c
  4973  00304C  B0D8               	btfsc	status,0,c
  4974  00304E  D00B               	goto	l1098
  4975  003050                     l4967:
  4976  003050  0E00               	movlw	0
  4977  003052  6E33               	movwf	___flmul@prod,c
  4978  003054  0E00               	movlw	0
  4979  003056  6E34               	movwf	___flmul@prod+1,c
  4980  003058  0E00               	movlw	0
  4981  00305A  6E35               	movwf	___flmul@prod+2,c
  4982  00305C  0E00               	movlw	0
  4983  00305E  6E36               	movwf	___flmul@prod+3,c
  4984  003060  0E00               	movlw	0
  4985  003062  6E2C               	movwf	___flmul@sign,c
  4986  003064  D00F               	goto	l4977
  4987  003066                     l1098:
  4988  003066  C037  F032         	movff	___flmul@temp,___flmul@bexp
  4989  00306A  0EFF               	movlw	255
  4990  00306C  1633               	andwf	___flmul@prod,f,c
  4991  00306E  0EFF               	movlw	255
  4992  003070  1634               	andwf	___flmul@prod+1,f,c
  4993  003072  0E7F               	movlw	127
  4994  003074  1635               	andwf	___flmul@prod+2,f,c
  4995  003076  0E00               	movlw	0
  4996  003078  1636               	andwf	___flmul@prod+3,f,c
  4997  00307A  B032               	btfsc	___flmul@bexp,0,c
  4998  00307C  8E35               	bsf	___flmul@prod+2,7,c
  4999  00307E  90D8               	bcf	status,0,c
  5000  003080  3032               	rrcf	___flmul@bexp,w,c
  5001  003082                     L7:
  5002  003082  6E36               	movwf	___flmul@prod+3,c
  5003  003084                     l4977:
  5004  003084  502C               	movf	___flmul@sign,w,c
  5005  003086  1236               	iorwf	___flmul@prod+3,f,c
  5006  003088  C033  F020         	movff	___flmul@prod,?___flmul
  5007  00308C  C034  F021         	movff	___flmul@prod+1,?___flmul+1
  5008  003090  C035  F022         	movff	___flmul@prod+2,?___flmul+2
  5009  003094  C036  F023         	movff	___flmul@prod+3,?___flmul+3
  5010  003098  0012               	return	
  5011  00309A                     __end_of___flmul:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           postinc0	equ	0xFEE
  5020                           wreg	equ	0xFE8
  5021                           postdec1	equ	0xFE5
  5022                           fsr1l	equ	0xFE1
  5023                           indf2	equ	0xFDF
  5024                           postinc2	equ	0xFDE
  5025                           postdec2	equ	0xFDD
  5026                           fsr2h	equ	0xFDA
  5027                           fsr2l	equ	0xFD9
  5028                           status	equ	0xFD8
  5029                           
  5030 ;; *************** function ___awmod *****************
  5031 ;; Defined at:
  5032 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  5033 ;; Parameters:    Size  Location     Type
  5034 ;;  dividend        2   66[COMRAM] int 
  5035 ;;  divisor         2   68[COMRAM] int 
  5036 ;; Auto vars:     Size  Location     Type
  5037 ;;  sign            1   71[COMRAM] unsigned char 
  5038 ;;  counter         1   70[COMRAM] unsigned char 
  5039 ;; Return value:  Size  Location     Type
  5040 ;;                  2   66[COMRAM] int 
  5041 ;; Registers used:
  5042 ;;		wreg, status,2, status,0
  5043 ;; Tracked objects:
  5044 ;;		On entry : 0/0
  5045 ;;		On exit  : 0/0
  5046 ;;		Unchanged: 0/0
  5047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5048 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;Total ram usage:        6 bytes
  5053 ;; Hardware stack levels used:    1
  5054 ;; Hardware stack levels required when called:    3
  5055 ;; This function calls:
  5056 ;;		Nothing
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;;		_fround
  5060 ;;		_scale
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           	psect	text6
  5065  003DD8                     __ptext6:
  5066                           	opt stack 0
  5067  003DD8                     ___awmod:
  5068                           	opt stack 25
  5069                           
  5070                           ;incstack = 0
  5071  003DD8  0E00               	movlw	0
  5072  003DDA  6E48               	movwf	___awmod@sign,c
  5073  003DDC  AE44               	btfss	___awmod@dividend+1,7,c
  5074  003DDE  D006               	goto	l5035
  5075  003DE0  6C43               	negf	___awmod@dividend,c
  5076  003DE2  1E44               	comf	___awmod@dividend+1,f,c
  5077  003DE4  B0D8               	btfsc	status,0,c
  5078  003DE6  2A44               	incf	___awmod@dividend+1,f,c
  5079  003DE8  0E01               	movlw	1
  5080  003DEA  6E48               	movwf	___awmod@sign,c
  5081  003DEC                     l5035:
  5082  003DEC  AE46               	btfss	___awmod@divisor+1,7,c
  5083  003DEE  D004               	goto	l5039
  5084  003DF0  6C45               	negf	___awmod@divisor,c
  5085  003DF2  1E46               	comf	___awmod@divisor+1,f,c
  5086  003DF4  B0D8               	btfsc	status,0,c
  5087  003DF6  2A46               	incf	___awmod@divisor+1,f,c
  5088  003DF8                     l5039:
  5089  003DF8  5045               	movf	___awmod@divisor,w,c
  5090  003DFA  1046               	iorwf	___awmod@divisor+1,w,c
  5091  003DFC  B4D8               	btfsc	status,2,c
  5092  003DFE  D018               	goto	l5055
  5093  003E00  0E01               	movlw	1
  5094  003E02  6E47               	movwf	___awmod@counter,c
  5095  003E04  D004               	goto	l5045
  5096  003E06                     l5043:
  5097  003E06  90D8               	bcf	status,0,c
  5098  003E08  3645               	rlcf	___awmod@divisor,f,c
  5099  003E0A  3646               	rlcf	___awmod@divisor+1,f,c
  5100  003E0C  2A47               	incf	___awmod@counter,f,c
  5101  003E0E                     l5045:
  5102  003E0E  AE46               	btfss	___awmod@divisor+1,7,c
  5103  003E10  D7FA               	goto	l5043
  5104  003E12                     l5047:
  5105  003E12  5045               	movf	___awmod@divisor,w,c
  5106  003E14  5C43               	subwf	___awmod@dividend,w,c
  5107  003E16  5046               	movf	___awmod@divisor+1,w,c
  5108  003E18  5844               	subwfb	___awmod@dividend+1,w,c
  5109  003E1A  A0D8               	btfss	status,0,c
  5110  003E1C  D004               	goto	l5051
  5111  003E1E  5045               	movf	___awmod@divisor,w,c
  5112  003E20  5E43               	subwf	___awmod@dividend,f,c
  5113  003E22  5046               	movf	___awmod@divisor+1,w,c
  5114  003E24  5A44               	subwfb	___awmod@dividend+1,f,c
  5115  003E26                     l5051:
  5116  003E26  90D8               	bcf	status,0,c
  5117  003E28  3246               	rrcf	___awmod@divisor+1,f,c
  5118  003E2A  3245               	rrcf	___awmod@divisor,f,c
  5119  003E2C  2E47               	decfsz	___awmod@counter,f,c
  5120  003E2E  D7F1               	goto	l5047
  5121  003E30                     l5055:
  5122  003E30  5048               	movf	___awmod@sign,w,c
  5123  003E32  B4D8               	btfsc	status,2,c
  5124  003E34  D004               	goto	l5059
  5125  003E36  6C43               	negf	___awmod@dividend,c
  5126  003E38  1E44               	comf	___awmod@dividend+1,f,c
  5127  003E3A  B0D8               	btfsc	status,0,c
  5128  003E3C  2A44               	incf	___awmod@dividend+1,f,c
  5129  003E3E                     l5059:
  5130  003E3E  C043  F043         	movff	___awmod@dividend,?___awmod
  5131  003E42  C044  F044         	movff	___awmod@dividend+1,?___awmod+1
  5132  003E46  0012               	return	
  5133  003E48                     __end_of___awmod:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           postinc0	equ	0xFEE
  5142                           wreg	equ	0xFE8
  5143                           postdec1	equ	0xFE5
  5144                           fsr1l	equ	0xFE1
  5145                           indf2	equ	0xFDF
  5146                           postinc2	equ	0xFDE
  5147                           postdec2	equ	0xFDD
  5148                           fsr2h	equ	0xFDA
  5149                           fsr2l	equ	0xFD9
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function ___awdiv *****************
  5153 ;; Defined at:
  5154 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;  dividend        2   23[COMRAM] int 
  5157 ;;  divisor         2   25[COMRAM] int 
  5158 ;; Auto vars:     Size  Location     Type
  5159 ;;  quotient        2   29[COMRAM] int 
  5160 ;;  sign            1   28[COMRAM] unsigned char 
  5161 ;;  counter         1   27[COMRAM] unsigned char 
  5162 ;; Return value:  Size  Location     Type
  5163 ;;                  2   23[COMRAM] int 
  5164 ;; Registers used:
  5165 ;;		wreg, status,2, status,0
  5166 ;; Tracked objects:
  5167 ;;		On entry : 0/0
  5168 ;;		On exit  : 0/0
  5169 ;;		Unchanged: 0/0
  5170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5171 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5172 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;Total ram usage:        8 bytes
  5176 ;; Hardware stack levels used:    1
  5177 ;; Hardware stack levels required when called:    3
  5178 ;; This function calls:
  5179 ;;		Nothing
  5180 ;; This function is called by:
  5181 ;;		_fround
  5182 ;;		_scale
  5183 ;;		_sprintf
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text7
  5188  003BDA                     __ptext7:
  5189                           	opt stack 0
  5190  003BDA                     ___awdiv:
  5191                           	opt stack 25
  5192                           
  5193                           ;incstack = 0
  5194  003BDA  0E00               	movlw	0
  5195  003BDC  6E1D               	movwf	___awdiv@sign,c
  5196  003BDE  AE1B               	btfss	___awdiv@divisor+1,7,c
  5197  003BE0  D006               	goto	l4991
  5198  003BE2  6C1A               	negf	___awdiv@divisor,c
  5199  003BE4  1E1B               	comf	___awdiv@divisor+1,f,c
  5200  003BE6  B0D8               	btfsc	status,0,c
  5201  003BE8  2A1B               	incf	___awdiv@divisor+1,f,c
  5202  003BEA  0E01               	movlw	1
  5203  003BEC  6E1D               	movwf	___awdiv@sign,c
  5204  003BEE                     l4991:
  5205  003BEE  AE19               	btfss	___awdiv@dividend+1,7,c
  5206  003BF0  D006               	goto	l4997
  5207  003BF2  6C18               	negf	___awdiv@dividend,c
  5208  003BF4  1E19               	comf	___awdiv@dividend+1,f,c
  5209  003BF6  B0D8               	btfsc	status,0,c
  5210  003BF8  2A19               	incf	___awdiv@dividend+1,f,c
  5211  003BFA  0E01               	movlw	1
  5212  003BFC  1A1D               	xorwf	___awdiv@sign,f,c
  5213  003BFE                     l4997:
  5214  003BFE  0E00               	movlw	0
  5215  003C00  6E1F               	movwf	___awdiv@quotient+1,c
  5216  003C02  0E00               	movlw	0
  5217  003C04  6E1E               	movwf	___awdiv@quotient,c
  5218  003C06  501A               	movf	___awdiv@divisor,w,c
  5219  003C08  101B               	iorwf	___awdiv@divisor+1,w,c
  5220  003C0A  B4D8               	btfsc	status,2,c
  5221  003C0C  D01C               	goto	l5019
  5222  003C0E  0E01               	movlw	1
  5223  003C10  6E1C               	movwf	___awdiv@counter,c
  5224  003C12  D004               	goto	l5005
  5225  003C14                     l5003:
  5226  003C14  90D8               	bcf	status,0,c
  5227  003C16  361A               	rlcf	___awdiv@divisor,f,c
  5228  003C18  361B               	rlcf	___awdiv@divisor+1,f,c
  5229  003C1A  2A1C               	incf	___awdiv@counter,f,c
  5230  003C1C                     l5005:
  5231  003C1C  AE1B               	btfss	___awdiv@divisor+1,7,c
  5232  003C1E  D7FA               	goto	l5003
  5233  003C20                     l5007:
  5234  003C20  90D8               	bcf	status,0,c
  5235  003C22  361E               	rlcf	___awdiv@quotient,f,c
  5236  003C24  361F               	rlcf	___awdiv@quotient+1,f,c
  5237  003C26  501A               	movf	___awdiv@divisor,w,c
  5238  003C28  5C18               	subwf	___awdiv@dividend,w,c
  5239  003C2A  501B               	movf	___awdiv@divisor+1,w,c
  5240  003C2C  5819               	subwfb	___awdiv@dividend+1,w,c
  5241  003C2E  A0D8               	btfss	status,0,c
  5242  003C30  D005               	goto	l5015
  5243  003C32  501A               	movf	___awdiv@divisor,w,c
  5244  003C34  5E18               	subwf	___awdiv@dividend,f,c
  5245  003C36  501B               	movf	___awdiv@divisor+1,w,c
  5246  003C38  5A19               	subwfb	___awdiv@dividend+1,f,c
  5247  003C3A  801E               	bsf	___awdiv@quotient,0,c
  5248  003C3C                     l5015:
  5249  003C3C  90D8               	bcf	status,0,c
  5250  003C3E  321B               	rrcf	___awdiv@divisor+1,f,c
  5251  003C40  321A               	rrcf	___awdiv@divisor,f,c
  5252  003C42  2E1C               	decfsz	___awdiv@counter,f,c
  5253  003C44  D7ED               	goto	l5007
  5254  003C46                     l5019:
  5255  003C46  501D               	movf	___awdiv@sign,w,c
  5256  003C48  B4D8               	btfsc	status,2,c
  5257  003C4A  D004               	goto	l5023
  5258  003C4C  6C1E               	negf	___awdiv@quotient,c
  5259  003C4E  1E1F               	comf	___awdiv@quotient+1,f,c
  5260  003C50  B0D8               	btfsc	status,0,c
  5261  003C52  2A1F               	incf	___awdiv@quotient+1,f,c
  5262  003C54                     l5023:
  5263  003C54  C01E  F018         	movff	___awdiv@quotient,?___awdiv
  5264  003C58  C01F  F019         	movff	___awdiv@quotient+1,?___awdiv+1
  5265  003C5C  0012               	return	
  5266  003C5E                     __end_of___awdiv:
  5267                           	opt stack 0
  5268                           tblptru	equ	0xFF8
  5269                           tblptrh	equ	0xFF7
  5270                           tblptrl	equ	0xFF6
  5271                           tablat	equ	0xFF5
  5272                           prodh	equ	0xFF4
  5273                           prodl	equ	0xFF3
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function __tdiv_to_l_ *****************
  5286 ;; Defined at:
  5287 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  f1              4   23[COMRAM] float 
  5290 ;;  f2              4   27[COMRAM] float 
  5291 ;; Auto vars:     Size  Location     Type
  5292 ;;  quot            4   34[COMRAM] unsigned long 
  5293 ;;  exp1            1   39[COMRAM] unsigned char 
  5294 ;;  cntr            1   38[COMRAM] unsigned char 
  5295 ;; Return value:  Size  Location     Type
  5296 ;;                  4   23[COMRAM] unsigned long 
  5297 ;; Registers used:
  5298 ;;		wreg, status,2, status,0
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5304 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;Total ram usage:       17 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    3
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_sprintf
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           	psect	text8
  5319  00346C                     __ptext8:
  5320                           	opt stack 0
  5321  00346C                     __tdiv_to_l_:
  5322                           	opt stack 26
  5323                           
  5324                           ;incstack = 0
  5325  00346C  C01A  F020         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5326  003470  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5327  003472  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5328  003474  3419               	rlcf	__tdiv_to_l_@f1+1,w,c
  5329  003476  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5330  003478  E301               	bnc	u3391
  5331  00347A  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5332  00347C                     u3391:
  5333  00347C  5020               	movf	??__tdiv_to_l_,w,c
  5334  00347E  6E28               	movwf	__tdiv_to_l_@exp1,c
  5335  003480  5028               	movf	__tdiv_to_l_@exp1,w,c
  5336  003482  A4D8               	btfss	status,2,c
  5337  003484  D009               	goto	l3503
  5338  003486  0E00               	movlw	0
  5339  003488  6E18               	movwf	?__tdiv_to_l_,c
  5340  00348A  0E00               	movlw	0
  5341  00348C  6E19               	movwf	?__tdiv_to_l_+1,c
  5342  00348E  0E00               	movlw	0
  5343  003490  6E1A               	movwf	?__tdiv_to_l_+2,c
  5344  003492  0E00               	movlw	0
  5345  003494  6E1B               	movwf	?__tdiv_to_l_+3,c
  5346  003496  0012               	return	
  5347  003498                     l3503:
  5348  003498  C01E  F020         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5349  00349C  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5350  00349E  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5351  0034A0  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  5352  0034A2  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5353  0034A4  E301               	bnc	u3411
  5354  0034A6  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5355  0034A8                     u3411:
  5356  0034A8  5020               	movf	??__tdiv_to_l_,w,c
  5357  0034AA  6E27               	movwf	__tdiv_to_l_@cntr,c
  5358  0034AC  5027               	movf	__tdiv_to_l_@cntr,w,c
  5359  0034AE  A4D8               	btfss	status,2,c
  5360  0034B0  D009               	goto	l3509
  5361  0034B2  0E00               	movlw	0
  5362  0034B4  6E18               	movwf	?__tdiv_to_l_,c
  5363  0034B6  0E00               	movlw	0
  5364  0034B8  6E19               	movwf	?__tdiv_to_l_+1,c
  5365  0034BA  0E00               	movlw	0
  5366  0034BC  6E1A               	movwf	?__tdiv_to_l_+2,c
  5367  0034BE  0E00               	movlw	0
  5368  0034C0  6E1B               	movwf	?__tdiv_to_l_+3,c
  5369  0034C2  0012               	return	
  5370  0034C4                     l3509:
  5371  0034C4  8E19               	bsf	__tdiv_to_l_@f1+1,7,c
  5372  0034C6  0EFF               	movlw	255
  5373  0034C8  1618               	andwf	__tdiv_to_l_@f1,f,c
  5374  0034CA  0EFF               	movlw	255
  5375  0034CC  1619               	andwf	__tdiv_to_l_@f1+1,f,c
  5376  0034CE  0E00               	movlw	0
  5377  0034D0  161A               	andwf	__tdiv_to_l_@f1+2,f,c
  5378  0034D2  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  5379  0034D4  0EFF               	movlw	255
  5380  0034D6  161C               	andwf	__tdiv_to_l_@f2,f,c
  5381  0034D8  0EFF               	movlw	255
  5382  0034DA  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  5383  0034DC  0E00               	movlw	0
  5384  0034DE  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  5385  0034E0  0E00               	movlw	0
  5386  0034E2  6E23               	movwf	__tdiv_to_l_@quot,c
  5387  0034E4  0E00               	movlw	0
  5388  0034E6  6E24               	movwf	__tdiv_to_l_@quot+1,c
  5389  0034E8  0E00               	movlw	0
  5390  0034EA  6E25               	movwf	__tdiv_to_l_@quot+2,c
  5391  0034EC  0E00               	movlw	0
  5392  0034EE  6E26               	movwf	__tdiv_to_l_@quot+3,c
  5393  0034F0  0E7F               	movlw	127
  5394  0034F2  5E28               	subwf	__tdiv_to_l_@exp1,f,c
  5395  0034F4  5027               	movf	__tdiv_to_l_@cntr,w,c
  5396  0034F6  0F98               	addlw	152
  5397  0034F8  5E28               	subwf	__tdiv_to_l_@exp1,f,c
  5398  0034FA  0E18               	movlw	24
  5399  0034FC  6E27               	movwf	__tdiv_to_l_@cntr,c
  5400  0034FE                     l819:
  5401  0034FE  90D8               	bcf	status,0,c
  5402  003500  3623               	rlcf	__tdiv_to_l_@quot,f,c
  5403  003502  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
  5404  003504  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
  5405  003506  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
  5406  003508  501C               	movf	__tdiv_to_l_@f2,w,c
  5407  00350A  5C18               	subwf	__tdiv_to_l_@f1,w,c
  5408  00350C  501D               	movf	__tdiv_to_l_@f2+1,w,c
  5409  00350E  5819               	subwfb	__tdiv_to_l_@f1+1,w,c
  5410  003510  501E               	movf	__tdiv_to_l_@f2+2,w,c
  5411  003512  581A               	subwfb	__tdiv_to_l_@f1+2,w,c
  5412  003514  A0D8               	btfss	status,0,c
  5413  003516  D007               	goto	l820
  5414  003518  501C               	movf	__tdiv_to_l_@f2,w,c
  5415  00351A  5E18               	subwf	__tdiv_to_l_@f1,f,c
  5416  00351C  501D               	movf	__tdiv_to_l_@f2+1,w,c
  5417  00351E  5A19               	subwfb	__tdiv_to_l_@f1+1,f,c
  5418  003520  501E               	movf	__tdiv_to_l_@f2+2,w,c
  5419  003522  5A1A               	subwfb	__tdiv_to_l_@f1+2,f,c
  5420  003524  8023               	bsf	__tdiv_to_l_@quot,0,c
  5421  003526                     l820:
  5422  003526  90D8               	bcf	status,0,c
  5423  003528  3618               	rlcf	__tdiv_to_l_@f1,f,c
  5424  00352A  3619               	rlcf	__tdiv_to_l_@f1+1,f,c
  5425  00352C  361A               	rlcf	__tdiv_to_l_@f1+2,f,c
  5426  00352E  2E27               	decfsz	__tdiv_to_l_@cntr,f,c
  5427  003530  D7E6               	goto	l819
  5428  003532  AE28               	btfss	__tdiv_to_l_@exp1,7,c
  5429  003534  D016               	goto	l3543
  5430  003536  5028               	movf	__tdiv_to_l_@exp1,w,c
  5431  003538  0A80               	xorlw	128
  5432  00353A  0F97               	addlw	151
  5433  00353C  B0D8               	btfsc	status,0,c
  5434  00353E  D009               	goto	l3539
  5435  003540  0E00               	movlw	0
  5436  003542  6E18               	movwf	?__tdiv_to_l_,c
  5437  003544  0E00               	movlw	0
  5438  003546  6E19               	movwf	?__tdiv_to_l_+1,c
  5439  003548  0E00               	movlw	0
  5440  00354A  6E1A               	movwf	?__tdiv_to_l_+2,c
  5441  00354C  0E00               	movlw	0
  5442  00354E  6E1B               	movwf	?__tdiv_to_l_+3,c
  5443  003550  0012               	return	
  5444  003552                     l3539:
  5445  003552  90D8               	bcf	status,0,c
  5446  003554  3226               	rrcf	__tdiv_to_l_@quot+3,f,c
  5447  003556  3225               	rrcf	__tdiv_to_l_@quot+2,f,c
  5448  003558  3224               	rrcf	__tdiv_to_l_@quot+1,f,c
  5449  00355A  3223               	rrcf	__tdiv_to_l_@quot,f,c
  5450  00355C  3E28               	incfsz	__tdiv_to_l_@exp1,f,c
  5451  00355E  D7F9               	goto	l3539
  5452  003560  D015               	goto	l826
  5453  003562                     l3543:
  5454  003562  0E17               	movlw	23
  5455  003564  6428               	cpfsgt	__tdiv_to_l_@exp1,c
  5456  003566  D00F               	goto	l3551
  5457  003568  0E00               	movlw	0
  5458  00356A  6E18               	movwf	?__tdiv_to_l_,c
  5459  00356C  0E00               	movlw	0
  5460  00356E  6E19               	movwf	?__tdiv_to_l_+1,c
  5461  003570  0E00               	movlw	0
  5462  003572  6E1A               	movwf	?__tdiv_to_l_+2,c
  5463  003574  0E00               	movlw	0
  5464  003576  6E1B               	movwf	?__tdiv_to_l_+3,c
  5465  003578  0012               	return	
  5466  00357A                     l3549:
  5467  00357A  90D8               	bcf	status,0,c
  5468  00357C  3623               	rlcf	__tdiv_to_l_@quot,f,c
  5469  00357E  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
  5470  003580  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
  5471  003582  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
  5472  003584  0628               	decf	__tdiv_to_l_@exp1,f,c
  5473  003586                     l3551:
  5474  003586  5028               	movf	__tdiv_to_l_@exp1,w,c
  5475  003588  A4D8               	btfss	status,2,c
  5476  00358A  D7F7               	goto	l3549
  5477  00358C                     l826:
  5478  00358C  C023  F018         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5479  003590  C024  F019         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5480  003594  C025  F01A         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5481  003598  C026  F01B         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5482  00359C  0012               	return		;funcret
  5483  00359E                     __end_of__tdiv_to_l_:
  5484                           	opt stack 0
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function __div_to_l_ *****************
  5503 ;; Defined at:
  5504 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;  f1              4   23[COMRAM] unsigned long 
  5507 ;;  f2              4   27[COMRAM] unsigned long 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  quot            4   31[COMRAM] unsigned long 
  5510 ;;  exp1            1   36[COMRAM] unsigned char 
  5511 ;;  cntr            1   35[COMRAM] unsigned char 
  5512 ;; Return value:  Size  Location     Type
  5513 ;;                  4   23[COMRAM] unsigned long 
  5514 ;; Registers used:
  5515 ;;		wreg, status,2, status,0
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5521 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5524 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5525 ;;Total ram usage:       14 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    3
  5528 ;; This function calls:
  5529 ;;		Nothing
  5530 ;; This function is called by:
  5531 ;;		_sprintf
  5532 ;; This function uses a non-reentrant model
  5533 ;;
  5534                           
  5535                           	psect	text9
  5536  00359E                     __ptext9:
  5537                           	opt stack 0
  5538  00359E                     __div_to_l_:
  5539                           	opt stack 26
  5540                           
  5541                           ;incstack = 0
  5542  00359E  341A               	rlcf	__div_to_l_@f1+2,w,c
  5543  0035A0  341B               	rlcf	__div_to_l_@f1+3,w,c
  5544  0035A2  6E25               	movwf	__div_to_l_@exp1,c
  5545  0035A4  5025               	movf	__div_to_l_@exp1,w,c
  5546  0035A6  A4D8               	btfss	status,2,c
  5547  0035A8  D009               	goto	l3559
  5548  0035AA  0E00               	movlw	0
  5549  0035AC  6E18               	movwf	?__div_to_l_,c
  5550  0035AE  0E00               	movlw	0
  5551  0035B0  6E19               	movwf	?__div_to_l_+1,c
  5552  0035B2  0E00               	movlw	0
  5553  0035B4  6E1A               	movwf	?__div_to_l_+2,c
  5554  0035B6  0E00               	movlw	0
  5555  0035B8  6E1B               	movwf	?__div_to_l_+3,c
  5556  0035BA  0012               	return	
  5557  0035BC                     l3559:
  5558  0035BC  341E               	rlcf	__div_to_l_@f2+2,w,c
  5559  0035BE  341F               	rlcf	__div_to_l_@f2+3,w,c
  5560  0035C0  6E24               	movwf	__div_to_l_@cntr,c
  5561  0035C2  5024               	movf	__div_to_l_@cntr,w,c
  5562  0035C4  A4D8               	btfss	status,2,c
  5563  0035C6  D009               	goto	l3565
  5564  0035C8  0E00               	movlw	0
  5565  0035CA  6E18               	movwf	?__div_to_l_,c
  5566  0035CC  0E00               	movlw	0
  5567  0035CE  6E19               	movwf	?__div_to_l_+1,c
  5568  0035D0  0E00               	movlw	0
  5569  0035D2  6E1A               	movwf	?__div_to_l_+2,c
  5570  0035D4  0E00               	movlw	0
  5571  0035D6  6E1B               	movwf	?__div_to_l_+3,c
  5572  0035D8  0012               	return	
  5573  0035DA                     l3565:
  5574  0035DA  8E1A               	bsf	__div_to_l_@f1+2,7,c
  5575  0035DC  0EFF               	movlw	255
  5576  0035DE  1618               	andwf	__div_to_l_@f1,f,c
  5577  0035E0  0EFF               	movlw	255
  5578  0035E2  1619               	andwf	__div_to_l_@f1+1,f,c
  5579  0035E4  0EFF               	movlw	255
  5580  0035E6  161A               	andwf	__div_to_l_@f1+2,f,c
  5581  0035E8  0E00               	movlw	0
  5582  0035EA  161B               	andwf	__div_to_l_@f1+3,f,c
  5583  0035EC  8E1E               	bsf	__div_to_l_@f2+2,7,c
  5584  0035EE  0EFF               	movlw	255
  5585  0035F0  161C               	andwf	__div_to_l_@f2,f,c
  5586  0035F2  0EFF               	movlw	255
  5587  0035F4  161D               	andwf	__div_to_l_@f2+1,f,c
  5588  0035F6  0EFF               	movlw	255
  5589  0035F8  161E               	andwf	__div_to_l_@f2+2,f,c
  5590  0035FA  0E00               	movlw	0
  5591  0035FC  161F               	andwf	__div_to_l_@f2+3,f,c
  5592  0035FE  0E00               	movlw	0
  5593  003600  6E20               	movwf	__div_to_l_@quot,c
  5594  003602  0E00               	movlw	0
  5595  003604  6E21               	movwf	__div_to_l_@quot+1,c
  5596  003606  0E00               	movlw	0
  5597  003608  6E22               	movwf	__div_to_l_@quot+2,c
  5598  00360A  0E00               	movlw	0
  5599  00360C  6E23               	movwf	__div_to_l_@quot+3,c
  5600  00360E  0E7F               	movlw	127
  5601  003610  5E25               	subwf	__div_to_l_@exp1,f,c
  5602  003612  5024               	movf	__div_to_l_@cntr,w,c
  5603  003614  0FA0               	addlw	160
  5604  003616  5E25               	subwf	__div_to_l_@exp1,f,c
  5605  003618  0E20               	movlw	32
  5606  00361A  6E24               	movwf	__div_to_l_@cntr,c
  5607  00361C                     l3579:
  5608  00361C  90D8               	bcf	status,0,c
  5609  00361E  3620               	rlcf	__div_to_l_@quot,f,c
  5610  003620  3621               	rlcf	__div_to_l_@quot+1,f,c
  5611  003622  3622               	rlcf	__div_to_l_@quot+2,f,c
  5612  003624  3623               	rlcf	__div_to_l_@quot+3,f,c
  5613  003626  501C               	movf	__div_to_l_@f2,w,c
  5614  003628  5C18               	subwf	__div_to_l_@f1,w,c
  5615  00362A  501D               	movf	__div_to_l_@f2+1,w,c
  5616  00362C  5819               	subwfb	__div_to_l_@f1+1,w,c
  5617  00362E  501E               	movf	__div_to_l_@f2+2,w,c
  5618  003630  581A               	subwfb	__div_to_l_@f1+2,w,c
  5619  003632  501F               	movf	__div_to_l_@f2+3,w,c
  5620  003634  581B               	subwfb	__div_to_l_@f1+3,w,c
  5621  003636  A0D8               	btfss	status,0,c
  5622  003638  D009               	goto	l3587
  5623  00363A  501C               	movf	__div_to_l_@f2,w,c
  5624  00363C  5E18               	subwf	__div_to_l_@f1,f,c
  5625  00363E  501D               	movf	__div_to_l_@f2+1,w,c
  5626  003640  5A19               	subwfb	__div_to_l_@f1+1,f,c
  5627  003642  501E               	movf	__div_to_l_@f2+2,w,c
  5628  003644  5A1A               	subwfb	__div_to_l_@f1+2,f,c
  5629  003646  501F               	movf	__div_to_l_@f2+3,w,c
  5630  003648  5A1B               	subwfb	__div_to_l_@f1+3,f,c
  5631  00364A  8020               	bsf	__div_to_l_@quot,0,c
  5632  00364C                     l3587:
  5633  00364C  90D8               	bcf	status,0,c
  5634  00364E  3618               	rlcf	__div_to_l_@f1,f,c
  5635  003650  3619               	rlcf	__div_to_l_@f1+1,f,c
  5636  003652  361A               	rlcf	__div_to_l_@f1+2,f,c
  5637  003654  361B               	rlcf	__div_to_l_@f1+3,f,c
  5638  003656  2E24               	decfsz	__div_to_l_@cntr,f,c
  5639  003658  D7E1               	goto	l3579
  5640  00365A  AE25               	btfss	__div_to_l_@exp1,7,c
  5641  00365C  D016               	goto	l3603
  5642  00365E  5025               	movf	__div_to_l_@exp1,w,c
  5643  003660  0A80               	xorlw	128
  5644  003662  0F9F               	addlw	159
  5645  003664  B0D8               	btfsc	status,0,c
  5646  003666  D009               	goto	l3599
  5647  003668  0E00               	movlw	0
  5648  00366A  6E18               	movwf	?__div_to_l_,c
  5649  00366C  0E00               	movlw	0
  5650  00366E  6E19               	movwf	?__div_to_l_+1,c
  5651  003670  0E00               	movlw	0
  5652  003672  6E1A               	movwf	?__div_to_l_+2,c
  5653  003674  0E00               	movlw	0
  5654  003676  6E1B               	movwf	?__div_to_l_+3,c
  5655  003678  0012               	return	
  5656  00367A                     l3599:
  5657  00367A  90D8               	bcf	status,0,c
  5658  00367C  3223               	rrcf	__div_to_l_@quot+3,f,c
  5659  00367E  3222               	rrcf	__div_to_l_@quot+2,f,c
  5660  003680  3221               	rrcf	__div_to_l_@quot+1,f,c
  5661  003682  3220               	rrcf	__div_to_l_@quot,f,c
  5662  003684  3E25               	incfsz	__div_to_l_@exp1,f,c
  5663  003686  D7F9               	goto	l3599
  5664  003688  D015               	goto	l697
  5665  00368A                     l3603:
  5666  00368A  0E1F               	movlw	31
  5667  00368C  6425               	cpfsgt	__div_to_l_@exp1,c
  5668  00368E  D00F               	goto	l3611
  5669  003690  0E00               	movlw	0
  5670  003692  6E18               	movwf	?__div_to_l_,c
  5671  003694  0E00               	movlw	0
  5672  003696  6E19               	movwf	?__div_to_l_+1,c
  5673  003698  0E00               	movlw	0
  5674  00369A  6E1A               	movwf	?__div_to_l_+2,c
  5675  00369C  0E00               	movlw	0
  5676  00369E  6E1B               	movwf	?__div_to_l_+3,c
  5677  0036A0  0012               	return	
  5678  0036A2                     l3609:
  5679  0036A2  90D8               	bcf	status,0,c
  5680  0036A4  3620               	rlcf	__div_to_l_@quot,f,c
  5681  0036A6  3621               	rlcf	__div_to_l_@quot+1,f,c
  5682  0036A8  3622               	rlcf	__div_to_l_@quot+2,f,c
  5683  0036AA  3623               	rlcf	__div_to_l_@quot+3,f,c
  5684  0036AC  0625               	decf	__div_to_l_@exp1,f,c
  5685  0036AE                     l3611:
  5686  0036AE  5025               	movf	__div_to_l_@exp1,w,c
  5687  0036B0  A4D8               	btfss	status,2,c
  5688  0036B2  D7F7               	goto	l3609
  5689  0036B4                     l697:
  5690  0036B4  C020  F018         	movff	__div_to_l_@quot,?__div_to_l_
  5691  0036B8  C021  F019         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5692  0036BC  C022  F01A         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5693  0036C0  C023  F01B         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5694  0036C4  0012               	return		;funcret
  5695  0036C6                     __end_of__div_to_l_:
  5696                           	opt stack 0
  5697                           tblptru	equ	0xFF8
  5698                           tblptrh	equ	0xFF7
  5699                           tblptrl	equ	0xFF6
  5700                           tablat	equ	0xFF5
  5701                           prodh	equ	0xFF4
  5702                           prodl	equ	0xFF3
  5703                           postinc0	equ	0xFEE
  5704                           wreg	equ	0xFE8
  5705                           postdec1	equ	0xFE5
  5706                           fsr1l	equ	0xFE1
  5707                           indf2	equ	0xFDF
  5708                           postinc2	equ	0xFDE
  5709                           postdec2	equ	0xFDD
  5710                           fsr2h	equ	0xFDA
  5711                           fsr2l	equ	0xFD9
  5712                           status	equ	0xFD8
  5713                           
  5714 ;; *************** function ___llmod *****************
  5715 ;; Defined at:
  5716 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  5717 ;; Parameters:    Size  Location     Type
  5718 ;;  dividend        4   36[COMRAM] unsigned long 
  5719 ;;  divisor         4   40[COMRAM] unsigned long 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  counter         1   44[COMRAM] unsigned char 
  5722 ;; Return value:  Size  Location     Type
  5723 ;;                  4   36[COMRAM] unsigned long 
  5724 ;; Registers used:
  5725 ;;		wreg, status,2, status,0
  5726 ;; Tracked objects:
  5727 ;;		On entry : 0/0
  5728 ;;		On exit  : 0/0
  5729 ;;		Unchanged: 0/0
  5730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5731 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5734 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;Total ram usage:        9 bytes
  5736 ;; Hardware stack levels used:    1
  5737 ;; Hardware stack levels required when called:    3
  5738 ;; This function calls:
  5739 ;;		Nothing
  5740 ;; This function is called by:
  5741 ;;		_sprintf
  5742 ;; This function uses a non-reentrant model
  5743 ;;
  5744                           
  5745                           	psect	text10
  5746  003EB8                     __ptext10:
  5747                           	opt stack 0
  5748  003EB8                     ___llmod:
  5749                           	opt stack 26
  5750                           
  5751                           ;incstack = 0
  5752  003EB8  5029               	movf	___llmod@divisor,w,c
  5753  003EBA  102A               	iorwf	___llmod@divisor+1,w,c
  5754  003EBC  102B               	iorwf	___llmod@divisor+2,w,c
  5755  003EBE  102C               	iorwf	___llmod@divisor+3,w,c
  5756  003EC0  B4D8               	btfsc	status,2,c
  5757  003EC2  D024               	goto	l911
  5758  003EC4  0E01               	movlw	1
  5759  003EC6  6E2D               	movwf	___llmod@counter,c
  5760  003EC8  D006               	goto	l3879
  5761  003ECA                     l3877:
  5762  003ECA  90D8               	bcf	status,0,c
  5763  003ECC  3629               	rlcf	___llmod@divisor,f,c
  5764  003ECE  362A               	rlcf	___llmod@divisor+1,f,c
  5765  003ED0  362B               	rlcf	___llmod@divisor+2,f,c
  5766  003ED2  362C               	rlcf	___llmod@divisor+3,f,c
  5767  003ED4  2A2D               	incf	___llmod@counter,f,c
  5768  003ED6                     l3879:
  5769  003ED6  AE2C               	btfss	___llmod@divisor+3,7,c
  5770  003ED8  D7F8               	goto	l3877
  5771  003EDA                     l3881:
  5772  003EDA  5029               	movf	___llmod@divisor,w,c
  5773  003EDC  5C25               	subwf	___llmod@dividend,w,c
  5774  003EDE  502A               	movf	___llmod@divisor+1,w,c
  5775  003EE0  5826               	subwfb	___llmod@dividend+1,w,c
  5776  003EE2  502B               	movf	___llmod@divisor+2,w,c
  5777  003EE4  5827               	subwfb	___llmod@dividend+2,w,c
  5778  003EE6  502C               	movf	___llmod@divisor+3,w,c
  5779  003EE8  5828               	subwfb	___llmod@dividend+3,w,c
  5780  003EEA  A0D8               	btfss	status,0,c
  5781  003EEC  D008               	goto	l3885
  5782  003EEE  5029               	movf	___llmod@divisor,w,c
  5783  003EF0  5E25               	subwf	___llmod@dividend,f,c
  5784  003EF2  502A               	movf	___llmod@divisor+1,w,c
  5785  003EF4  5A26               	subwfb	___llmod@dividend+1,f,c
  5786  003EF6  502B               	movf	___llmod@divisor+2,w,c
  5787  003EF8  5A27               	subwfb	___llmod@dividend+2,f,c
  5788  003EFA  502C               	movf	___llmod@divisor+3,w,c
  5789  003EFC  5A28               	subwfb	___llmod@dividend+3,f,c
  5790  003EFE                     l3885:
  5791  003EFE  90D8               	bcf	status,0,c
  5792  003F00  322C               	rrcf	___llmod@divisor+3,f,c
  5793  003F02  322B               	rrcf	___llmod@divisor+2,f,c
  5794  003F04  322A               	rrcf	___llmod@divisor+1,f,c
  5795  003F06  3229               	rrcf	___llmod@divisor,f,c
  5796  003F08  2E2D               	decfsz	___llmod@counter,f,c
  5797  003F0A  D7E7               	goto	l3881
  5798  003F0C                     l911:
  5799  003F0C  C025  F025         	movff	___llmod@dividend,?___llmod
  5800  003F10  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  5801  003F14  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  5802  003F18  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  5803  003F1C  0012               	return		;funcret
  5804  003F1E                     __end_of___llmod:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           postinc0	equ	0xFEE
  5813                           wreg	equ	0xFE8
  5814                           postdec1	equ	0xFE5
  5815                           fsr1l	equ	0xFE1
  5816                           indf2	equ	0xFDF
  5817                           postinc2	equ	0xFDE
  5818                           postdec2	equ	0xFDD
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function ___lldiv *****************
  5824 ;; Defined at:
  5825 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  dividend        4   23[COMRAM] unsigned long 
  5828 ;;  divisor         4   27[COMRAM] unsigned long 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  quotient        4   31[COMRAM] unsigned long 
  5831 ;;  counter         1   35[COMRAM] unsigned char 
  5832 ;; Return value:  Size  Location     Type
  5833 ;;                  4   23[COMRAM] unsigned long 
  5834 ;; Registers used:
  5835 ;;		wreg, status,2, status,0
  5836 ;; Tracked objects:
  5837 ;;		On entry : 0/0
  5838 ;;		On exit  : 0/0
  5839 ;;		Unchanged: 0/0
  5840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5841 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5845 ;;Total ram usage:       13 bytes
  5846 ;; Hardware stack levels used:    1
  5847 ;; Hardware stack levels required when called:    3
  5848 ;; This function calls:
  5849 ;;		Nothing
  5850 ;; This function is called by:
  5851 ;;		_sprintf
  5852 ;; This function uses a non-reentrant model
  5853 ;;
  5854                           
  5855                           	psect	text11
  5856  003C5E                     __ptext11:
  5857                           	opt stack 0
  5858  003C5E                     ___lldiv:
  5859                           	opt stack 26
  5860                           
  5861                           ;incstack = 0
  5862  003C5E  0E00               	movlw	0
  5863  003C60  6E20               	movwf	___lldiv@quotient,c
  5864  003C62  0E00               	movlw	0
  5865  003C64  6E21               	movwf	___lldiv@quotient+1,c
  5866  003C66  0E00               	movlw	0
  5867  003C68  6E22               	movwf	___lldiv@quotient+2,c
  5868  003C6A  0E00               	movlw	0
  5869  003C6C  6E23               	movwf	___lldiv@quotient+3,c
  5870  003C6E  501C               	movf	___lldiv@divisor,w,c
  5871  003C70  101D               	iorwf	___lldiv@divisor+1,w,c
  5872  003C72  101E               	iorwf	___lldiv@divisor+2,w,c
  5873  003C74  101F               	iorwf	___lldiv@divisor+3,w,c
  5874  003C76  B4D8               	btfsc	status,2,c
  5875  003C78  D02A               	goto	l901
  5876  003C7A  0E01               	movlw	1
  5877  003C7C  6E24               	movwf	___lldiv@counter,c
  5878  003C7E  D006               	goto	l3859
  5879  003C80                     l3857:
  5880  003C80  90D8               	bcf	status,0,c
  5881  003C82  361C               	rlcf	___lldiv@divisor,f,c
  5882  003C84  361D               	rlcf	___lldiv@divisor+1,f,c
  5883  003C86  361E               	rlcf	___lldiv@divisor+2,f,c
  5884  003C88  361F               	rlcf	___lldiv@divisor+3,f,c
  5885  003C8A  2A24               	incf	___lldiv@counter,f,c
  5886  003C8C                     l3859:
  5887  003C8C  AE1F               	btfss	___lldiv@divisor+3,7,c
  5888  003C8E  D7F8               	goto	l3857
  5889  003C90                     l3861:
  5890  003C90  90D8               	bcf	status,0,c
  5891  003C92  3620               	rlcf	___lldiv@quotient,f,c
  5892  003C94  3621               	rlcf	___lldiv@quotient+1,f,c
  5893  003C96  3622               	rlcf	___lldiv@quotient+2,f,c
  5894  003C98  3623               	rlcf	___lldiv@quotient+3,f,c
  5895  003C9A  501C               	movf	___lldiv@divisor,w,c
  5896  003C9C  5C18               	subwf	___lldiv@dividend,w,c
  5897  003C9E  501D               	movf	___lldiv@divisor+1,w,c
  5898  003CA0  5819               	subwfb	___lldiv@dividend+1,w,c
  5899  003CA2  501E               	movf	___lldiv@divisor+2,w,c
  5900  003CA4  581A               	subwfb	___lldiv@dividend+2,w,c
  5901  003CA6  501F               	movf	___lldiv@divisor+3,w,c
  5902  003CA8  581B               	subwfb	___lldiv@dividend+3,w,c
  5903  003CAA  A0D8               	btfss	status,0,c
  5904  003CAC  D009               	goto	l3869
  5905  003CAE  501C               	movf	___lldiv@divisor,w,c
  5906  003CB0  5E18               	subwf	___lldiv@dividend,f,c
  5907  003CB2  501D               	movf	___lldiv@divisor+1,w,c
  5908  003CB4  5A19               	subwfb	___lldiv@dividend+1,f,c
  5909  003CB6  501E               	movf	___lldiv@divisor+2,w,c
  5910  003CB8  5A1A               	subwfb	___lldiv@dividend+2,f,c
  5911  003CBA  501F               	movf	___lldiv@divisor+3,w,c
  5912  003CBC  5A1B               	subwfb	___lldiv@dividend+3,f,c
  5913  003CBE  8020               	bsf	___lldiv@quotient,0,c
  5914  003CC0                     l3869:
  5915  003CC0  90D8               	bcf	status,0,c
  5916  003CC2  321F               	rrcf	___lldiv@divisor+3,f,c
  5917  003CC4  321E               	rrcf	___lldiv@divisor+2,f,c
  5918  003CC6  321D               	rrcf	___lldiv@divisor+1,f,c
  5919  003CC8  321C               	rrcf	___lldiv@divisor,f,c
  5920  003CCA  2E24               	decfsz	___lldiv@counter,f,c
  5921  003CCC  D7E1               	goto	l3861
  5922  003CCE                     l901:
  5923  003CCE  C020  F018         	movff	___lldiv@quotient,?___lldiv
  5924  003CD2  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  5925  003CD6  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  5926  003CDA  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  5927  003CDE  0012               	return		;funcret
  5928  003CE0                     __end_of___lldiv:
  5929                           	opt stack 0
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           postinc0	equ	0xFEE
  5937                           wreg	equ	0xFE8
  5938                           postdec1	equ	0xFE5
  5939                           fsr1l	equ	0xFE1
  5940                           indf2	equ	0xFDF
  5941                           postinc2	equ	0xFDE
  5942                           postdec2	equ	0xFDD
  5943                           fsr2h	equ	0xFDA
  5944                           fsr2l	equ	0xFD9
  5945                           status	equ	0xFD8
  5946                           
  5947 ;; *************** function ___flsub *****************
  5948 ;; Defined at:
  5949 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcadd.c"
  5950 ;; Parameters:    Size  Location     Type
  5951 ;;  b               4   45[BANK0 ] unsigned long 
  5952 ;;  a               4   49[BANK0 ] unsigned long 
  5953 ;; Auto vars:     Size  Location     Type
  5954 ;;		None
  5955 ;; Return value:  Size  Location     Type
  5956 ;;                  4   45[BANK0 ] unsigned long 
  5957 ;; Registers used:
  5958 ;;		wreg, status,2, status,0, cstack
  5959 ;; Tracked objects:
  5960 ;;		On entry : 0/0
  5961 ;;		On exit  : 0/0
  5962 ;;		Unchanged: 0/0
  5963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5964 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;Total ram usage:        8 bytes
  5969 ;; Hardware stack levels used:    1
  5970 ;; Hardware stack levels required when called:    4
  5971 ;; This function calls:
  5972 ;;		___fladd
  5973 ;; This function is called by:
  5974 ;;		_sprintf
  5975 ;; This function uses a non-reentrant model
  5976 ;;
  5977                           
  5978                           	psect	text12
  5979  004096                     __ptext12:
  5980                           	opt stack 0
  5981  004096                     ___flsub:
  5982                           	opt stack 25
  5983                           
  5984                           ;incstack = 0
  5985  004096  0E00               	movlw	0
  5986  004098  0100               	movlb	0	; () banked
  5987  00409A  1BB1               	xorwf	___flsub@a& (0+255),f,b
  5988  00409C  0E00               	movlw	0
  5989  00409E  1BB2               	xorwf	(___flsub@a+1)& (0+255),f,b
  5990  0040A0  0E00               	movlw	0
  5991  0040A2  1BB3               	xorwf	(___flsub@a+2)& (0+255),f,b
  5992  0040A4  0E80               	movlw	128
  5993  0040A6  1BB4               	xorwf	(___flsub@a+3)& (0+255),f,b
  5994                           
  5995                           ; BSR set to: 0
  5996  0040A8  C0AD  F099         	movff	___flsub@b,___fladd@b
  5997  0040AC  C0AE  F09A         	movff	___flsub@b+1,___fladd@b+1
  5998  0040B0  C0AF  F09B         	movff	___flsub@b+2,___fladd@b+2
  5999  0040B4  C0B0  F09C         	movff	___flsub@b+3,___fladd@b+3
  6000  0040B8  C0B1  F09D         	movff	___flsub@a,___fladd@a
  6001  0040BC  C0B2  F09E         	movff	___flsub@a+1,___fladd@a+1
  6002  0040C0  C0B3  F09F         	movff	___flsub@a+2,___fladd@a+2
  6003  0040C4  C0B4  F0A0         	movff	___flsub@a+3,___fladd@a+3
  6004  0040C8  EC4B  F00E         	call	___fladd	;wreg free
  6005  0040CC  C099  F0AD         	movff	?___fladd,?___flsub
  6006  0040D0  C09A  F0AE         	movff	?___fladd+1,?___flsub+1
  6007  0040D4  C09B  F0AF         	movff	?___fladd+2,?___flsub+2
  6008  0040D8  C09C  F0B0         	movff	?___fladd+3,?___flsub+3
  6009  0040DC  0012               	return	
  6010  0040DE                     __end_of___flsub:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           postinc0	equ	0xFEE
  6019                           wreg	equ	0xFE8
  6020                           postdec1	equ	0xFE5
  6021                           fsr1l	equ	0xFE1
  6022                           indf2	equ	0xFDF
  6023                           postinc2	equ	0xFDE
  6024                           postdec2	equ	0xFDD
  6025                           fsr2h	equ	0xFDA
  6026                           fsr2l	equ	0xFD9
  6027                           status	equ	0xFD8
  6028                           
  6029 ;; *************** function ___flneg *****************
  6030 ;; Defined at:
  6031 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\flneg.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  f1              4   23[COMRAM] unsigned long 
  6034 ;; Auto vars:     Size  Location     Type
  6035 ;;		None
  6036 ;; Return value:  Size  Location     Type
  6037 ;;                  4   23[COMRAM] unsigned long 
  6038 ;; Registers used:
  6039 ;;		wreg, status,2, status,0
  6040 ;; Tracked objects:
  6041 ;;		On entry : 0/0
  6042 ;;		On exit  : 0/0
  6043 ;;		Unchanged: 0/0
  6044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6045 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6049 ;;Total ram usage:        4 bytes
  6050 ;; Hardware stack levels used:    1
  6051 ;; Hardware stack levels required when called:    3
  6052 ;; This function calls:
  6053 ;;		Nothing
  6054 ;; This function is called by:
  6055 ;;		_sprintf
  6056 ;;		_set_pwm1_general
  6057 ;; This function uses a non-reentrant model
  6058 ;;
  6059                           
  6060                           	psect	text13
  6061  004216                     __ptext13:
  6062                           	opt stack 0
  6063  004216                     ___flneg:
  6064                           	opt stack 26
  6065                           
  6066                           ;incstack = 0
  6067  004216  5018               	movf	___flneg@f1,w,c
  6068  004218  1019               	iorwf	___flneg@f1+1,w,c
  6069  00421A  101A               	iorwf	___flneg@f1+2,w,c
  6070  00421C  101B               	iorwf	___flneg@f1+3,w,c
  6071  00421E  B4D8               	btfsc	status,2,c
  6072  004220  D008               	goto	l3787
  6073  004222  0E00               	movlw	0
  6074  004224  1A18               	xorwf	___flneg@f1,f,c
  6075  004226  0E00               	movlw	0
  6076  004228  1A19               	xorwf	___flneg@f1+1,f,c
  6077  00422A  0E00               	movlw	0
  6078  00422C  1A1A               	xorwf	___flneg@f1+2,f,c
  6079  00422E  0E80               	movlw	128
  6080  004230  1A1B               	xorwf	___flneg@f1+3,f,c
  6081  004232                     l3787:
  6082  004232  C018  F018         	movff	___flneg@f1,?___flneg
  6083  004236  C019  F019         	movff	___flneg@f1+1,?___flneg+1
  6084  00423A  C01A  F01A         	movff	___flneg@f1+2,?___flneg+2
  6085  00423E  C01B  F01B         	movff	___flneg@f1+3,?___flneg+3
  6086  004242  0012               	return	
  6087  004244                     __end_of___flneg:
  6088                           	opt stack 0
  6089                           tblptru	equ	0xFF8
  6090                           tblptrh	equ	0xFF7
  6091                           tblptrl	equ	0xFF6
  6092                           tablat	equ	0xFF5
  6093                           prodh	equ	0xFF4
  6094                           prodl	equ	0xFF3
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _setupSerial *****************
  6107 ;; Defined at:
  6108 ;;		line 3 in file "my_ser.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;  dummy           1   23[COMRAM] unsigned char 
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;Total ram usage:        1 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    3
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_main
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text14
  6137  004344                     __ptext14:
  6138                           	opt stack 0
  6139  004344                     _setupSerial:
  6140                           	opt stack 27
  6141                           
  6142                           ;my_ser.c: 4: unsigned char dummy;
  6143                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
  6144                           
  6145                           ;incstack = 0
  6146  004344  96B8               	bcf	4024,3,c	;volatile
  6147                           
  6148                           ;my_ser.c: 6: TXSTA = 0;
  6149  004346  0E00               	movlw	0
  6150  004348  6EAC               	movwf	4012,c	;volatile
  6151                           
  6152                           ;my_ser.c: 7: SPBRG = 25;
  6153  00434A  0E19               	movlw	25
  6154  00434C  6EAF               	movwf	4015,c	;volatile
  6155                           
  6156                           ;my_ser.c: 8: SPBRGH = 0;
  6157  00434E  0E00               	movlw	0
  6158  004350  6EB0               	movwf	4016,c	;volatile
  6159                           
  6160                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  6161  004352  84AC               	bsf	4012,2,c	;volatile
  6162                           
  6163                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  6164  004354  8AAC               	bsf	4012,5,c	;volatile
  6165                           
  6166                           ;my_ser.c: 12: RCSTA = 0;
  6167  004356  0E00               	movlw	0
  6168  004358  6EAB               	movwf	4011,c	;volatile
  6169                           
  6170                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
  6171  00435A  88AB               	bsf	4011,4,c	;volatile
  6172                           
  6173                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
  6174  00435C  8EAB               	bsf	4011,7,c	;volatile
  6175                           
  6176                           ;my_ser.c: 15: ;
  6177                           ;my_ser.c: 16: dummy = RCREG;
  6178  00435E  CFAE F018          	movff	4014,setupSerial@dummy	;volatile
  6179                           
  6180                           ;my_ser.c: 17: dummy = RCREG;
  6181  004362  CFAE F018          	movff	4014,setupSerial@dummy	;volatile
  6182  004366  0012               	return	
  6183  004368                     __end_of_setupSerial:
  6184                           	opt stack 0
  6185                           tblptru	equ	0xFF8
  6186                           tblptrh	equ	0xFF7
  6187                           tblptrl	equ	0xFF6
  6188                           tablat	equ	0xFF5
  6189                           prodh	equ	0xFF4
  6190                           prodl	equ	0xFF3
  6191                           postinc0	equ	0xFEE
  6192                           wreg	equ	0xFE8
  6193                           postdec1	equ	0xFE5
  6194                           fsr1l	equ	0xFE1
  6195                           indf2	equ	0xFDF
  6196                           postinc2	equ	0xFDE
  6197                           postdec2	equ	0xFDD
  6198                           fsr2h	equ	0xFDA
  6199                           fsr2l	equ	0xFD9
  6200                           status	equ	0xFD8
  6201                           
  6202 ;; *************** function _setupPorts *****************
  6203 ;; Defined at:
  6204 ;;		line 88 in file "pwm_asl.c"
  6205 ;; Parameters:    Size  Location     Type
  6206 ;;		None
  6207 ;; Auto vars:     Size  Location     Type
  6208 ;;		None
  6209 ;; Return value:  Size  Location     Type
  6210 ;;                  1    wreg      void 
  6211 ;; Registers used:
  6212 ;;		wreg, status,2
  6213 ;; Tracked objects:
  6214 ;;		On entry : 0/0
  6215 ;;		On exit  : 0/0
  6216 ;;		Unchanged: 0/0
  6217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;Total ram usage:        0 bytes
  6223 ;; Hardware stack levels used:    1
  6224 ;; Hardware stack levels required when called:    3
  6225 ;; This function calls:
  6226 ;;		Nothing
  6227 ;; This function is called by:
  6228 ;;		_main
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232                           	psect	text15
  6233  0043F0                     __ptext15:
  6234                           	opt stack 0
  6235  0043F0                     _setupPorts:
  6236                           	opt stack 27
  6237                           
  6238                           ;pwm_asl.c: 89: ADCON0 = 0;
  6239                           
  6240                           ;incstack = 0
  6241  0043F0  0E00               	movlw	0
  6242  0043F2  6EC2               	movwf	4034,c	;volatile
  6243                           
  6244                           ;pwm_asl.c: 90: ADCON1 = 0b00001100;
  6245  0043F4  0E0C               	movlw	12
  6246  0043F6  6EC1               	movwf	4033,c	;volatile
  6247                           
  6248                           ;pwm_asl.c: 91: TRISB = 0xF1;
  6249  0043F8  0EF1               	movlw	241
  6250  0043FA  6E93               	movwf	3987,c	;volatile
  6251                           
  6252                           ;pwm_asl.c: 92: TRISC = 0x80;
  6253  0043FC  0E80               	movlw	128
  6254  0043FE  6E94               	movwf	3988,c	;volatile
  6255                           
  6256                           ;pwm_asl.c: 93: TRISA = 0xCF;
  6257  004400  0ECF               	movlw	207
  6258  004402  6E92               	movwf	3986,c	;volatile
  6259                           
  6260                           ;pwm_asl.c: 94: TRISD = 0x00;
  6261  004404  0E00               	movlw	0
  6262  004406  6E95               	movwf	3989,c	;volatile
  6263                           
  6264                           ;pwm_asl.c: 95: TRISE = 0x00;
  6265  004408  0E00               	movlw	0
  6266  00440A  6E96               	movwf	3990,c	;volatile
  6267  00440C  0012               	return		;funcret
  6268  00440E                     __end_of_setupPorts:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           postinc0	equ	0xFEE
  6277                           wreg	equ	0xFE8
  6278                           postdec1	equ	0xFE5
  6279                           fsr1l	equ	0xFE1
  6280                           indf2	equ	0xFDF
  6281                           postinc2	equ	0xFDE
  6282                           postdec2	equ	0xFDD
  6283                           fsr2h	equ	0xFDA
  6284                           fsr2l	equ	0xFD9
  6285                           status	equ	0xFD8
  6286                           
  6287 ;; *************** function _set_pwm1_raw *****************
  6288 ;; Defined at:
  6289 ;;		line 14 in file "my_pwm.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  raw_value       2   23[COMRAM] unsigned int 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;		None
  6294 ;; Return value:  Size  Location     Type
  6295 ;;                  1    wreg      void 
  6296 ;; Registers used:
  6297 ;;		wreg, status,2, status,0
  6298 ;; Tracked objects:
  6299 ;;		On entry : 0/0
  6300 ;;		On exit  : 0/0
  6301 ;;		Unchanged: 0/0
  6302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6303 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6306 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;Total ram usage:        4 bytes
  6308 ;; Hardware stack levels used:    1
  6309 ;; Hardware stack levels required when called:    3
  6310 ;; This function calls:
  6311 ;;		Nothing
  6312 ;; This function is called by:
  6313 ;;		_main
  6314 ;;		_set_pwm1_percent
  6315 ;;		_set_pwm1_voltage
  6316 ;;		_set_pwm1_general
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	text16
  6321  004244                     __ptext16:
  6322                           	opt stack 0
  6323  004244                     _set_pwm1_raw:
  6324                           	opt stack 27
  6325                           
  6326                           ;my_pwm.c: 16: CCPR1L = (raw_value >> 2) & 0x00FF;
  6327                           
  6328                           ;incstack = 0
  6329  004244  C018  F01A         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  6330  004248  C019  F01B         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  6331  00424C  90D8               	bcf	status,0,c
  6332  00424E  321B               	rrcf	??_set_pwm1_raw+1,f,c
  6333  004250  321A               	rrcf	??_set_pwm1_raw,f,c
  6334  004252  90D8               	bcf	status,0,c
  6335  004254  321B               	rrcf	??_set_pwm1_raw+1,f,c
  6336  004256  321A               	rrcf	??_set_pwm1_raw,f,c
  6337  004258  501A               	movf	??_set_pwm1_raw,w,c
  6338  00425A  6EBE               	movwf	4030,c	;volatile
  6339                           
  6340                           ;my_pwm.c: 17: CCP1CONbits.DC1B = raw_value & 0x0003;
  6341  00425C  C018  F01A         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  6342  004260  0E03               	movlw	3
  6343  004262  161A               	andwf	??_set_pwm1_raw,f,c
  6344  004264  3A1A               	swapf	??_set_pwm1_raw,f,c
  6345  004266  50BD               	movf	4029,w,c	;volatile
  6346  004268  181A               	xorwf	??_set_pwm1_raw,w,c
  6347  00426A  0BCF               	andlw	-49
  6348  00426C  181A               	xorwf	??_set_pwm1_raw,w,c
  6349  00426E  6EBD               	movwf	4029,c	;volatile
  6350  004270  0012               	return		;funcret
  6351  004272                     __end_of_set_pwm1_raw:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           postinc0	equ	0xFEE
  6360                           wreg	equ	0xFE8
  6361                           postdec1	equ	0xFE5
  6362                           fsr1l	equ	0xFE1
  6363                           indf2	equ	0xFDF
  6364                           postinc2	equ	0xFDE
  6365                           postdec2	equ	0xFDD
  6366                           fsr2h	equ	0xFDA
  6367                           fsr2l	equ	0xFD9
  6368                           status	equ	0xFD8
  6369                           
  6370 ;; *************** function _send_string_no_lib *****************
  6371 ;; Defined at:
  6372 ;;		line 47 in file "my_ser.c"
  6373 ;; Parameters:    Size  Location     Type
  6374 ;;  p               2   24[COMRAM] PTR unsigned char 
  6375 ;;		 -> STR_6(9), 
  6376 ;; Auto vars:     Size  Location     Type
  6377 ;;		None
  6378 ;; Return value:  Size  Location     Type
  6379 ;;                  1    wreg      void 
  6380 ;; Registers used:
  6381 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6382 ;; Tracked objects:
  6383 ;;		On entry : 0/0
  6384 ;;		On exit  : 0/0
  6385 ;;		Unchanged: 0/0
  6386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;Total ram usage:        2 bytes
  6392 ;; Hardware stack levels used:    1
  6393 ;; Hardware stack levels required when called:    4
  6394 ;; This function calls:
  6395 ;;		_send_byte_no_lib
  6396 ;; This function is called by:
  6397 ;;		_main
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text17
  6402  0042CE                     __ptext17:
  6403                           	opt stack 0
  6404  0042CE                     _send_string_no_lib:
  6405                           	opt stack 26
  6406                           
  6407                           ;my_ser.c: 48: while (*p) {
  6408                           
  6409                           ;incstack = 0
  6410  0042CE  D00A               	goto	l4421
  6411  0042D0                     l4417:
  6412                           
  6413                           ;my_ser.c: 49: send_byte_no_lib(*p);
  6414  0042D0  C019  FFF6         	movff	send_string_no_lib@p,tblptrl
  6415  0042D4  C01A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  6416  0042D8                     	if	0	;tblptru may be non-zero
  6417  0042D8                     	endif
  6418  0042D8                     	if	0	;tblptru may be non-zero
  6419  0042D8                     	endif
  6420  0042D8  0008               	tblrd		*
  6421  0042DA  50F5               	movf	tablat,w,c
  6422  0042DC  EC13  F022         	call	_send_byte_no_lib
  6423                           
  6424                           ;my_ser.c: 50: p++;
  6425  0042E0  4A19               	infsnz	send_string_no_lib@p,f,c
  6426  0042E2  2A1A               	incf	send_string_no_lib@p+1,f,c
  6427  0042E4                     l4421:
  6428  0042E4  C019  FFF6         	movff	send_string_no_lib@p,tblptrl
  6429  0042E8  C01A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  6430  0042EC                     	if	0	;tblptru may be non-zero
  6431  0042EC                     	endif
  6432  0042EC                     	if	0	;tblptru may be non-zero
  6433  0042EC                     	endif
  6434  0042EC  0008               	tblrd		*
  6435  0042EE  50F5               	movf	tablat,w,c
  6436  0042F0  0900               	iorlw	0
  6437  0042F2  B4D8               	btfsc	status,2,c
  6438  0042F4  0012               	return	
  6439  0042F6  D7EC               	goto	l4417
  6440  0042F8                     __end_of_send_string_no_lib:
  6441                           	opt stack 0
  6442                           tblptru	equ	0xFF8
  6443                           tblptrh	equ	0xFF7
  6444                           tblptrl	equ	0xFF6
  6445                           tablat	equ	0xFF5
  6446                           prodh	equ	0xFF4
  6447                           prodl	equ	0xFF3
  6448                           postinc0	equ	0xFEE
  6449                           wreg	equ	0xFE8
  6450                           postdec1	equ	0xFE5
  6451                           fsr1l	equ	0xFE1
  6452                           indf2	equ	0xFDF
  6453                           postinc2	equ	0xFDE
  6454                           postdec2	equ	0xFDD
  6455                           fsr2h	equ	0xFDA
  6456                           fsr2l	equ	0xFD9
  6457                           status	equ	0xFD8
  6458                           
  6459 ;; *************** function _send_byte_no_lib *****************
  6460 ;; Defined at:
  6461 ;;		line 39 in file "my_ser.c"
  6462 ;; Parameters:    Size  Location     Type
  6463 ;;  c               1    wreg     unsigned char 
  6464 ;; Auto vars:     Size  Location     Type
  6465 ;;  c               1   23[COMRAM] unsigned char 
  6466 ;; Return value:  Size  Location     Type
  6467 ;;                  1    wreg      void 
  6468 ;; Registers used:
  6469 ;;		wreg
  6470 ;; Tracked objects:
  6471 ;;		On entry : 0/0
  6472 ;;		On exit  : 0/0
  6473 ;;		Unchanged: 0/0
  6474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;Total ram usage:        1 bytes
  6480 ;; Hardware stack levels used:    1
  6481 ;; Hardware stack levels required when called:    3
  6482 ;; This function calls:
  6483 ;;		Nothing
  6484 ;; This function is called by:
  6485 ;;		_send_string_no_lib
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text18
  6490  004426                     __ptext18:
  6491                           	opt stack 0
  6492  004426                     _send_byte_no_lib:
  6493                           	opt stack 26
  6494                           
  6495                           ;incstack = 0
  6496                           ;send_byte_no_lib@c stored from wreg
  6497  004426  6E18               	movwf	send_byte_no_lib@c,c
  6498                           
  6499                           ;my_ser.c: 40: while (!TXSTAbits.TRMT)
  6500  004428  D001               	goto	l288
  6501  00442A                     l289:
  6502  00442A  0004               	clrwdt		;# 
  6503  00442C                     l288:
  6504  00442C  A2AC               	btfss	4012,1,c	;volatile
  6505  00442E  D7FD               	goto	l289
  6506                           
  6507                           ;my_ser.c: 43: }
  6508                           ;my_ser.c: 44: TXREG = c;
  6509  004430  C018  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  6510  004434  0012               	return		;funcret
  6511  004436                     __end_of_send_byte_no_lib:
  6512                           	opt stack 0
  6513                           tblptru	equ	0xFF8
  6514                           tblptrh	equ	0xFF7
  6515                           tblptrl	equ	0xFF6
  6516                           tablat	equ	0xFF5
  6517                           prodh	equ	0xFF4
  6518                           prodl	equ	0xFF3
  6519                           postinc0	equ	0xFEE
  6520                           wreg	equ	0xFE8
  6521                           postdec1	equ	0xFE5
  6522                           fsr1l	equ	0xFE1
  6523                           indf2	equ	0xFDF
  6524                           postinc2	equ	0xFDE
  6525                           postdec2	equ	0xFDD
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _read_byte_no_lib *****************
  6531 ;; Defined at:
  6532 ;;		line 33 in file "my_ser.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;  c               1   23[COMRAM] unsigned char 
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      unsigned char 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;Total ram usage:        1 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    3
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text19
  6561  004466                     __ptext19:
  6562                           	opt stack 0
  6563  004466                     _read_byte_no_lib:
  6564                           	opt stack 27
  6565                           
  6566                           ;my_ser.c: 34: unsigned char c;
  6567                           ;my_ser.c: 35: c = RCREG;
  6568                           
  6569                           ;incstack = 0
  6570  004466  CFAE F018          	movff	4014,read_byte_no_lib@c	;volatile
  6571                           
  6572                           ;my_ser.c: 36: return c;
  6573  00446A  5018               	movf	read_byte_no_lib@c,w,c
  6574  00446C  0012               	return	
  6575  00446E                     __end_of_read_byte_no_lib:
  6576                           	opt stack 0
  6577                           tblptru	equ	0xFF8
  6578                           tblptrh	equ	0xFF7
  6579                           tblptrl	equ	0xFF6
  6580                           tablat	equ	0xFF5
  6581                           prodh	equ	0xFF4
  6582                           prodl	equ	0xFF3
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           postdec1	equ	0xFE5
  6586                           fsr1l	equ	0xFE1
  6587                           indf2	equ	0xFDF
  6588                           postinc2	equ	0xFDE
  6589                           postdec2	equ	0xFDD
  6590                           fsr2h	equ	0xFDA
  6591                           fsr2l	equ	0xFD9
  6592                           status	equ	0xFD8
  6593                           
  6594 ;; *************** function _read_adc_voltage *****************
  6595 ;; Defined at:
  6596 ;;		line 49 in file "my_adc.c"
  6597 ;; Parameters:    Size  Location     Type
  6598 ;;  channel         1    wreg     unsigned char 
  6599 ;; Auto vars:     Size  Location     Type
  6600 ;;  channel         1   33[BANK0 ] unsigned char 
  6601 ;;  voltage         4   29[BANK0 ] float 
  6602 ;;  raw_value       2   34[BANK0 ] int 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  4   25[BANK0 ] float 
  6605 ;; Registers used:
  6606 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6612 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;Total ram usage:       11 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    4
  6619 ;; This function calls:
  6620 ;;		___fldiv
  6621 ;;		___wmul
  6622 ;;		___xxtofl
  6623 ;;		_read_adc_raw_no_lib
  6624 ;; This function is called by:
  6625 ;;		_main
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text20
  6630  003B52                     __ptext20:
  6631                           	opt stack 0
  6632  003B52                     _read_adc_voltage:
  6633                           	opt stack 26
  6634                           
  6635                           ;incstack = 0
  6636                           ;read_adc_voltage@channel stored from wreg
  6637  003B52  0100               	movlb	0	; () banked
  6638  003B54  6FA1               	movwf	read_adc_voltage@channel& (0+255),b
  6639                           
  6640                           ;my_adc.c: 50: int raw_value;
  6641                           ;my_adc.c: 51: float voltage;
  6642                           ;my_adc.c: 52: raw_value = read_adc_raw_no_lib(channel);
  6643  003B56  0100               	movlb	0	; () banked
  6644  003B58  51A1               	movf	read_adc_voltage@channel& (0+255),w,b
  6645  003B5A  ECD5  F020         	call	_read_adc_raw_no_lib
  6646  003B5E  C018  F0A2         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  6647  003B62  C019  F0A3         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  6648                           
  6649                           ;my_adc.c: 53: voltage = (raw_value * 5) / 1023.0;
  6650  003B66  C0A2  F018         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  6651  003B6A  C0A3  F019         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  6652  003B6E  0E00               	movlw	0
  6653  003B70  6E1B               	movwf	___wmul@multiplicand+1,c
  6654  003B72  0E05               	movlw	5
  6655  003B74  6E1A               	movwf	___wmul@multiplicand,c
  6656  003B76  EC7C  F021         	call	___wmul	;wreg free
  6657  003B7A  C018  F043         	movff	?___wmul,___xxtofl@val
  6658  003B7E  C019  F044         	movff	?___wmul+1,___xxtofl@val+1
  6659  003B82  0E00               	movlw	0
  6660  003B84  BE44               	btfsc	___xxtofl@val+1,7,c
  6661  003B86  0EFF               	movlw	-1
  6662  003B88  6E45               	movwf	___xxtofl@val+2,c
  6663  003B8A  6E46               	movwf	___xxtofl@val+3,c
  6664  003B8C  0E01               	movlw	1
  6665  003B8E  EC8E  F019         	call	___xxtofl
  6666  003B92  C043  F080         	movff	?___xxtofl,___fldiv@b
  6667  003B96  C044  F081         	movff	?___xxtofl+1,___fldiv@b+1
  6668  003B9A  C045  F082         	movff	?___xxtofl+2,___fldiv@b+2
  6669  003B9E  C046  F083         	movff	?___xxtofl+3,___fldiv@b+3
  6670  003BA2  0E00               	movlw	0
  6671  003BA4  0100               	movlb	0	; () banked
  6672  003BA6  6F84               	movwf	___fldiv@a& (0+255),b
  6673  003BA8  0EC0               	movlw	192
  6674  003BAA  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  6675  003BAC  0E7F               	movlw	127
  6676  003BAE  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  6677  003BB0  0E44               	movlw	68
  6678  003BB2  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  6679  003BB4  ECC5  F014         	call	___fldiv	;wreg free
  6680  003BB8  C080  F09D         	movff	?___fldiv,read_adc_voltage@voltage
  6681  003BBC  C081  F09E         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  6682  003BC0  C082  F09F         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  6683  003BC4  C083  F0A0         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  6684                           
  6685                           ;my_adc.c: 54: return voltage;
  6686  003BC8  C09D  F099         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  6687  003BCC  C09E  F09A         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  6688  003BD0  C09F  F09B         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  6689  003BD4  C0A0  F09C         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  6690  003BD8  0012               	return	
  6691  003BDA                     __end_of_read_adc_voltage:
  6692                           	opt stack 0
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           postdec1	equ	0xFE5
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           postinc2	equ	0xFDE
  6705                           postdec2	equ	0xFDD
  6706                           fsr2h	equ	0xFDA
  6707                           fsr2l	equ	0xFD9
  6708                           status	equ	0xFD8
  6709                           
  6710 ;; *************** function _read_adc_temp *****************
  6711 ;; Defined at:
  6712 ;;		line 62 in file "my_adc.c"
  6713 ;; Parameters:    Size  Location     Type
  6714 ;;  channel         1    wreg     unsigned char 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  channel         1   53[BANK0 ] unsigned char 
  6717 ;;  temp            4   49[BANK0 ] float 
  6718 ;;  raw_value       2   54[BANK0 ] int 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  4   45[BANK0 ] float 
  6721 ;; Registers used:
  6722 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6728 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;Total ram usage:       11 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    4
  6735 ;; This function calls:
  6736 ;;		___fladd
  6737 ;;		___fldiv
  6738 ;;		___wmul
  6739 ;;		___xxtofl
  6740 ;;		_read_adc_raw_no_lib
  6741 ;; This function is called by:
  6742 ;;		_main
  6743 ;; This function uses a non-reentrant model
  6744 ;;
  6745                           
  6746                           	psect	text21
  6747  003AA4                     __ptext21:
  6748                           	opt stack 0
  6749  003AA4                     _read_adc_temp:
  6750                           	opt stack 26
  6751                           
  6752                           ;incstack = 0
  6753                           ;read_adc_temp@channel stored from wreg
  6754  003AA4  0100               	movlb	0	; () banked
  6755  003AA6  6FB5               	movwf	read_adc_temp@channel& (0+255),b
  6756                           
  6757                           ;my_adc.c: 63: int raw_value;
  6758                           ;my_adc.c: 64: raw_value = read_adc_raw_no_lib(channel);
  6759  003AA8  0100               	movlb	0	; () banked
  6760  003AAA  51B5               	movf	read_adc_temp@channel& (0+255),w,b
  6761  003AAC  ECD5  F020         	call	_read_adc_raw_no_lib
  6762  003AB0  C018  F0B6         	movff	?_read_adc_raw_no_lib,read_adc_temp@raw_value
  6763  003AB4  C019  F0B7         	movff	?_read_adc_raw_no_lib+1,read_adc_temp@raw_value+1
  6764                           
  6765                           ;my_adc.c: 67: float temp ;
  6766                           ;my_adc.c: 68: temp = (raw_value * ( -10 - (50)) /1023.0 + (50));
  6767  003AB8  0E00               	movlw	0
  6768  003ABA  0100               	movlb	0	; () banked
  6769  003ABC  6F84               	movwf	___fldiv@a& (0+255),b
  6770  003ABE  0EC0               	movlw	192
  6771  003AC0  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  6772  003AC2  0E7F               	movlw	127
  6773  003AC4  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  6774  003AC6  0E44               	movlw	68
  6775  003AC8  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  6776  003ACA  C0B6  F018         	movff	read_adc_temp@raw_value,___wmul@multiplier
  6777  003ACE  C0B7  F019         	movff	read_adc_temp@raw_value+1,___wmul@multiplier+1
  6778  003AD2  0EFF               	movlw	255
  6779  003AD4  6E1B               	movwf	___wmul@multiplicand+1,c
  6780  003AD6  0EC4               	movlw	196
  6781  003AD8  6E1A               	movwf	___wmul@multiplicand,c
  6782  003ADA  EC7C  F021         	call	___wmul	;wreg free
  6783  003ADE  C018  F043         	movff	?___wmul,___xxtofl@val
  6784  003AE2  C019  F044         	movff	?___wmul+1,___xxtofl@val+1
  6785  003AE6  0E00               	movlw	0
  6786  003AE8  BE44               	btfsc	___xxtofl@val+1,7,c
  6787  003AEA  0EFF               	movlw	-1
  6788  003AEC  6E45               	movwf	___xxtofl@val+2,c
  6789  003AEE  6E46               	movwf	___xxtofl@val+3,c
  6790  003AF0  0E01               	movlw	1
  6791  003AF2  EC8E  F019         	call	___xxtofl
  6792  003AF6  C043  F080         	movff	?___xxtofl,___fldiv@b
  6793  003AFA  C044  F081         	movff	?___xxtofl+1,___fldiv@b+1
  6794  003AFE  C045  F082         	movff	?___xxtofl+2,___fldiv@b+2
  6795  003B02  C046  F083         	movff	?___xxtofl+3,___fldiv@b+3
  6796  003B06  ECC5  F014         	call	___fldiv	;wreg free
  6797  003B0A  C080  F099         	movff	?___fldiv,___fladd@b
  6798  003B0E  C081  F09A         	movff	?___fldiv+1,___fladd@b+1
  6799  003B12  C082  F09B         	movff	?___fldiv+2,___fladd@b+2
  6800  003B16  C083  F09C         	movff	?___fldiv+3,___fladd@b+3
  6801  003B1A  0E00               	movlw	0
  6802  003B1C  0100               	movlb	0	; () banked
  6803  003B1E  6F9D               	movwf	___fladd@a& (0+255),b
  6804  003B20  0E00               	movlw	0
  6805  003B22  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  6806  003B24  0E48               	movlw	72
  6807  003B26  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  6808  003B28  0E42               	movlw	66
  6809  003B2A  6FA0               	movwf	(___fladd@a+3)& (0+255),b
  6810  003B2C  EC4B  F00E         	call	___fladd	;wreg free
  6811  003B30  C099  F0B1         	movff	?___fladd,read_adc_temp@temp
  6812  003B34  C09A  F0B2         	movff	?___fladd+1,read_adc_temp@temp+1
  6813  003B38  C09B  F0B3         	movff	?___fladd+2,read_adc_temp@temp+2
  6814  003B3C  C09C  F0B4         	movff	?___fladd+3,read_adc_temp@temp+3
  6815                           
  6816                           ;my_adc.c: 69: return temp;
  6817  003B40  C0B1  F0AD         	movff	read_adc_temp@temp,?_read_adc_temp
  6818  003B44  C0B2  F0AE         	movff	read_adc_temp@temp+1,?_read_adc_temp+1
  6819  003B48  C0B3  F0AF         	movff	read_adc_temp@temp+2,?_read_adc_temp+2
  6820  003B4C  C0B4  F0B0         	movff	read_adc_temp@temp+3,?_read_adc_temp+3
  6821  003B50  0012               	return	
  6822  003B52                     __end_of_read_adc_temp:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           postinc0	equ	0xFEE
  6831                           wreg	equ	0xFE8
  6832                           postdec1	equ	0xFE5
  6833                           fsr1l	equ	0xFE1
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           
  6841 ;; *************** function _read_adc_raw_no_lib *****************
  6842 ;; Defined at:
  6843 ;;		line 32 in file "my_adc.c"
  6844 ;; Parameters:    Size  Location     Type
  6845 ;;  channel         1    wreg     unsigned char 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  channel         1   27[COMRAM] unsigned char 
  6848 ;;  raw_value       2   28[COMRAM] int 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  2   23[COMRAM] int 
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;Total ram usage:        7 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    3
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_main
  6869 ;;		_read_adc_voltage
  6870 ;;		_read_adc_temp
  6871 ;; This function uses a non-reentrant model
  6872 ;;
  6873                           
  6874                           	psect	text22
  6875  0041AA                     __ptext22:
  6876                           	opt stack 0
  6877  0041AA                     _read_adc_raw_no_lib:
  6878                           	opt stack 26
  6879                           
  6880                           ;incstack = 0
  6881                           ;read_adc_raw_no_lib@channel stored from wreg
  6882  0041AA  6E1C               	movwf	read_adc_raw_no_lib@channel,c
  6883                           
  6884                           ;my_adc.c: 33: int raw_value;
  6885                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  6886  0041AC  C01C  F01A         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  6887  0041B0  461A               	rlncf	??_read_adc_raw_no_lib,f,c
  6888  0041B2  461A               	rlncf	??_read_adc_raw_no_lib,f,c
  6889  0041B4  50C2               	movf	4034,w,c	;volatile
  6890  0041B6  181A               	xorwf	??_read_adc_raw_no_lib,w,c
  6891  0041B8  0BC3               	andlw	-61
  6892  0041BA  181A               	xorwf	??_read_adc_raw_no_lib,w,c
  6893  0041BC  6EC2               	movwf	4034,c	;volatile
  6894                           
  6895                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  6896  0041BE  82C2               	bsf	4034,1,c	;volatile
  6897  0041C0                     l210:
  6898  0041C0  B2C2               	btfsc	4034,1,c	;volatile
  6899  0041C2  D7FE               	goto	l210
  6900                           
  6901                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  6902  0041C4  50C3               	movf	4035,w,c	;volatile
  6903  0041C6  CFC4 F01A          	movff	4036,??_read_adc_raw_no_lib	;volatile
  6904  0041CA  6A1B               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  6905  0041CC  C01A  F01B         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  6906  0041D0  6A1A               	clrf	??_read_adc_raw_no_lib,c
  6907  0041D2  101A               	iorwf	??_read_adc_raw_no_lib,w,c
  6908  0041D4  6E1D               	movwf	read_adc_raw_no_lib@raw_value,c
  6909  0041D6  501B               	movf	??_read_adc_raw_no_lib+1,w,c
  6910  0041D8  6E1E               	movwf	read_adc_raw_no_lib@raw_value+1,c
  6911                           
  6912                           ;my_adc.c: 45: return raw_value;
  6913  0041DA  C01D  F018         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  6914  0041DE  C01E  F019         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  6915  0041E2  0012               	return	
  6916  0041E4                     __end_of_read_adc_raw_no_lib:
  6917                           	opt stack 0
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           postinc0	equ	0xFEE
  6925                           wreg	equ	0xFE8
  6926                           postdec1	equ	0xFE5
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           fsr2h	equ	0xFDA
  6932                           fsr2l	equ	0xFD9
  6933                           status	equ	0xFD8
  6934                           
  6935 ;; *************** function ___wmul *****************
  6936 ;; Defined at:
  6937 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6938 ;; Parameters:    Size  Location     Type
  6939 ;;  multiplier      2   23[COMRAM] unsigned int 
  6940 ;;  multiplicand    2   25[COMRAM] unsigned int 
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;  product         2   27[COMRAM] unsigned int 
  6943 ;; Return value:  Size  Location     Type
  6944 ;;                  2   23[COMRAM] unsigned int 
  6945 ;; Registers used:
  6946 ;;		wreg, status,2, status,0, prodl, prodh
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6955 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6956 ;;Total ram usage:        6 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:    3
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_read_adc_voltage
  6963 ;;		_read_adc_temp
  6964 ;;		_sprintf
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text23
  6969  0042F8                     __ptext23:
  6970                           	opt stack 0
  6971  0042F8                     ___wmul:
  6972                           	opt stack 26
  6973                           
  6974                           ;incstack = 0
  6975  0042F8  5018               	movf	___wmul@multiplier,w,c
  6976  0042FA  021A               	mulwf	___wmul@multiplicand,c
  6977  0042FC  CFF3 F01C          	movff	prodl,___wmul@product
  6978  004300  CFF4 F01D          	movff	prodh,___wmul@product+1
  6979  004304  5018               	movf	___wmul@multiplier,w,c
  6980  004306  021B               	mulwf	___wmul@multiplicand+1,c
  6981  004308  50F3               	movf	prodl,w,c
  6982  00430A  261D               	addwf	___wmul@product+1,f,c
  6983  00430C  5019               	movf	___wmul@multiplier+1,w,c
  6984  00430E  021A               	mulwf	___wmul@multiplicand,c
  6985  004310  50F3               	movf	prodl,w,c
  6986  004312  261D               	addwf	___wmul@product+1,f,c
  6987  004314  C01C  F018         	movff	___wmul@product,?___wmul
  6988  004318  C01D  F019         	movff	___wmul@product+1,?___wmul+1
  6989  00431C  0012               	return	
  6990  00431E                     __end_of___wmul:
  6991                           	opt stack 0
  6992                           tblptru	equ	0xFF8
  6993                           tblptrh	equ	0xFF7
  6994                           tblptrl	equ	0xFF6
  6995                           tablat	equ	0xFF5
  6996                           prodh	equ	0xFF4
  6997                           prodl	equ	0xFF3
  6998                           postinc0	equ	0xFEE
  6999                           wreg	equ	0xFE8
  7000                           postdec1	equ	0xFE5
  7001                           fsr1l	equ	0xFE1
  7002                           indf2	equ	0xFDF
  7003                           postinc2	equ	0xFDE
  7004                           postdec2	equ	0xFDD
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function ___fldiv *****************
  7010 ;; Defined at:
  7011 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcdiv.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;  b               4    0[BANK0 ] unsigned int 
  7014 ;;  a               4    4[BANK0 ] unsigned int 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  grs             4   19[BANK0 ] unsigned long 
  7017 ;;  rem             4   13[BANK0 ] unsigned long 
  7018 ;;  new_exp         2   17[BANK0 ] int 
  7019 ;;  aexp            1   24[BANK0 ] unsigned char 
  7020 ;;  bexp            1   23[BANK0 ] unsigned char 
  7021 ;;  sign            1   12[BANK0 ] unsigned char 
  7022 ;; Return value:  Size  Location     Type
  7023 ;;                  4    0[BANK0 ] unsigned char 
  7024 ;; Registers used:
  7025 ;;		wreg, status,2, status,0
  7026 ;; Tracked objects:
  7027 ;;		On entry : 0/0
  7028 ;;		On exit  : 0/0
  7029 ;;		Unchanged: 0/0
  7030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7031 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7032 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7033 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7034 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;Total ram usage:       25 bytes
  7036 ;; Hardware stack levels used:    1
  7037 ;; Hardware stack levels required when called:    3
  7038 ;; This function calls:
  7039 ;;		Nothing
  7040 ;; This function is called by:
  7041 ;;		_read_adc_voltage
  7042 ;;		_read_adc_temp
  7043 ;;		_set_pwm1_percent
  7044 ;;		_set_pwm1_voltage
  7045 ;;		_set_pwm1_general
  7046 ;; This function uses a non-reentrant model
  7047 ;;
  7048                           
  7049                           	psect	text24
  7050  00298A                     __ptext24:
  7051                           	opt stack 0
  7052  00298A                     ___fldiv:
  7053                           	opt stack 26
  7054                           
  7055                           ;incstack = 0
  7056  00298A  0100               	movlb	0	; () banked
  7057  00298C  5183               	movf	(___fldiv@b+3)& (0+255),w,b
  7058  00298E  0B80               	andlw	128
  7059  002990  0100               	movlb	0	; () banked
  7060  002992  6F8C               	movwf	___fldiv@sign& (0+255),b
  7061  002994  0100               	movlb	0	; () banked
  7062  002996  5183               	movf	(___fldiv@b+3)& (0+255),w,b
  7063  002998  2583               	addwf	(___fldiv@b+3)& (0+255),w,b
  7064  00299A  0100               	movlb	0	; () banked
  7065  00299C  6F97               	movwf	___fldiv@bexp& (0+255),b
  7066                           
  7067                           ; BSR set to: 0
  7068  00299E  0100               	movlb	0	; () banked
  7069  0029A0  AF82               	btfss	(___fldiv@b+2)& (0+255),7,b
  7070  0029A2  D002               	goto	l5145
  7071                           
  7072                           ; BSR set to: 0
  7073  0029A4  0100               	movlb	0	; () banked
  7074  0029A6  8197               	bsf	___fldiv@bexp& (0+255),0,b
  7075  0029A8                     l5145:
  7076                           
  7077                           ; BSR set to: 0
  7078  0029A8  0100               	movlb	0	; () banked
  7079  0029AA  5197               	movf	___fldiv@bexp& (0+255),w,b
  7080  0029AC  0100               	movlb	0	; () banked
  7081  0029AE  B4D8               	btfsc	status,2,c
  7082  0029B0  D012               	goto	l5155
  7083                           
  7084                           ; BSR set to: 0
  7085  0029B2  0100               	movlb	0	; () banked
  7086  0029B4  2997               	incf	___fldiv@bexp& (0+255),w,b
  7087  0029B6  A4D8               	btfss	status,2,c
  7088  0029B8  D009               	goto	l5151
  7089                           
  7090                           ; BSR set to: 0
  7091  0029BA  0E00               	movlw	0
  7092  0029BC  0100               	movlb	0	; () banked
  7093  0029BE  6F80               	movwf	___fldiv@b& (0+255),b
  7094  0029C0  0E00               	movlw	0
  7095  0029C2  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7096  0029C4  0E00               	movlw	0
  7097  0029C6  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7098  0029C8  0E00               	movlw	0
  7099  0029CA  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7100  0029CC                     l5151:
  7101                           
  7102                           ; BSR set to: 0
  7103  0029CC  0100               	movlb	0	; () banked
  7104  0029CE  8F82               	bsf	(___fldiv@b+2)& (0+255),7,b
  7105                           
  7106                           ; BSR set to: 0
  7107  0029D0  0E00               	movlw	0
  7108  0029D2  0100               	movlb	0	; () banked
  7109  0029D4  D008               	goto	L8
  7110  0029D6                     l5155:
  7111                           
  7112                           ; BSR set to: 0
  7113  0029D6  0E00               	movlw	0
  7114  0029D8  0100               	movlb	0	; () banked
  7115  0029DA  6F80               	movwf	___fldiv@b& (0+255),b
  7116  0029DC  0E00               	movlw	0
  7117  0029DE  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7118  0029E0  0E00               	movlw	0
  7119  0029E2  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7120  0029E4  0E00               	movlw	0
  7121  0029E6                     L8:
  7122  0029E6  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7123                           
  7124                           ; BSR set to: 0
  7125                           
  7126                           ; BSR set to: 0
  7127  0029E8  0100               	movlb	0	; () banked
  7128  0029EA  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7129  0029EC  0B80               	andlw	128
  7130  0029EE  0100               	movlb	0	; () banked
  7131  0029F0  1B8C               	xorwf	___fldiv@sign& (0+255),f,b
  7132                           
  7133                           ; BSR set to: 0
  7134  0029F2  0100               	movlb	0	; () banked
  7135  0029F4  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7136  0029F6  2587               	addwf	(___fldiv@a+3)& (0+255),w,b
  7137  0029F8  0100               	movlb	0	; () banked
  7138  0029FA  6F98               	movwf	___fldiv@aexp& (0+255),b
  7139                           
  7140                           ; BSR set to: 0
  7141  0029FC  0100               	movlb	0	; () banked
  7142  0029FE  AF86               	btfss	(___fldiv@a+2)& (0+255),7,b
  7143  002A00  D002               	goto	l5165
  7144                           
  7145                           ; BSR set to: 0
  7146  002A02  0100               	movlb	0	; () banked
  7147  002A04  8198               	bsf	___fldiv@aexp& (0+255),0,b
  7148  002A06                     l5165:
  7149                           
  7150                           ; BSR set to: 0
  7151  002A06  0100               	movlb	0	; () banked
  7152  002A08  5198               	movf	___fldiv@aexp& (0+255),w,b
  7153  002A0A  0100               	movlb	0	; () banked
  7154  002A0C  B4D8               	btfsc	status,2,c
  7155  002A0E  D012               	goto	l5175
  7156                           
  7157                           ; BSR set to: 0
  7158  002A10  0100               	movlb	0	; () banked
  7159  002A12  2998               	incf	___fldiv@aexp& (0+255),w,b
  7160  002A14  A4D8               	btfss	status,2,c
  7161  002A16  D009               	goto	l5171
  7162                           
  7163                           ; BSR set to: 0
  7164  002A18  0E00               	movlw	0
  7165  002A1A  0100               	movlb	0	; () banked
  7166  002A1C  6F84               	movwf	___fldiv@a& (0+255),b
  7167  002A1E  0E00               	movlw	0
  7168  002A20  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  7169  002A22  0E00               	movlw	0
  7170  002A24  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  7171  002A26  0E00               	movlw	0
  7172  002A28  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  7173  002A2A                     l5171:
  7174                           
  7175                           ; BSR set to: 0
  7176  002A2A  0100               	movlb	0	; () banked
  7177  002A2C  8F86               	bsf	(___fldiv@a+2)& (0+255),7,b
  7178                           
  7179                           ; BSR set to: 0
  7180  002A2E  0E00               	movlw	0
  7181  002A30  0100               	movlb	0	; () banked
  7182  002A32  D008               	goto	L9
  7183  002A34                     l5175:
  7184                           
  7185                           ; BSR set to: 0
  7186  002A34  0E00               	movlw	0
  7187  002A36  0100               	movlb	0	; () banked
  7188  002A38  6F84               	movwf	___fldiv@a& (0+255),b
  7189  002A3A  0E00               	movlw	0
  7190  002A3C  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  7191  002A3E  0E00               	movlw	0
  7192  002A40  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  7193  002A42  0E00               	movlw	0
  7194  002A44                     L9:
  7195  002A44  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  7196                           
  7197                           ; BSR set to: 0
  7198                           
  7199                           ; BSR set to: 0
  7200  002A46  0100               	movlb	0	; () banked
  7201  002A48  5184               	movf	___fldiv@a& (0+255),w,b
  7202  002A4A  0100               	movlb	0	; () banked
  7203  002A4C  1185               	iorwf	(___fldiv@a+1)& (0+255),w,b
  7204  002A4E  0100               	movlb	0	; () banked
  7205  002A50  1186               	iorwf	(___fldiv@a+2)& (0+255),w,b
  7206  002A52  0100               	movlb	0	; () banked
  7207  002A54  1187               	iorwf	(___fldiv@a+3)& (0+255),w,b
  7208  002A56  A4D8               	btfss	status,2,c
  7209  002A58  D017               	goto	l5187
  7210                           
  7211                           ; BSR set to: 0
  7212  002A5A  0E00               	movlw	0
  7213  002A5C  0100               	movlb	0	; () banked
  7214  002A5E  6F80               	movwf	___fldiv@b& (0+255),b
  7215  002A60  0E00               	movlw	0
  7216  002A62  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7217  002A64  0E00               	movlw	0
  7218  002A66  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7219  002A68  0E00               	movlw	0
  7220  002A6A  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7221                           
  7222                           ; BSR set to: 0
  7223  002A6C  0100               	movlb	0	; () banked
  7224  002A6E  0E80               	movlw	128
  7225  002A70  1382               	iorwf	(___fldiv@b+2)& (0+255),f,b
  7226  002A72  0E7F               	movlw	127
  7227  002A74  1383               	iorwf	(___fldiv@b+3)& (0+255),f,b
  7228                           
  7229                           ; BSR set to: 0
  7230  002A76  C080  F080         	movff	___fldiv@b,?___fldiv
  7231  002A7A  C081  F081         	movff	___fldiv@b+1,?___fldiv+1
  7232  002A7E  C082  F082         	movff	___fldiv@b+2,?___fldiv+2
  7233  002A82  C083  F083         	movff	___fldiv@b+3,?___fldiv+3
  7234                           
  7235                           ; BSR set to: 0
  7236  002A86  0012               	return	
  7237  002A88                     l5187:
  7238                           
  7239                           ; BSR set to: 0
  7240  002A88  0100               	movlb	0	; () banked
  7241  002A8A  5197               	movf	___fldiv@bexp& (0+255),w,b
  7242  002A8C  0100               	movlb	0	; () banked
  7243  002A8E  A4D8               	btfss	status,2,c
  7244  002A90  D012               	goto	l5195
  7245                           
  7246                           ; BSR set to: 0
  7247  002A92  0E00               	movlw	0
  7248  002A94  0100               	movlb	0	; () banked
  7249  002A96  6F80               	movwf	___fldiv@b& (0+255),b
  7250  002A98  0E00               	movlw	0
  7251  002A9A  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7252  002A9C  0E00               	movlw	0
  7253  002A9E  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7254  002AA0  0E00               	movlw	0
  7255  002AA2  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7256                           
  7257                           ; BSR set to: 0
  7258  002AA4  C080  F080         	movff	___fldiv@b,?___fldiv
  7259  002AA8  C081  F081         	movff	___fldiv@b+1,?___fldiv+1
  7260  002AAC  C082  F082         	movff	___fldiv@b+2,?___fldiv+2
  7261  002AB0  C083  F083         	movff	___fldiv@b+3,?___fldiv+3
  7262                           
  7263                           ; BSR set to: 0
  7264  002AB4  0012               	return	
  7265  002AB6                     l5195:
  7266                           
  7267                           ; BSR set to: 0
  7268  002AB6  0100               	movlb	0	; () banked
  7269  002AB8  5198               	movf	___fldiv@aexp& (0+255),w,b
  7270  002ABA  0100               	movlb	0	; () banked
  7271  002ABC  6F88               	movwf	??___fldiv& (0+255),b
  7272  002ABE  6B89               	clrf	(??___fldiv+1)& (0+255),b
  7273  002AC0  0100               	movlb	0	; () banked
  7274  002AC2  1F88               	comf	??___fldiv& (0+255),f,b
  7275  002AC4  1F89               	comf	(??___fldiv+1)& (0+255),f,b
  7276  002AC6  4B88               	infsnz	??___fldiv& (0+255),f,b
  7277  002AC8  2B89               	incf	(??___fldiv+1)& (0+255),f,b
  7278  002ACA  0100               	movlb	0	; () banked
  7279  002ACC  5197               	movf	___fldiv@bexp& (0+255),w,b
  7280  002ACE  0100               	movlb	0	; () banked
  7281  002AD0  6F8A               	movwf	(??___fldiv+2)& (0+255),b
  7282  002AD2  6B8B               	clrf	(??___fldiv+3)& (0+255),b
  7283  002AD4  0100               	movlb	0	; () banked
  7284  002AD6  5188               	movf	??___fldiv& (0+255),w,b
  7285  002AD8  0100               	movlb	0	; () banked
  7286  002ADA  278A               	addwf	(??___fldiv+2)& (0+255),f,b
  7287  002ADC  0100               	movlb	0	; () banked
  7288  002ADE  5189               	movf	(??___fldiv+1)& (0+255),w,b
  7289  002AE0  0100               	movlb	0	; () banked
  7290  002AE2  238B               	addwfc	(??___fldiv+3)& (0+255),f,b
  7291  002AE4  0E7F               	movlw	127
  7292  002AE6  0100               	movlb	0	; () banked
  7293  002AE8  258A               	addwf	(??___fldiv+2)& (0+255),w,b
  7294  002AEA  0100               	movlb	0	; () banked
  7295  002AEC  6F91               	movwf	___fldiv@new_exp& (0+255),b
  7296  002AEE  0E00               	movlw	0
  7297  002AF0  0100               	movlb	0	; () banked
  7298  002AF2  218B               	addwfc	(??___fldiv+3)& (0+255),w,b
  7299  002AF4  0100               	movlb	0	; () banked
  7300  002AF6  6F92               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7301                           
  7302                           ; BSR set to: 0
  7303  002AF8  C080  F08D         	movff	___fldiv@b,___fldiv@rem
  7304  002AFC  C081  F08E         	movff	___fldiv@b+1,___fldiv@rem+1
  7305  002B00  C082  F08F         	movff	___fldiv@b+2,___fldiv@rem+2
  7306  002B04  C083  F090         	movff	___fldiv@b+3,___fldiv@rem+3
  7307                           
  7308                           ; BSR set to: 0
  7309  002B08  0E00               	movlw	0
  7310  002B0A  0100               	movlb	0	; () banked
  7311  002B0C  6F80               	movwf	___fldiv@b& (0+255),b
  7312  002B0E  0E00               	movlw	0
  7313  002B10  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7314  002B12  0E00               	movlw	0
  7315  002B14  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7316  002B16  0E00               	movlw	0
  7317  002B18  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7318                           
  7319                           ; BSR set to: 0
  7320  002B1A  0E00               	movlw	0
  7321  002B1C  0100               	movlb	0	; () banked
  7322  002B1E  6F93               	movwf	___fldiv@grs& (0+255),b
  7323  002B20  0E00               	movlw	0
  7324  002B22  6F94               	movwf	(___fldiv@grs+1)& (0+255),b
  7325  002B24  0E00               	movlw	0
  7326  002B26  6F95               	movwf	(___fldiv@grs+2)& (0+255),b
  7327  002B28  0E00               	movlw	0
  7328  002B2A  6F96               	movwf	(___fldiv@grs+3)& (0+255),b
  7329                           
  7330                           ; BSR set to: 0
  7331  002B2C  0E00               	movlw	0
  7332  002B2E  0100               	movlb	0	; () banked
  7333  002B30  6F98               	movwf	___fldiv@aexp& (0+255),b
  7334  002B32  D042               	goto	l1051
  7335  002B34                     l5205:
  7336                           
  7337                           ; BSR set to: 0
  7338  002B34  0100               	movlb	0	; () banked
  7339  002B36  5198               	movf	___fldiv@aexp& (0+255),w,b
  7340  002B38  0100               	movlb	0	; () banked
  7341  002B3A  B4D8               	btfsc	status,2,c
  7342  002B3C  D017               	goto	l5213
  7343                           
  7344                           ; BSR set to: 0
  7345  002B3E  0100               	movlb	0	; () banked
  7346  002B40  90D8               	bcf	status,0,c
  7347  002B42  378D               	rlcf	___fldiv@rem& (0+255),f,b
  7348  002B44  378E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  7349  002B46  378F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  7350  002B48  3790               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  7351  002B4A  0100               	movlb	0	; () banked
  7352  002B4C  90D8               	bcf	status,0,c
  7353  002B4E  3780               	rlcf	___fldiv@b& (0+255),f,b
  7354  002B50  3781               	rlcf	(___fldiv@b+1)& (0+255),f,b
  7355  002B52  3782               	rlcf	(___fldiv@b+2)& (0+255),f,b
  7356  002B54  3783               	rlcf	(___fldiv@b+3)& (0+255),f,b
  7357                           
  7358                           ; BSR set to: 0
  7359  002B56  0100               	movlb	0	; () banked
  7360  002B58  AF96               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7361  002B5A  D002               	goto	l1054
  7362                           
  7363                           ; BSR set to: 0
  7364  002B5C  0100               	movlb	0	; () banked
  7365  002B5E  8180               	bsf	___fldiv@b& (0+255),0,b
  7366  002B60                     l1054:
  7367                           
  7368                           ; BSR set to: 0
  7369  002B60  0100               	movlb	0	; () banked
  7370  002B62  90D8               	bcf	status,0,c
  7371  002B64  3793               	rlcf	___fldiv@grs& (0+255),f,b
  7372  002B66  3794               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  7373  002B68  3795               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  7374  002B6A  3796               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  7375  002B6C                     l5213:
  7376                           
  7377                           ; BSR set to: 0
  7378  002B6C  0100               	movlb	0	; () banked
  7379  002B6E  5184               	movf	___fldiv@a& (0+255),w,b
  7380  002B70  0100               	movlb	0	; () banked
  7381  002B72  5D8D               	subwf	___fldiv@rem& (0+255),w,b
  7382  002B74  0100               	movlb	0	; () banked
  7383  002B76  5185               	movf	(___fldiv@a+1)& (0+255),w,b
  7384  002B78  0100               	movlb	0	; () banked
  7385  002B7A  598E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  7386  002B7C  0100               	movlb	0	; () banked
  7387  002B7E  5186               	movf	(___fldiv@a+2)& (0+255),w,b
  7388  002B80  0100               	movlb	0	; () banked
  7389  002B82  598F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  7390  002B84  0100               	movlb	0	; () banked
  7391  002B86  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7392  002B88  0100               	movlb	0	; () banked
  7393  002B8A  5990               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  7394  002B8C  A0D8               	btfss	status,0,c
  7395  002B8E  D012               	goto	l5219
  7396                           
  7397                           ; BSR set to: 0
  7398  002B90  0100               	movlb	0	; () banked
  7399  002B92  8D96               	bsf	(___fldiv@grs+3)& (0+255),6,b
  7400                           
  7401                           ; BSR set to: 0
  7402  002B94  0100               	movlb	0	; () banked
  7403  002B96  5184               	movf	___fldiv@a& (0+255),w,b
  7404  002B98  0100               	movlb	0	; () banked
  7405  002B9A  5F8D               	subwf	___fldiv@rem& (0+255),f,b
  7406  002B9C  0100               	movlb	0	; () banked
  7407  002B9E  5185               	movf	(___fldiv@a+1)& (0+255),w,b
  7408  002BA0  0100               	movlb	0	; () banked
  7409  002BA2  5B8E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  7410  002BA4  0100               	movlb	0	; () banked
  7411  002BA6  5186               	movf	(___fldiv@a+2)& (0+255),w,b
  7412  002BA8  0100               	movlb	0	; () banked
  7413  002BAA  5B8F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  7414  002BAC  0100               	movlb	0	; () banked
  7415  002BAE  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7416  002BB0  0100               	movlb	0	; () banked
  7417  002BB2  5B90               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  7418  002BB4                     l5219:
  7419                           
  7420                           ; BSR set to: 0
  7421  002BB4  0100               	movlb	0	; () banked
  7422  002BB6  2B98               	incf	___fldiv@aexp& (0+255),f,b
  7423  002BB8                     l1051:
  7424                           
  7425                           ; BSR set to: 0
  7426  002BB8  0E19               	movlw	25
  7427  002BBA  0100               	movlb	0	; () banked
  7428  002BBC  6598               	cpfsgt	___fldiv@aexp& (0+255),b
  7429  002BBE  D7BA               	goto	l5205
  7430                           
  7431                           ; BSR set to: 0
  7432                           
  7433                           ; BSR set to: 0
  7434  002BC0  0100               	movlb	0	; () banked
  7435  002BC2  518D               	movf	___fldiv@rem& (0+255),w,b
  7436  002BC4  0100               	movlb	0	; () banked
  7437  002BC6  118E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  7438  002BC8  0100               	movlb	0	; () banked
  7439  002BCA  118F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  7440  002BCC  0100               	movlb	0	; () banked
  7441  002BCE  1190               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  7442  002BD0  B4D8               	btfsc	status,2,c
  7443  002BD2  D018               	goto	l5231
  7444                           
  7445                           ; BSR set to: 0
  7446  002BD4  0100               	movlb	0	; () banked
  7447  002BD6  8193               	bsf	___fldiv@grs& (0+255),0,b
  7448                           
  7449                           ; BSR set to: 0
  7450  002BD8  D015               	goto	l5231
  7451  002BDA                     l5225:
  7452                           
  7453                           ; BSR set to: 0
  7454  002BDA  0100               	movlb	0	; () banked
  7455  002BDC  90D8               	bcf	status,0,c
  7456  002BDE  3780               	rlcf	___fldiv@b& (0+255),f,b
  7457  002BE0  3781               	rlcf	(___fldiv@b+1)& (0+255),f,b
  7458  002BE2  3782               	rlcf	(___fldiv@b+2)& (0+255),f,b
  7459  002BE4  3783               	rlcf	(___fldiv@b+3)& (0+255),f,b
  7460                           
  7461                           ; BSR set to: 0
  7462  002BE6  0100               	movlb	0	; () banked
  7463  002BE8  AF96               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7464  002BEA  D002               	goto	l1060
  7465                           
  7466                           ; BSR set to: 0
  7467  002BEC  0100               	movlb	0	; () banked
  7468  002BEE  8180               	bsf	___fldiv@b& (0+255),0,b
  7469  002BF0                     l1060:
  7470                           
  7471                           ; BSR set to: 0
  7472  002BF0  0100               	movlb	0	; () banked
  7473  002BF2  90D8               	bcf	status,0,c
  7474  002BF4  3793               	rlcf	___fldiv@grs& (0+255),f,b
  7475  002BF6  3794               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  7476  002BF8  3795               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  7477  002BFA  3796               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  7478  002BFC  0100               	movlb	0	; () banked
  7479  002BFE  0791               	decf	___fldiv@new_exp& (0+255),f,b
  7480  002C00  A0D8               	btfss	status,0,c
  7481  002C02  0792               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  7482  002C04                     l5231:
  7483                           
  7484                           ; BSR set to: 0
  7485  002C04  0100               	movlb	0	; () banked
  7486  002C06  AF82               	btfss	(___fldiv@b+2)& (0+255),7,b
  7487  002C08  D7E8               	goto	l5225
  7488                           
  7489                           ; BSR set to: 0
  7490                           
  7491                           ; BSR set to: 0
  7492  002C0A  0E00               	movlw	0
  7493  002C0C  0100               	movlb	0	; () banked
  7494  002C0E  6F98               	movwf	___fldiv@aexp& (0+255),b
  7495                           
  7496                           ; BSR set to: 0
  7497  002C10  0100               	movlb	0	; () banked
  7498  002C12  AF96               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7499  002C14  D024               	goto	l1062
  7500                           
  7501                           ; BSR set to: 0
  7502  002C16  0EFF               	movlw	255
  7503  002C18  0100               	movlb	0	; () banked
  7504  002C1A  1593               	andwf	___fldiv@grs& (0+255),w,b
  7505  002C1C  0100               	movlb	0	; () banked
  7506  002C1E  6F88               	movwf	??___fldiv& (0+255),b
  7507  002C20  0EFF               	movlw	255
  7508  002C22  0100               	movlb	0	; () banked
  7509  002C24  1594               	andwf	(___fldiv@grs+1)& (0+255),w,b
  7510  002C26  0100               	movlb	0	; () banked
  7511  002C28  6F89               	movwf	(??___fldiv+1)& (0+255),b
  7512  002C2A  0EFF               	movlw	255
  7513  002C2C  0100               	movlb	0	; () banked
  7514  002C2E  1595               	andwf	(___fldiv@grs+2)& (0+255),w,b
  7515  002C30  0100               	movlb	0	; () banked
  7516  002C32  6F8A               	movwf	(??___fldiv+2)& (0+255),b
  7517  002C34  0E7F               	movlw	127
  7518  002C36  0100               	movlb	0	; () banked
  7519  002C38  1596               	andwf	(___fldiv@grs+3)& (0+255),w,b
  7520  002C3A  0100               	movlb	0	; () banked
  7521  002C3C  6F8B               	movwf	(??___fldiv+3)& (0+255),b
  7522  002C3E  0100               	movlb	0	; () banked
  7523  002C40  5188               	movf	??___fldiv& (0+255),w,b
  7524  002C42  0100               	movlb	0	; () banked
  7525  002C44  1189               	iorwf	(??___fldiv+1)& (0+255),w,b
  7526  002C46  0100               	movlb	0	; () banked
  7527  002C48  118A               	iorwf	(??___fldiv+2)& (0+255),w,b
  7528  002C4A  0100               	movlb	0	; () banked
  7529  002C4C  118B               	iorwf	(??___fldiv+3)& (0+255),w,b
  7530  002C4E  A4D8               	btfss	status,2,c
  7531  002C50  D003               	goto	l5241
  7532                           
  7533                           ; BSR set to: 0
  7534                           
  7535                           ; BSR set to: 0
  7536  002C52  0100               	movlb	0	; () banked
  7537  002C54  A180               	btfss	___fldiv@b& (0+255),0,b
  7538  002C56  D003               	goto	l1062
  7539  002C58                     l5241:
  7540                           
  7541                           ; BSR set to: 0
  7542  002C58  0E01               	movlw	1
  7543  002C5A  0100               	movlb	0	; () banked
  7544  002C5C  6F98               	movwf	___fldiv@aexp& (0+255),b
  7545  002C5E                     l1062:
  7546                           
  7547                           ; BSR set to: 0
  7548  002C5E  0100               	movlb	0	; () banked
  7549  002C60  5198               	movf	___fldiv@aexp& (0+255),w,b
  7550  002C62  0100               	movlb	0	; () banked
  7551  002C64  B4D8               	btfsc	status,2,c
  7552  002C66  D023               	goto	l5251
  7553                           
  7554                           ; BSR set to: 0
  7555  002C68  0E01               	movlw	1
  7556  002C6A  0100               	movlb	0	; () banked
  7557  002C6C  2780               	addwf	___fldiv@b& (0+255),f,b
  7558  002C6E  0E00               	movlw	0
  7559  002C70  2381               	addwfc	(___fldiv@b+1)& (0+255),f,b
  7560  002C72  2382               	addwfc	(___fldiv@b+2)& (0+255),f,b
  7561  002C74  2383               	addwfc	(___fldiv@b+3)& (0+255),f,b
  7562                           
  7563                           ; BSR set to: 0
  7564  002C76  0100               	movlb	0	; () banked
  7565  002C78  A183               	btfss	(___fldiv@b+3)& (0+255),0,b
  7566  002C7A  D019               	goto	l5251
  7567                           
  7568                           ; BSR set to: 0
  7569  002C7C  C080  F088         	movff	___fldiv@b,??___fldiv
  7570  002C80  C081  F089         	movff	___fldiv@b+1,??___fldiv+1
  7571  002C84  C082  F08A         	movff	___fldiv@b+2,??___fldiv+2
  7572  002C88  C083  F08B         	movff	___fldiv@b+3,??___fldiv+3
  7573  002C8C  0100               	movlb	0	; () banked
  7574  002C8E  358B               	rlcf	(??___fldiv+3)& (0+255),w,b
  7575  002C90  338B               	rrcf	(??___fldiv+3)& (0+255),f,b
  7576  002C92  338A               	rrcf	(??___fldiv+2)& (0+255),f,b
  7577  002C94  3389               	rrcf	(??___fldiv+1)& (0+255),f,b
  7578  002C96  3388               	rrcf	??___fldiv& (0+255),f,b
  7579  002C98  C088  F080         	movff	??___fldiv,___fldiv@b
  7580  002C9C  C089  F081         	movff	??___fldiv+1,___fldiv@b+1
  7581  002CA0  C08A  F082         	movff	??___fldiv+2,___fldiv@b+2
  7582  002CA4  C08B  F083         	movff	??___fldiv+3,___fldiv@b+3
  7583                           
  7584                           ; BSR set to: 0
  7585  002CA8  0100               	movlb	0	; () banked
  7586  002CAA  4B91               	infsnz	___fldiv@new_exp& (0+255),f,b
  7587  002CAC  2B92               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  7588  002CAE                     l5251:
  7589                           
  7590                           ; BSR set to: 0
  7591  002CAE  0100               	movlb	0	; () banked
  7592  002CB0  BF92               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  7593  002CB2  D014               	goto	l5255
  7594  002CB4  0100               	movlb	0	; () banked
  7595  002CB6  5192               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  7596  002CB8  E104               	bnz	u6020
  7597  002CBA  0100               	movlb	0	; () banked
  7598  002CBC  2991               	incf	___fldiv@new_exp& (0+255),w,b
  7599  002CBE  A0D8               	btfss	status,0,c
  7600  002CC0  D00D               	goto	l5255
  7601  002CC2                     u6020:
  7602                           
  7603                           ; BSR set to: 0
  7604  002CC2  0E00               	movlw	0
  7605  002CC4  0100               	movlb	0	; () banked
  7606  002CC6  6F92               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7607  002CC8  6991               	setf	___fldiv@new_exp& (0+255),b
  7608  002CCA  0E00               	movlw	0
  7609  002CCC  0100               	movlb	0	; () banked
  7610  002CCE  6F80               	movwf	___fldiv@b& (0+255),b
  7611  002CD0  0E00               	movlw	0
  7612  002CD2  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7613  002CD4  0E00               	movlw	0
  7614  002CD6  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7615  002CD8  0E00               	movlw	0
  7616  002CDA  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7617  002CDC                     l5255:
  7618                           
  7619                           ; BSR set to: 0
  7620  002CDC  0100               	movlb	0	; () banked
  7621  002CDE  BF92               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  7622  002CE0  D007               	goto	l5257
  7623  002CE2  0100               	movlb	0	; () banked
  7624  002CE4  5192               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  7625  002CE6  E115               	bnz	l5259
  7626  002CE8  0100               	movlb	0	; () banked
  7627  002CEA  0591               	decf	___fldiv@new_exp& (0+255),w,b
  7628  002CEC  B0D8               	btfsc	status,0,c
  7629  002CEE  D011               	goto	l5259
  7630  002CF0                     l5257:
  7631                           
  7632                           ; BSR set to: 0
  7633  002CF0  0E00               	movlw	0
  7634  002CF2  0100               	movlb	0	; () banked
  7635  002CF4  6F92               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7636  002CF6  0E00               	movlw	0
  7637  002CF8  6F91               	movwf	___fldiv@new_exp& (0+255),b
  7638  002CFA  0E00               	movlw	0
  7639  002CFC  0100               	movlb	0	; () banked
  7640  002CFE  6F80               	movwf	___fldiv@b& (0+255),b
  7641  002D00  0E00               	movlw	0
  7642  002D02  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7643  002D04  0E00               	movlw	0
  7644  002D06  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7645  002D08  0E00               	movlw	0
  7646  002D0A  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7647  002D0C  0E00               	movlw	0
  7648  002D0E  0100               	movlb	0	; () banked
  7649  002D10  6F8C               	movwf	___fldiv@sign& (0+255),b
  7650  002D12                     l5259:
  7651                           
  7652                           ; BSR set to: 0
  7653  002D12  C091  F097         	movff	___fldiv@new_exp,___fldiv@bexp
  7654                           
  7655                           ; BSR set to: 0
  7656  002D16  0100               	movlb	0	; () banked
  7657  002D18  A197               	btfss	___fldiv@bexp& (0+255),0,b
  7658  002D1A  D003               	goto	l5265
  7659                           
  7660                           ; BSR set to: 0
  7661  002D1C  0100               	movlb	0	; () banked
  7662  002D1E  8F82               	bsf	(___fldiv@b+2)& (0+255),7,b
  7663  002D20  D002               	goto	l5267
  7664  002D22                     l5265:
  7665                           
  7666                           ; BSR set to: 0
  7667  002D22  0100               	movlb	0	; () banked
  7668  002D24  9F82               	bcf	(___fldiv@b+2)& (0+255),7,b
  7669  002D26                     l5267:
  7670                           
  7671                           ; BSR set to: 0
  7672  002D26  0100               	movlb	0	; () banked
  7673  002D28  90D8               	bcf	status,0,c
  7674  002D2A  3197               	rrcf	___fldiv@bexp& (0+255),w,b
  7675  002D2C  0100               	movlb	0	; () banked
  7676  002D2E  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7677                           
  7678                           ; BSR set to: 0
  7679  002D30  0100               	movlb	0	; () banked
  7680  002D32  518C               	movf	___fldiv@sign& (0+255),w,b
  7681  002D34  0100               	movlb	0	; () banked
  7682  002D36  1383               	iorwf	(___fldiv@b+3)& (0+255),f,b
  7683                           
  7684                           ; BSR set to: 0
  7685  002D38  C080  F080         	movff	___fldiv@b,?___fldiv
  7686  002D3C  C081  F081         	movff	___fldiv@b+1,?___fldiv+1
  7687  002D40  C082  F082         	movff	___fldiv@b+2,?___fldiv+2
  7688  002D44  C083  F083         	movff	___fldiv@b+3,?___fldiv+3
  7689  002D48  0012               	return	
  7690  002D4A                     __end_of___fldiv:
  7691                           	opt stack 0
  7692                           tblptru	equ	0xFF8
  7693                           tblptrh	equ	0xFF7
  7694                           tblptrl	equ	0xFF6
  7695                           tablat	equ	0xFF5
  7696                           prodh	equ	0xFF4
  7697                           prodl	equ	0xFF3
  7698                           postinc0	equ	0xFEE
  7699                           wreg	equ	0xFE8
  7700                           postdec1	equ	0xFE5
  7701                           fsr1l	equ	0xFE1
  7702                           indf2	equ	0xFDF
  7703                           postinc2	equ	0xFDE
  7704                           postdec2	equ	0xFDD
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8
  7708                           
  7709 ;; *************** function _lcd_puts *****************
  7710 ;; Defined at:
  7711 ;;		line 120 in file "lcd_x8.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  s               2   37[COMRAM] PTR unsigned char 
  7714 ;;		 -> main@Buffer(32), 
  7715 ;; Auto vars:     Size  Location     Type
  7716 ;;		None
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      void 
  7719 ;; Registers used:
  7720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7726 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7728 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;Total ram usage:        2 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    8
  7733 ;; This function calls:
  7734 ;;		_lcd_putc
  7735 ;; This function is called by:
  7736 ;;		_main
  7737 ;; This function uses a non-reentrant model
  7738 ;;
  7739                           
  7740                           	psect	text25
  7741  004368                     __ptext25:
  7742                           	opt stack 0
  7743  004368                     _lcd_puts:
  7744                           	opt stack 22
  7745                           
  7746                           ;lcd_x8.c: 121: while (*s) {
  7747                           
  7748                           ; BSR set to: 0
  7749                           ;incstack = 0
  7750  004368  D009               	goto	l4381
  7751  00436A                     l4377:
  7752                           
  7753                           ;lcd_x8.c: 122: lcd_putc(*s);
  7754  00436A  C026  FFD9         	movff	lcd_puts@s,fsr2l
  7755  00436E  C027  FFDA         	movff	lcd_puts@s+1,fsr2h
  7756  004372  50DF               	movf	indf2,w,c
  7757  004374  EC20  F020         	call	_lcd_putc
  7758                           
  7759                           ;lcd_x8.c: 123: s++;
  7760  004378  4A26               	infsnz	lcd_puts@s,f,c
  7761  00437A  2A27               	incf	lcd_puts@s+1,f,c
  7762  00437C                     l4381:
  7763  00437C  C026  FFD9         	movff	lcd_puts@s,fsr2l
  7764  004380  C027  FFDA         	movff	lcd_puts@s+1,fsr2h
  7765  004384  50DF               	movf	indf2,w,c
  7766  004386  B4D8               	btfsc	status,2,c
  7767  004388  0012               	return	
  7768  00438A  D7EF               	goto	l4377
  7769  00438C                     __end_of_lcd_puts:
  7770                           	opt stack 0
  7771                           tblptru	equ	0xFF8
  7772                           tblptrh	equ	0xFF7
  7773                           tblptrl	equ	0xFF6
  7774                           tablat	equ	0xFF5
  7775                           prodh	equ	0xFF4
  7776                           prodl	equ	0xFF3
  7777                           postinc0	equ	0xFEE
  7778                           wreg	equ	0xFE8
  7779                           postdec1	equ	0xFE5
  7780                           fsr1l	equ	0xFE1
  7781                           indf2	equ	0xFDF
  7782                           postinc2	equ	0xFDE
  7783                           postdec2	equ	0xFDD
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           
  7788 ;; *************** function _lcd_putc *****************
  7789 ;; Defined at:
  7790 ;;		line 106 in file "lcd_x8.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;  c               1    wreg     unsigned char 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  c               1   36[COMRAM] unsigned char 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;                  1    wreg      void 
  7797 ;; Registers used:
  7798 ;;		wreg, status,2, status,0, cstack
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;Total ram usage:        1 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; Hardware stack levels required when called:    7
  7811 ;; This function calls:
  7812 ;;		_delay_ms
  7813 ;;		_lcd_gotoxy
  7814 ;;		_lcd_send_byte
  7815 ;; This function is called by:
  7816 ;;		_main
  7817 ;;		_lcd_puts
  7818 ;; This function uses a non-reentrant model
  7819 ;;
  7820                           
  7821                           	psect	text26
  7822  004040                     __ptext26:
  7823                           	opt stack 0
  7824  004040                     _lcd_putc:
  7825                           	opt stack 22
  7826                           
  7827                           ;incstack = 0
  7828                           ;lcd_putc@c stored from wreg
  7829  004040  6E25               	movwf	lcd_putc@c,c
  7830                           
  7831                           ;lcd_x8.c: 107: switch (c) {
  7832  004042  D01E               	goto	l3407
  7833  004044                     l3397:
  7834  004044  0E01               	movlw	1
  7835  004046  6E20               	movwf	lcd_send_byte@n,c
  7836  004048  0E00               	movlw	0
  7837  00404A  EC6F  F020         	call	_lcd_send_byte
  7838                           
  7839                           ;lcd_x8.c: 109: delay_ms(2);
  7840  00404E  0E00               	movlw	0
  7841  004050  6E19               	movwf	delay_ms@n+1,c
  7842  004052  0E02               	movlw	2
  7843  004054  6E18               	movwf	delay_ms@n,c
  7844  004056  ECC6  F021         	call	_delay_ms	;wreg free
  7845                           
  7846                           ;lcd_x8.c: 110: break;
  7847  00405A  0012               	return	
  7848  00405C                     l3399:
  7849  00405C  0E02               	movlw	2
  7850  00405E  6E22               	movwf	lcd_gotoxy@y,c
  7851  004060  0E01               	movlw	1
  7852  004062  EC93  F020         	call	_lcd_gotoxy
  7853                           
  7854                           ;lcd_x8.c: 112: break;
  7855  004066  0012               	return	
  7856  004068                     l3401:
  7857  004068  0E10               	movlw	16
  7858  00406A  6E20               	movwf	lcd_send_byte@n,c
  7859  00406C  0E00               	movlw	0
  7860  00406E  EC6F  F020         	call	_lcd_send_byte
  7861                           
  7862                           ;lcd_x8.c: 114: break;
  7863  004072  0012               	return	
  7864  004074                     l3403:
  7865  004074  C025  F020         	movff	lcd_putc@c,lcd_send_byte@n
  7866  004078  0E01               	movlw	1
  7867  00407A  EC6F  F020         	call	_lcd_send_byte
  7868                           
  7869                           ;lcd_x8.c: 117: }
  7870                           
  7871                           ;lcd_x8.c: 116: break;
  7872  00407E  0012               	return	
  7873  004080                     l3407:
  7874  004080  5025               	movf	lcd_putc@c,w,c
  7875                           
  7876                           ; Switch size 1, requested type "space"
  7877                           ; Number of cases is 3, Range of values is 8 to 12
  7878                           ; switch strategies available:
  7879                           ; Name         Instructions Cycles
  7880                           ; simple_byte           10     6 (average)
  7881                           ;	Chosen strategy is simple_byte
  7882  004082  0A08               	xorlw	8	; case 8
  7883  004084  B4D8               	btfsc	status,2,c
  7884  004086  D7F0               	goto	l3401
  7885  004088  0A02               	xorlw	2	; case 10
  7886  00408A  B4D8               	btfsc	status,2,c
  7887  00408C  D7E7               	goto	l3399
  7888  00408E  0A06               	xorlw	6	; case 12
  7889  004090  B4D8               	btfsc	status,2,c
  7890  004092  D7D8               	goto	l3397
  7891  004094  D7EF               	goto	l3403
  7892  004096                     __end_of_lcd_putc:
  7893                           	opt stack 0
  7894                           tblptru	equ	0xFF8
  7895                           tblptrh	equ	0xFF7
  7896                           tblptrl	equ	0xFF6
  7897                           tablat	equ	0xFF5
  7898                           prodh	equ	0xFF4
  7899                           prodl	equ	0xFF3
  7900                           postinc0	equ	0xFEE
  7901                           wreg	equ	0xFE8
  7902                           postdec1	equ	0xFE5
  7903                           fsr1l	equ	0xFE1
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _lcd_gotoxy *****************
  7912 ;; Defined at:
  7913 ;;		line 89 in file "lcd_x8.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  x               1    wreg     unsigned char 
  7916 ;;  y               1   33[COMRAM] unsigned char 
  7917 ;; Auto vars:     Size  Location     Type
  7918 ;;  x               1   34[COMRAM] unsigned char 
  7919 ;;  address         1   35[COMRAM] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, status,2, status,0, cstack
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7929 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;Total ram usage:        3 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    6
  7936 ;; This function calls:
  7937 ;;		_lcd_send_byte
  7938 ;; This function is called by:
  7939 ;;		_main
  7940 ;;		_lcd_putc
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           	psect	text27
  7945  004126                     __ptext27:
  7946                           	opt stack 0
  7947  004126                     _lcd_gotoxy:
  7948                           	opt stack 22
  7949                           
  7950                           ;incstack = 0
  7951                           ;lcd_gotoxy@x stored from wreg
  7952  004126  6E23               	movwf	lcd_gotoxy@x,c
  7953                           
  7954                           ;lcd_x8.c: 90: unsigned char address;
  7955                           ;lcd_x8.c: 92: switch (y) {
  7956  004128  D009               	goto	l2977
  7957  00412A                     l2967:
  7958  00412A  0E80               	movlw	128
  7959  00412C  D005               	goto	L12
  7960  00412E                     l2969:
  7961  00412E  0EC0               	movlw	192
  7962  004130  D003               	goto	L12
  7963  004132                     l2971:
  7964  004132  0E90               	movlw	144
  7965  004134  D001               	goto	L12
  7966  004136                     l2973:
  7967  004136  0ED0               	movlw	208
  7968  004138                     L12:
  7969  004138  6E24               	movwf	lcd_gotoxy@address,c
  7970                           
  7971                           ;lcd_x8.c: 101: }
  7972                           
  7973                           ;lcd_x8.c: 100: break;
  7974  00413A  D00D               	goto	l2979
  7975  00413C                     l2977:
  7976  00413C  5022               	movf	lcd_gotoxy@y,w,c
  7977                           
  7978                           ; Switch size 1, requested type "space"
  7979                           ; Number of cases is 4, Range of values is 1 to 4
  7980                           ; switch strategies available:
  7981                           ; Name         Instructions Cycles
  7982                           ; simple_byte           13     7 (average)
  7983                           ;	Chosen strategy is simple_byte
  7984  00413E  0A01               	xorlw	1	; case 1
  7985  004140  B4D8               	btfsc	status,2,c
  7986  004142  D7F3               	goto	l2967
  7987  004144  0A03               	xorlw	3	; case 2
  7988  004146  B4D8               	btfsc	status,2,c
  7989  004148  D7F2               	goto	l2969
  7990  00414A  0A01               	xorlw	1	; case 3
  7991  00414C  B4D8               	btfsc	status,2,c
  7992  00414E  D7F1               	goto	l2971
  7993  004150  0A07               	xorlw	7	; case 4
  7994  004152  B4D8               	btfsc	status,2,c
  7995  004154  D7F0               	goto	l2973
  7996  004156                     l2979:
  7997                           
  7998                           ;lcd_x8.c: 102: address += x - 1;
  7999  004156  0423               	decf	lcd_gotoxy@x,w,c
  8000  004158  2624               	addwf	lcd_gotoxy@address,f,c
  8001                           
  8002                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  8003  00415A  5024               	movf	lcd_gotoxy@address,w,c
  8004  00415C  0980               	iorlw	128
  8005  00415E  6E20               	movwf	lcd_send_byte@n,c
  8006  004160  0E00               	movlw	0
  8007  004162  EC6F  F020         	call	_lcd_send_byte
  8008  004166  0012               	return		;funcret
  8009  004168                     __end_of_lcd_gotoxy:
  8010                           	opt stack 0
  8011                           tblptru	equ	0xFF8
  8012                           tblptrh	equ	0xFF7
  8013                           tblptrl	equ	0xFF6
  8014                           tablat	equ	0xFF5
  8015                           prodh	equ	0xFF4
  8016                           prodl	equ	0xFF3
  8017                           postinc0	equ	0xFEE
  8018                           wreg	equ	0xFE8
  8019                           postdec1	equ	0xFE5
  8020                           fsr1l	equ	0xFE1
  8021                           indf2	equ	0xFDF
  8022                           postinc2	equ	0xFDE
  8023                           postdec2	equ	0xFDD
  8024                           fsr2h	equ	0xFDA
  8025                           fsr2l	equ	0xFD9
  8026                           status	equ	0xFD8
  8027                           
  8028 ;; *************** function _lcd_init *****************
  8029 ;; Defined at:
  8030 ;;		line 56 in file "lcd_x8.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;		None
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  i               1   33[COMRAM] unsigned char 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/0
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8047 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8048 ;;Total ram usage:        1 bytes
  8049 ;; Hardware stack levels used:    1
  8050 ;; Hardware stack levels required when called:    6
  8051 ;; This function calls:
  8052 ;;		_delay_ms
  8053 ;;		_lcd_send_byte
  8054 ;;		_lcd_send_nibble
  8055 ;; This function is called by:
  8056 ;;		_main
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           	psect	text28
  8061  003F1E                     __ptext28:
  8062                           	opt stack 0
  8063  003F1E                     _lcd_init:
  8064                           	opt stack 24
  8065                           
  8066                           ;lcd_x8.c: 58: unsigned char i;
  8067                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  8068                           
  8069                           ;incstack = 0
  8070  003F1E  9484               	bcf	3972,2,c	;volatile
  8071                           
  8072                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  8073  003F20  9284               	bcf	3972,1,c	;volatile
  8074                           
  8075                           ;lcd_x8.c: 65: delay_ms(25);
  8076  003F22  0E00               	movlw	0
  8077  003F24  6E19               	movwf	delay_ms@n+1,c
  8078  003F26  0E19               	movlw	25
  8079  003F28  6E18               	movwf	delay_ms@n,c
  8080  003F2A  ECC6  F021         	call	_delay_ms	;wreg free
  8081                           
  8082                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  8083  003F2E  0E01               	movlw	1
  8084  003F30  6E22               	movwf	lcd_init@i,c
  8085  003F32                     l3993:
  8086  003F32  0E03               	movlw	3
  8087  003F34  6422               	cpfsgt	lcd_init@i,c
  8088  003F36  D001               	goto	l3997
  8089  003F38  D00B               	goto	l4003
  8090  003F3A                     l3997:
  8091                           
  8092                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  8093  003F3A  0E03               	movlw	3
  8094  003F3C  ECD8  F021         	call	_lcd_send_nibble
  8095                           
  8096                           ;lcd_x8.c: 69: delay_ms(6);
  8097  003F40  0E00               	movlw	0
  8098  003F42  6E19               	movwf	delay_ms@n+1,c
  8099  003F44  0E06               	movlw	6
  8100  003F46  6E18               	movwf	delay_ms@n,c
  8101  003F48  ECC6  F021         	call	_delay_ms	;wreg free
  8102  003F4C  2A22               	incf	lcd_init@i,f,c
  8103  003F4E  D7F1               	goto	l3993
  8104  003F50                     l4003:
  8105                           
  8106                           ;lcd_x8.c: 70: }
  8107                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  8108  003F50  0E02               	movlw	2
  8109  003F52  ECD8  F021         	call	_lcd_send_nibble
  8110                           
  8111                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  8112  003F56  0E00               	movlw	0
  8113  003F58  6E22               	movwf	lcd_init@i,c
  8114  003F5A                     l4007:
  8115  003F5A  0E03               	movlw	3
  8116  003F5C  6422               	cpfsgt	lcd_init@i,c
  8117  003F5E  D001               	goto	l4011
  8118  003F60  0012               	return	
  8119  003F62                     l4011:
  8120                           
  8121                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  8122  003F62  5022               	movf	lcd_init@i,w,c
  8123  003F64  0D01               	mullw	1
  8124  003F66  0E61               	movlw	low _LCD_INIT_STRING
  8125  003F68  24F3               	addwf	prodl,w,c
  8126  003F6A  6ED9               	movwf	fsr2l,c
  8127  003F6C  0E00               	movlw	high _LCD_INIT_STRING
  8128  003F6E  20F4               	addwfc	prodh,w,c
  8129  003F70  6EDA               	movwf	fsr2h,c
  8130  003F72  50DF               	movf	indf2,w,c
  8131  003F74  6E20               	movwf	lcd_send_byte@n,c
  8132  003F76  0E00               	movlw	0
  8133  003F78  EC6F  F020         	call	_lcd_send_byte
  8134  003F7C  2A22               	incf	lcd_init@i,f,c
  8135  003F7E  D7ED               	goto	l4007
  8136  003F80                     __end_of_lcd_init:
  8137                           	opt stack 0
  8138                           tblptru	equ	0xFF8
  8139                           tblptrh	equ	0xFF7
  8140                           tblptrl	equ	0xFF6
  8141                           tablat	equ	0xFF5
  8142                           prodh	equ	0xFF4
  8143                           prodl	equ	0xFF3
  8144                           postinc0	equ	0xFEE
  8145                           wreg	equ	0xFE8
  8146                           postdec1	equ	0xFE5
  8147                           fsr1l	equ	0xFE1
  8148                           indf2	equ	0xFDF
  8149                           postinc2	equ	0xFDE
  8150                           postdec2	equ	0xFDD
  8151                           fsr2h	equ	0xFDA
  8152                           fsr2l	equ	0xFD9
  8153                           status	equ	0xFD8
  8154                           
  8155 ;; *************** function _lcd_send_byte *****************
  8156 ;; Defined at:
  8157 ;;		line 39 in file "lcd_x8.c"
  8158 ;; Parameters:    Size  Location     Type
  8159 ;;  cm_data         1    wreg     unsigned char 
  8160 ;;  n               1   31[COMRAM] unsigned char 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  cm_data         1   32[COMRAM] unsigned char 
  8163 ;; Return value:  Size  Location     Type
  8164 ;;                  1    wreg      void 
  8165 ;; Registers used:
  8166 ;;		wreg, status,2, status,0, cstack
  8167 ;; Tracked objects:
  8168 ;;		On entry : 0/0
  8169 ;;		On exit  : 0/0
  8170 ;;		Unchanged: 0/0
  8171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8172 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8173 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;Total ram usage:        2 bytes
  8177 ;; Hardware stack levels used:    1
  8178 ;; Hardware stack levels required when called:    5
  8179 ;; This function calls:
  8180 ;;		_delay_cycles
  8181 ;;		_delay_ms
  8182 ;;		_lcd_send_nibble
  8183 ;; This function is called by:
  8184 ;;		_lcd_init
  8185 ;;		_lcd_gotoxy
  8186 ;;		_lcd_putc
  8187 ;;		_Lcd_Shift_Right
  8188 ;;		_Lcd_Shift_Left
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           	psect	text29
  8193  0040DE                     __ptext29:
  8194                           	opt stack 0
  8195  0040DE                     _lcd_send_byte:
  8196                           	opt stack 23
  8197                           
  8198                           ;incstack = 0
  8199                           ;lcd_send_byte@cm_data stored from wreg
  8200  0040DE  6E21               	movwf	lcd_send_byte@cm_data,c
  8201                           
  8202                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  8203  0040E0  B021               	btfsc	lcd_send_byte@cm_data,0,c
  8204  0040E2  D002               	bra	u2565
  8205  0040E4  9484               	bcf	3972,2,c	;volatile
  8206  0040E6  D001               	bra	u2566
  8207  0040E8                     u2565:
  8208  0040E8  8484               	bsf	3972,2,c	;volatile
  8209  0040EA                     u2566:
  8210                           
  8211                           ;lcd_x8.c: 44: delay_cycles(1);
  8212  0040EA  0E01               	movlw	1
  8213  0040EC  EC39  F021         	call	_delay_cycles
  8214                           
  8215                           ;lcd_x8.c: 46: delay_cycles(1);
  8216  0040F0  0E01               	movlw	1
  8217  0040F2  EC39  F021         	call	_delay_cycles
  8218                           
  8219                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  8220  0040F6  9284               	bcf	3972,1,c	;volatile
  8221                           
  8222                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  8223  0040F8  3820               	swapf	lcd_send_byte@n,w,c
  8224  0040FA  0B0F               	andlw	15
  8225  0040FC  ECD8  F021         	call	_lcd_send_nibble
  8226                           
  8227                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  8228  004100  5020               	movf	lcd_send_byte@n,w,c
  8229  004102  0B0F               	andlw	15
  8230  004104  ECD8  F021         	call	_lcd_send_nibble
  8231                           
  8232                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  8233  004108  5021               	movf	lcd_send_byte@cm_data,w,c
  8234  00410A  B4D8               	btfsc	status,2,c
  8235  00410C  D005               	goto	l2963
  8236  00410E  0E32               	movlw	50
  8237  004110                     u6857:
  8238  004110  0004               	clrwdt	
  8239  004112  2EE8               	decfsz	wreg,f,c
  8240  004114  D7FD               	goto	u6857
  8241  004116  0012               	return	
  8242  004118                     l2963:
  8243                           
  8244                           ;lcd_x8.c: 51: else
  8245                           ;lcd_x8.c: 52: delay_ms(2);
  8246  004118  0E00               	movlw	0
  8247  00411A  6E19               	movwf	delay_ms@n+1,c
  8248  00411C  0E02               	movlw	2
  8249  00411E  6E18               	movwf	delay_ms@n,c
  8250  004120  ECC6  F021         	call	_delay_ms	;wreg free
  8251  004124  0012               	return	
  8252  004126                     __end_of_lcd_send_byte:
  8253                           	opt stack 0
  8254                           tblptru	equ	0xFF8
  8255                           tblptrh	equ	0xFF7
  8256                           tblptrl	equ	0xFF6
  8257                           tablat	equ	0xFF5
  8258                           prodh	equ	0xFF4
  8259                           prodl	equ	0xFF3
  8260                           postinc0	equ	0xFEE
  8261                           wreg	equ	0xFE8
  8262                           postdec1	equ	0xFE5
  8263                           fsr1l	equ	0xFE1
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function _lcd_send_nibble *****************
  8272 ;; Defined at:
  8273 ;;		line 29 in file "lcd_x8.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  n               1    wreg     unsigned char 
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;  n               1   30[COMRAM] unsigned char 
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  1    wreg      void 
  8280 ;; Registers used:
  8281 ;;		wreg, status,2, status,0, cstack
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;Total ram usage:        2 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    4
  8294 ;; This function calls:
  8295 ;;		_delay_cycles
  8296 ;; This function is called by:
  8297 ;;		_lcd_send_byte
  8298 ;;		_lcd_init
  8299 ;; This function uses a non-reentrant model
  8300 ;;
  8301                           
  8302                           	psect	text30
  8303  0043B0                     __ptext30:
  8304                           	opt stack 0
  8305  0043B0                     _lcd_send_nibble:
  8306                           	opt stack 23
  8307                           
  8308                           ;incstack = 0
  8309                           ;lcd_send_nibble@n stored from wreg
  8310  0043B0  6E1F               	movwf	lcd_send_nibble@n,c
  8311                           
  8312                           ;lcd_x8.c: 31: lcd.data = n;
  8313  0043B2  C01F  F01E         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  8314  0043B6  3A1E               	swapf	??_lcd_send_nibble,f,c
  8315  0043B8  5083               	movf	3971,w,c
  8316  0043BA  181E               	xorwf	??_lcd_send_nibble,w,c
  8317  0043BC  0B0F               	andlw	-241
  8318  0043BE  181E               	xorwf	??_lcd_send_nibble,w,c
  8319  0043C0  6E83               	movwf	3971,c
  8320                           
  8321                           ;lcd_x8.c: 33: delay_cycles(1);
  8322  0043C2  0E01               	movlw	1
  8323  0043C4  EC39  F021         	call	_delay_cycles
  8324                           
  8325                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  8326  0043C8  8284               	bsf	3972,1,c	;volatile
  8327                           
  8328                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  8329  0043CA  0004               	clrwdt	
  8330  0043CC  F000               	nop		;2 cycle nop
  8331                           
  8332                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  8333  0043CE  9284               	bcf	3972,1,c	;volatile
  8334  0043D0  0012               	return		;funcret
  8335  0043D2                     __end_of_lcd_send_nibble:
  8336                           	opt stack 0
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           prodh	equ	0xFF4
  8342                           prodl	equ	0xFF3
  8343                           postinc0	equ	0xFEE
  8344                           wreg	equ	0xFE8
  8345                           postdec1	equ	0xFE5
  8346                           fsr1l	equ	0xFE1
  8347                           indf2	equ	0xFDF
  8348                           postinc2	equ	0xFDE
  8349                           postdec2	equ	0xFDD
  8350                           fsr2h	equ	0xFDA
  8351                           fsr2l	equ	0xFD9
  8352                           status	equ	0xFD8
  8353                           
  8354 ;; *************** function _delay_cycles *****************
  8355 ;; Defined at:
  8356 ;;		line 20 in file "lcd_x8.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  n               1    wreg     unsigned char 
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  n               1   26[COMRAM] unsigned char 
  8361 ;;  x               2   27[COMRAM] int 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2, status,0
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8375 ;;Total ram usage:        6 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:    3
  8378 ;; This function calls:
  8379 ;;		Nothing
  8380 ;; This function is called by:
  8381 ;;		_lcd_send_nibble
  8382 ;;		_lcd_send_byte
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           	psect	text31
  8387  004272                     __ptext31:
  8388                           	opt stack 0
  8389  004272                     _delay_cycles:
  8390                           	opt stack 23
  8391                           
  8392                           ;incstack = 0
  8393                           ;delay_cycles@n stored from wreg
  8394  004272  6E1B               	movwf	delay_cycles@n,c
  8395                           
  8396                           ;lcd_x8.c: 21: int x;
  8397                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  8398  004274  0E00               	movlw	0
  8399  004276  6E1D               	movwf	delay_cycles@x+1,c
  8400  004278  0E00               	movlw	0
  8401  00427A  6E1C               	movwf	delay_cycles@x,c
  8402  00427C  D003               	goto	l2929
  8403  00427E                     l147:
  8404  00427E  0004               	clrwdt		;# 
  8405  004280  4A1C               	infsnz	delay_cycles@x,f,c
  8406  004282  2A1D               	incf	delay_cycles@x+1,f,c
  8407  004284                     l2929:
  8408  004284  501B               	movf	delay_cycles@n,w,c
  8409  004286  6E18               	movwf	??_delay_cycles& (0+255),c
  8410  004288  6A19               	clrf	(??_delay_cycles+1)& (0+255),c
  8411  00428A  501C               	movf	delay_cycles@x,w,c
  8412  00428C  5C18               	subwf	??_delay_cycles,w,c
  8413  00428E  5019               	movf	??_delay_cycles+1,w,c
  8414  004290  0A80               	xorlw	128
  8415  004292  6E1A               	movwf	(??_delay_cycles+2)& (0+255),c
  8416  004294  501D               	movf	delay_cycles@x+1,w,c
  8417  004296  0A80               	xorlw	128
  8418  004298  581A               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  8419  00429A  A0D8               	btfss	status,0,c
  8420  00429C  0012               	return	
  8421  00429E  D7EF               	goto	l147
  8422  0042A0                     __end_of_delay_cycles:
  8423                           	opt stack 0
  8424                           tblptru	equ	0xFF8
  8425                           tblptrh	equ	0xFF7
  8426                           tblptrl	equ	0xFF6
  8427                           tablat	equ	0xFF5
  8428                           prodh	equ	0xFF4
  8429                           prodl	equ	0xFF3
  8430                           postinc0	equ	0xFEE
  8431                           wreg	equ	0xFE8
  8432                           postdec1	equ	0xFE5
  8433                           fsr1l	equ	0xFE1
  8434                           indf2	equ	0xFDF
  8435                           postinc2	equ	0xFDE
  8436                           postdec2	equ	0xFDD
  8437                           fsr2h	equ	0xFDA
  8438                           fsr2l	equ	0xFD9
  8439                           status	equ	0xFD8
  8440                           
  8441 ;; *************** function _delay_ms *****************
  8442 ;; Defined at:
  8443 ;;		line 12 in file "lcd_x8.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  n               2   23[COMRAM] unsigned int 
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;  x               2   25[COMRAM] int 
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		wreg, status,2, status,0
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;Total ram usage:        4 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    3
  8464 ;; This function calls:
  8465 ;;		Nothing
  8466 ;; This function is called by:
  8467 ;;		_main
  8468 ;;		_lcd_send_byte
  8469 ;;		_lcd_init
  8470 ;;		_lcd_putc
  8471 ;; This function uses a non-reentrant model
  8472 ;;
  8473                           
  8474                           	psect	text32
  8475  00438C                     __ptext32:
  8476                           	opt stack 0
  8477  00438C                     _delay_ms:
  8478                           	opt stack 24
  8479                           
  8480                           ;lcd_x8.c: 13: int x;
  8481                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  8482                           
  8483                           ;incstack = 0
  8484  00438C  0E00               	movlw	0
  8485  00438E  6E1B               	movwf	delay_ms@x+1,c
  8486  004390  0E00               	movlw	0
  8487  004392  6E1A               	movwf	delay_ms@x,c
  8488  004394  D006               	goto	l140
  8489  004396                     l2933:
  8490                           
  8491                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  8492  004396  0EFA               	movlw	250
  8493  004398                     u6867:
  8494  004398  0004               	clrwdt	
  8495  00439A  2EE8               	decfsz	wreg,f,c
  8496  00439C  D7FD               	goto	u6867
  8497  00439E  4A1A               	infsnz	delay_ms@x,f,c
  8498  0043A0  2A1B               	incf	delay_ms@x+1,f,c
  8499  0043A2                     l140:
  8500  0043A2  501A               	movf	delay_ms@x,w,c
  8501  0043A4  5C18               	subwf	delay_ms@n,w,c
  8502  0043A6  501B               	movf	delay_ms@x+1,w,c
  8503  0043A8  5819               	subwfb	delay_ms@n+1,w,c
  8504  0043AA  A0D8               	btfss	status,0,c
  8505  0043AC  0012               	return	
  8506  0043AE  D7F3               	goto	l2933
  8507  0043B0                     __end_of_delay_ms:
  8508                           	opt stack 0
  8509                           tblptru	equ	0xFF8
  8510                           tblptrh	equ	0xFF7
  8511                           tblptrl	equ	0xFF6
  8512                           tablat	equ	0xFF5
  8513                           prodh	equ	0xFF4
  8514                           prodl	equ	0xFF3
  8515                           postinc0	equ	0xFEE
  8516                           wreg	equ	0xFE8
  8517                           postdec1	equ	0xFE5
  8518                           fsr1l	equ	0xFE1
  8519                           indf2	equ	0xFDF
  8520                           postinc2	equ	0xFDE
  8521                           postdec2	equ	0xFDD
  8522                           fsr2h	equ	0xFDA
  8523                           fsr2l	equ	0xFD9
  8524                           status	equ	0xFD8
  8525                           
  8526 ;; *************** function _is_byte_available *****************
  8527 ;; Defined at:
  8528 ;;		line 21 in file "my_ser.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;		None
  8533 ;; Return value:  Size  Location     Type
  8534 ;;                  1    wreg      unsigned char 
  8535 ;; Registers used:
  8536 ;;		wreg
  8537 ;; Tracked objects:
  8538 ;;		On entry : 0/0
  8539 ;;		On exit  : 0/0
  8540 ;;		Unchanged: 0/0
  8541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8546 ;;Total ram usage:        0 bytes
  8547 ;; Hardware stack levels used:    1
  8548 ;; Hardware stack levels required when called:    3
  8549 ;; This function calls:
  8550 ;;		Nothing
  8551 ;; This function is called by:
  8552 ;;		_main
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           	psect	text33
  8557  00440E                     __ptext33:
  8558                           	opt stack 0
  8559  00440E                     _is_byte_available:
  8560                           	opt stack 27
  8561                           
  8562                           ;my_ser.c: 23: if (RCSTAbits.FERR || RCSTAbits.OERR)
  8563                           
  8564                           ;incstack = 0
  8565  00440E  B4AB               	btfsc	4011,2,c	;volatile
  8566  004410  D002               	goto	l279
  8567  004412  A2AB               	btfss	4011,1,c	;volatile
  8568  004414  D002               	goto	l277
  8569  004416                     l279:
  8570                           
  8571                           ;my_ser.c: 24: {
  8572                           ;my_ser.c: 25: RCSTAbits.CREN = 0;
  8573  004416  98AB               	bcf	4011,4,c	;volatile
  8574                           
  8575                           ;my_ser.c: 26: RCSTAbits.CREN = 1;
  8576  004418  88AB               	bsf	4011,4,c	;volatile
  8577  00441A                     l277:
  8578                           
  8579                           ;my_ser.c: 27: }
  8580                           ;my_ser.c: 29: if (PIR1bits.RCIF) return 1;
  8581  00441A  AA9E               	btfss	3998,5,c	;volatile
  8582  00441C  D002               	goto	l4069
  8583  00441E  0E01               	movlw	1
  8584  004420  0012               	return	
  8585  004422                     l4069:
  8586                           
  8587                           ;my_ser.c: 30: else return 0;
  8588  004422  0E00               	movlw	0
  8589  004424  0012               	return	
  8590  004426                     __end_of_is_byte_available:
  8591                           	opt stack 0
  8592                           tblptru	equ	0xFF8
  8593                           tblptrh	equ	0xFF7
  8594                           tblptrl	equ	0xFF6
  8595                           tablat	equ	0xFF5
  8596                           prodh	equ	0xFF4
  8597                           prodl	equ	0xFF3
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec1	equ	0xFE5
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function _init_pwm1 *****************
  8610 ;; Defined at:
  8611 ;;		line 5 in file "my_pwm.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;		None
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;		None
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  1    wreg      void 
  8618 ;; Registers used:
  8619 ;;		wreg, status,2
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;Total ram usage:        0 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    3
  8632 ;; This function calls:
  8633 ;;		Nothing
  8634 ;; This function is called by:
  8635 ;;		_main
  8636 ;; This function uses a non-reentrant model
  8637 ;;
  8638                           
  8639                           	psect	text34
  8640  004436                     __ptext34:
  8641                           	opt stack 0
  8642  004436                     _init_pwm1:
  8643                           	opt stack 27
  8644                           
  8645                           ;my_pwm.c: 7: PR2 = 255;
  8646                           
  8647                           ;incstack = 0
  8648  004436  68CB               	setf	4043,c	;volatile
  8649                           
  8650                           ;my_pwm.c: 8: T2CON = 0;
  8651  004438  0E00               	movlw	0
  8652  00443A  6ECA               	movwf	4042,c	;volatile
  8653                           
  8654                           ;my_pwm.c: 9: CCP1CON = 0x0C;
  8655  00443C  0E0C               	movlw	12
  8656  00443E  6EBD               	movwf	4029,c	;volatile
  8657                           
  8658                           ;my_pwm.c: 11: T2CONbits.TMR2ON = 1;
  8659  004440  84CA               	bsf	4042,2,c	;volatile
  8660                           
  8661                           ;my_pwm.c: 12: TRISCbits.RC2 =0;
  8662  004442  9494               	bcf	3988,2,c	;volatile
  8663  004444  0012               	return		;funcret
  8664  004446                     __end_of_init_pwm1:
  8665                           	opt stack 0
  8666                           tblptru	equ	0xFF8
  8667                           tblptrh	equ	0xFF7
  8668                           tblptrl	equ	0xFF6
  8669                           tablat	equ	0xFF5
  8670                           prodh	equ	0xFF4
  8671                           prodl	equ	0xFF3
  8672                           postinc0	equ	0xFEE
  8673                           wreg	equ	0xFE8
  8674                           postdec1	equ	0xFE5
  8675                           fsr1l	equ	0xFE1
  8676                           indf2	equ	0xFDF
  8677                           postinc2	equ	0xFDE
  8678                           postdec2	equ	0xFDD
  8679                           fsr2h	equ	0xFDA
  8680                           fsr2l	equ	0xFD9
  8681                           status	equ	0xFD8
  8682                           
  8683 ;; *************** function _init_adc_no_lib *****************
  8684 ;; Defined at:
  8685 ;;		line 11 in file "my_adc.c"
  8686 ;; Parameters:    Size  Location     Type
  8687 ;;		None
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;                  1    wreg      void 
  8692 ;; Registers used:
  8693 ;;		wreg, status,2
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;Total ram usage:        0 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; Hardware stack levels required when called:    3
  8706 ;; This function calls:
  8707 ;;		Nothing
  8708 ;; This function is called by:
  8709 ;;		_main
  8710 ;; This function uses a non-reentrant model
  8711 ;;
  8712                           
  8713                           	psect	text35
  8714  004446                     __ptext35:
  8715                           	opt stack 0
  8716  004446                     _init_adc_no_lib:
  8717                           	opt stack 27
  8718                           
  8719                           ;my_adc.c: 14: ADCON0 = 0;
  8720                           
  8721                           ;incstack = 0
  8722  004446  0E00               	movlw	0
  8723  004448  6EC2               	movwf	4034,c	;volatile
  8724                           
  8725                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  8726  00444A  80C2               	bsf	4034,0,c	;volatile
  8727                           
  8728                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  8729  00444C  0E89               	movlw	137
  8730  00444E  6EC0               	movwf	4032,c	;volatile
  8731  004450  0012               	return		;funcret
  8732  004452                     __end_of_init_adc_no_lib:
  8733                           	opt stack 0
  8734                           tblptru	equ	0xFF8
  8735                           tblptrh	equ	0xFF7
  8736                           tblptrl	equ	0xFF6
  8737                           tablat	equ	0xFF5
  8738                           prodh	equ	0xFF4
  8739                           prodl	equ	0xFF3
  8740                           postinc0	equ	0xFEE
  8741                           wreg	equ	0xFE8
  8742                           postdec1	equ	0xFE5
  8743                           fsr1l	equ	0xFE1
  8744                           indf2	equ	0xFDF
  8745                           postinc2	equ	0xFDE
  8746                           postdec2	equ	0xFDD
  8747                           fsr2h	equ	0xFDA
  8748                           fsr2l	equ	0xFD9
  8749                           status	equ	0xFD8
  8750                           
  8751 ;; *************** function _initTimers01 *****************
  8752 ;; Defined at:
  8753 ;;		line 48 in file "timer.c"
  8754 ;; Parameters:    Size  Location     Type
  8755 ;;		None
  8756 ;; Auto vars:     Size  Location     Type
  8757 ;;		None
  8758 ;; Return value:  Size  Location     Type
  8759 ;;                  2   36[None  ] int 
  8760 ;; Registers used:
  8761 ;;		wreg, status,2, cstack
  8762 ;; Tracked objects:
  8763 ;;		On entry : 0/0
  8764 ;;		On exit  : 0/0
  8765 ;;		Unchanged: 0/0
  8766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;Total ram usage:        0 bytes
  8772 ;; Hardware stack levels used:    1
  8773 ;; Hardware stack levels required when called:    4
  8774 ;; This function calls:
  8775 ;;		_reloadTimer1
  8776 ;; This function is called by:
  8777 ;;		_main
  8778 ;; This function uses a non-reentrant model
  8779 ;;
  8780                           
  8781                           	psect	text36
  8782  0041E4                     __ptext36:
  8783                           	opt stack 0
  8784  0041E4                     _initTimers01:
  8785                           	opt stack 26
  8786                           
  8787                           ;timer.c: 49: count_t1=0;
  8788                           
  8789                           ;incstack = 0
  8790  0041E4  0E00               	movlw	0
  8791  0041E6  6E56               	movwf	_count_t1+1,c
  8792  0041E8  0E00               	movlw	0
  8793  0041EA  6E55               	movwf	_count_t1,c
  8794                           
  8795                           ;timer.c: 52: INTCON = 0;
  8796  0041EC  0E00               	movlw	0
  8797  0041EE  6EF2               	movwf	intcon,c	;volatile
  8798                           
  8799                           ;timer.c: 53: PORTD = 0;
  8800  0041F0  0E00               	movlw	0
  8801  0041F2  6E83               	movwf	3971,c	;volatile
  8802                           
  8803                           ;timer.c: 54: T1CON = 0x30 ;
  8804  0041F4  0E30               	movlw	48
  8805  0041F6  6ECD               	movwf	4045,c	;volatile
  8806                           
  8807                           ;timer.c: 58: reloadTimer1();
  8808  0041F8  EC29  F022         	call	_reloadTimer1	;wreg free
  8809                           
  8810                           ;timer.c: 59: RCONbits.IPEN = 0;
  8811  0041FC  9ED0               	bcf	4048,7,c	;volatile
  8812                           
  8813                           ;timer.c: 60: PIE1 = 0;
  8814  0041FE  0E00               	movlw	0
  8815  004200  6E9D               	movwf	3997,c	;volatile
  8816                           
  8817                           ;timer.c: 62: PIE1bits.TMR1IE = 1;
  8818  004202  809D               	bsf	3997,0,c	;volatile
  8819                           
  8820                           ;timer.c: 63: PIE1bits.RCIE = 1;
  8821  004204  8A9D               	bsf	3997,5,c	;volatile
  8822                           
  8823                           ;timer.c: 64: PIR1 =0;
  8824  004206  0E00               	movlw	0
  8825  004208  6E9E               	movwf	3998,c	;volatile
  8826                           
  8827                           ;timer.c: 66: PIE2 =0;
  8828  00420A  0E00               	movlw	0
  8829  00420C  6EA0               	movwf	4000,c	;volatile
  8830                           
  8831                           ;timer.c: 68: INTCONbits.GIEH = 1;
  8832  00420E  8EF2               	bsf	intcon,7,c	;volatile
  8833                           
  8834                           ;timer.c: 69: INTCONbits.GIEL = 1;
  8835  004210  8CF2               	bsf	intcon,6,c	;volatile
  8836                           
  8837                           ;timer.c: 70: T1CONbits.TMR1ON = 1;
  8838  004212  80CD               	bsf	4045,0,c	;volatile
  8839  004214  0012               	return		;funcret
  8840  004216                     __end_of_initTimers01:
  8841                           	opt stack 0
  8842                           tblptru	equ	0xFF8
  8843                           tblptrh	equ	0xFF7
  8844                           tblptrl	equ	0xFF6
  8845                           tablat	equ	0xFF5
  8846                           prodh	equ	0xFF4
  8847                           prodl	equ	0xFF3
  8848                           intcon	equ	0xFF2
  8849                           postinc0	equ	0xFEE
  8850                           wreg	equ	0xFE8
  8851                           postdec1	equ	0xFE5
  8852                           fsr1l	equ	0xFE1
  8853                           indf2	equ	0xFDF
  8854                           postinc2	equ	0xFDE
  8855                           postdec2	equ	0xFDD
  8856                           fsr2h	equ	0xFDA
  8857                           fsr2l	equ	0xFD9
  8858                           status	equ	0xFD8
  8859                           
  8860 ;; *************** function _reloadTimer1 *****************
  8861 ;; Defined at:
  8862 ;;		line 16 in file "timer.c"
  8863 ;; Parameters:    Size  Location     Type
  8864 ;;		None
  8865 ;; Auto vars:     Size  Location     Type
  8866 ;;		None
  8867 ;; Return value:  Size  Location     Type
  8868 ;;                  1    wreg      void 
  8869 ;; Registers used:
  8870 ;;		wreg, status,2
  8871 ;; Tracked objects:
  8872 ;;		On entry : 0/0
  8873 ;;		On exit  : 0/0
  8874 ;;		Unchanged: 0/0
  8875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8880 ;;Total ram usage:        0 bytes
  8881 ;; Hardware stack levels used:    1
  8882 ;; Hardware stack levels required when called:    3
  8883 ;; This function calls:
  8884 ;;		Nothing
  8885 ;; This function is called by:
  8886 ;;		_initTimers01
  8887 ;; This function uses a non-reentrant model
  8888 ;;
  8889                           
  8890                           	psect	text37
  8891  004452                     __ptext37:
  8892                           	opt stack 0
  8893  004452                     _reloadTimer1:
  8894                           	opt stack 26
  8895                           
  8896                           ;timer.c: 18: TMR1H = (unsigned char) ((40536 >> 8) & 0x00FF);
  8897                           
  8898                           ;incstack = 0
  8899  004452  0E9E               	movlw	158
  8900  004454  6ECF               	movwf	4047,c	;volatile
  8901                           
  8902                           ;timer.c: 19: TMR1L = (unsigned char)(40536 & 0x00FF );
  8903  004456  0E58               	movlw	88
  8904  004458  6ECE               	movwf	4046,c	;volatile
  8905  00445A  0012               	return		;funcret
  8906  00445C                     __end_of_reloadTimer1:
  8907                           	opt stack 0
  8908                           tblptru	equ	0xFF8
  8909                           tblptrh	equ	0xFF7
  8910                           tblptrl	equ	0xFF6
  8911                           tablat	equ	0xFF5
  8912                           prodh	equ	0xFF4
  8913                           prodl	equ	0xFF3
  8914                           intcon	equ	0xFF2
  8915                           postinc0	equ	0xFEE
  8916                           wreg	equ	0xFE8
  8917                           postdec1	equ	0xFE5
  8918                           fsr1l	equ	0xFE1
  8919                           indf2	equ	0xFDF
  8920                           postinc2	equ	0xFDE
  8921                           postdec2	equ	0xFDD
  8922                           fsr2h	equ	0xFDA
  8923                           fsr2l	equ	0xFD9
  8924                           status	equ	0xFD8
  8925                           
  8926 ;; *************** function _floor *****************
  8927 ;; Defined at:
  8928 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
  8929 ;; Parameters:    Size  Location     Type
  8930 ;;  x               4   45[BANK0 ] void 
  8931 ;; Auto vars:     Size  Location     Type
  8932 ;;  i               4   49[BANK0 ] void 
  8933 ;;  expon           2   53[BANK0 ] int 
  8934 ;; Return value:  Size  Location     Type
  8935 ;;                  4   45[BANK0 ] int 
  8936 ;; Registers used:
  8937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8938 ;; Tracked objects:
  8939 ;;		On entry : 0/0
  8940 ;;		On exit  : 0/0
  8941 ;;		Unchanged: 0/0
  8942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8943 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8946 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8947 ;;Total ram usage:       10 bytes
  8948 ;; Hardware stack levels used:    1
  8949 ;; Hardware stack levels required when called:    4
  8950 ;; This function calls:
  8951 ;;		___fladd
  8952 ;;		___flge
  8953 ;;		___fltol
  8954 ;;		___xxtofl
  8955 ;;		_frexp
  8956 ;; This function is called by:
  8957 ;;		_main
  8958 ;; This function uses a non-reentrant model
  8959 ;;
  8960                           
  8961                           	psect	text38
  8962  0037E6                     __ptext38:
  8963                           	opt stack 0
  8964  0037E6                     _floor:
  8965                           	opt stack 26
  8966                           
  8967                           ;incstack = 0
  8968  0037E6  C0AD  F018         	movff	floor@x,frexp@value
  8969  0037EA  C0AE  F019         	movff	floor@x+1,frexp@value+1
  8970  0037EE  C0AF  F01A         	movff	floor@x+2,frexp@value+2
  8971  0037F2  C0B0  F01B         	movff	floor@x+3,frexp@value+3
  8972  0037F6  0EB5               	movlw	low floor@expon
  8973  0037F8  6E1C               	movwf	frexp@eptr,c
  8974  0037FA  0E00               	movlw	high floor@expon
  8975  0037FC  6E1D               	movwf	frexp@eptr+1,c
  8976  0037FE  ECAF  F01E         	call	_frexp	;wreg free
  8977  003802  0100               	movlb	0	; () banked
  8978  003804  AFB6               	btfss	(floor@expon+1)& (0+255),7,b
  8979  003806  D017               	goto	l5639
  8980                           
  8981                           ; BSR set to: 0
  8982  003808  0100               	movlb	0	; () banked
  8983  00380A  AFB0               	btfss	(floor@x+3)& (0+255),7,b
  8984  00380C  D00A               	goto	l5635
  8985                           
  8986                           ; BSR set to: 0
  8987  00380E  0E00               	movlw	0
  8988  003810  0100               	movlb	0	; () banked
  8989  003812  6FAD               	movwf	?_floor& (0+255),b
  8990  003814  0E00               	movlw	0
  8991  003816  6FAE               	movwf	(?_floor+1)& (0+255),b
  8992  003818  0E80               	movlw	128
  8993  00381A  6FAF               	movwf	(?_floor+2)& (0+255),b
  8994  00381C  0EBF               	movlw	191
  8995  00381E  6FB0               	movwf	(?_floor+3)& (0+255),b
  8996                           
  8997                           ; BSR set to: 0
  8998  003820  0012               	return	
  8999  003822                     l5635:
  9000                           
  9001                           ; BSR set to: 0
  9002  003822  0E00               	movlw	0
  9003  003824  0100               	movlb	0	; () banked
  9004  003826  6FAD               	movwf	?_floor& (0+255),b
  9005  003828  0E00               	movlw	0
  9006  00382A  6FAE               	movwf	(?_floor+1)& (0+255),b
  9007  00382C  0E00               	movlw	0
  9008  00382E  6FAF               	movwf	(?_floor+2)& (0+255),b
  9009  003830  0E00               	movlw	0
  9010  003832  6FB0               	movwf	(?_floor+3)& (0+255),b
  9011                           
  9012                           ; BSR set to: 0
  9013  003834  0012               	return	
  9014  003836                     l5639:
  9015                           
  9016                           ; BSR set to: 0
  9017  003836  0100               	movlb	0	; () banked
  9018  003838  51B6               	movf	(floor@expon+1)& (0+255),w,b
  9019  00383A  E105               	bnz	u6660
  9020  00383C  0E1D               	movlw	29
  9021  00383E  0100               	movlb	0	; () banked
  9022  003840  5DB5               	subwf	floor@expon& (0+255),w,b
  9023  003842  A0D8               	btfss	status,0,c
  9024  003844  D009               	goto	l5643
  9025  003846                     u6660:
  9026                           
  9027                           ; BSR set to: 0
  9028  003846  C0AD  F0AD         	movff	floor@x,?_floor
  9029  00384A  C0AE  F0AE         	movff	floor@x+1,?_floor+1
  9030  00384E  C0AF  F0AF         	movff	floor@x+2,?_floor+2
  9031  003852  C0B0  F0B0         	movff	floor@x+3,?_floor+3
  9032  003856  0012               	return	
  9033  003858                     l5643:
  9034                           
  9035                           ; BSR set to: 0
  9036  003858  C0AD  F039         	movff	floor@x,___fltol@f1
  9037  00385C  C0AE  F03A         	movff	floor@x+1,___fltol@f1+1
  9038  003860  C0AF  F03B         	movff	floor@x+2,___fltol@f1+2
  9039  003864  C0B0  F03C         	movff	floor@x+3,___fltol@f1+3
  9040  003868  EC82  F01C         	call	___fltol	;wreg free
  9041  00386C  C039  F043         	movff	?___fltol,___xxtofl@val
  9042  003870  C03A  F044         	movff	?___fltol+1,___xxtofl@val+1
  9043  003874  C03B  F045         	movff	?___fltol+2,___xxtofl@val+2
  9044  003878  C03C  F046         	movff	?___fltol+3,___xxtofl@val+3
  9045  00387C  0E01               	movlw	1
  9046  00387E  EC8E  F019         	call	___xxtofl
  9047  003882  C043  F0B1         	movff	?___xxtofl,floor@i
  9048  003886  C044  F0B2         	movff	?___xxtofl+1,floor@i+1
  9049  00388A  C045  F0B3         	movff	?___xxtofl+2,floor@i+2
  9050  00388E  C046  F0B4         	movff	?___xxtofl+3,floor@i+3
  9051  003892  C0AD  F039         	movff	floor@x,___flge@ff1
  9052  003896  C0AE  F03A         	movff	floor@x+1,___flge@ff1+1
  9053  00389A  C0AF  F03B         	movff	floor@x+2,___flge@ff1+2
  9054  00389E  C0B0  F03C         	movff	floor@x+3,___flge@ff1+3
  9055  0038A2  C0B1  F03D         	movff	floor@i,___flge@ff2
  9056  0038A6  C0B2  F03E         	movff	floor@i+1,___flge@ff2+1
  9057  0038AA  C0B3  F03F         	movff	floor@i+2,___flge@ff2+2
  9058  0038AE  C0B4  F040         	movff	floor@i+3,___flge@ff2+3
  9059  0038B2  EC63  F01B         	call	___flge	;wreg free
  9060  0038B6  B0D8               	btfsc	status,0,c
  9061  0038B8  D01C               	goto	l740
  9062  0038BA  C0B1  F099         	movff	floor@i,___fladd@b
  9063  0038BE  C0B2  F09A         	movff	floor@i+1,___fladd@b+1
  9064  0038C2  C0B3  F09B         	movff	floor@i+2,___fladd@b+2
  9065  0038C6  C0B4  F09C         	movff	floor@i+3,___fladd@b+3
  9066  0038CA  0E00               	movlw	0
  9067  0038CC  0100               	movlb	0	; () banked
  9068  0038CE  6F9D               	movwf	___fladd@a& (0+255),b
  9069  0038D0  0E00               	movlw	0
  9070  0038D2  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  9071  0038D4  0E80               	movlw	128
  9072  0038D6  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  9073  0038D8  0EBF               	movlw	191
  9074  0038DA  6FA0               	movwf	(___fladd@a+3)& (0+255),b
  9075  0038DC  EC4B  F00E         	call	___fladd	;wreg free
  9076  0038E0  C099  F0AD         	movff	?___fladd,?_floor
  9077  0038E4  C09A  F0AE         	movff	?___fladd+1,?_floor+1
  9078  0038E8  C09B  F0AF         	movff	?___fladd+2,?_floor+2
  9079  0038EC  C09C  F0B0         	movff	?___fladd+3,?_floor+3
  9080  0038F0  0012               	return	
  9081  0038F2                     l740:
  9082  0038F2  C0B1  F0AD         	movff	floor@i,?_floor
  9083  0038F6  C0B2  F0AE         	movff	floor@i+1,?_floor+1
  9084  0038FA  C0B3  F0AF         	movff	floor@i+2,?_floor+2
  9085  0038FE  C0B4  F0B0         	movff	floor@i+3,?_floor+3
  9086  003902  0012               	return		;funcret
  9087  003904                     __end_of_floor:
  9088                           	opt stack 0
  9089                           tblptru	equ	0xFF8
  9090                           tblptrh	equ	0xFF7
  9091                           tblptrl	equ	0xFF6
  9092                           tablat	equ	0xFF5
  9093                           prodh	equ	0xFF4
  9094                           prodl	equ	0xFF3
  9095                           intcon	equ	0xFF2
  9096                           postinc0	equ	0xFEE
  9097                           wreg	equ	0xFE8
  9098                           postdec1	equ	0xFE5
  9099                           fsr1l	equ	0xFE1
  9100                           indf2	equ	0xFDF
  9101                           postinc2	equ	0xFDE
  9102                           postdec2	equ	0xFDD
  9103                           fsr2h	equ	0xFDA
  9104                           fsr2l	equ	0xFD9
  9105                           status	equ	0xFD8
  9106                           
  9107 ;; *************** function _frexp *****************
  9108 ;; Defined at:
  9109 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  9110 ;; Parameters:    Size  Location     Type
  9111 ;;  value           4   23[COMRAM] int 
  9112 ;;  eptr            2   27[COMRAM] PTR int 
  9113 ;;		 -> floor@expon(2), 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;		None
  9116 ;; Return value:  Size  Location     Type
  9117 ;;                  4   23[COMRAM] PTR int 
  9118 ;; Registers used:
  9119 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9120 ;; Tracked objects:
  9121 ;;		On entry : 0/0
  9122 ;;		On exit  : 0/0
  9123 ;;		Unchanged: 0/0
  9124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9129 ;;Total ram usage:        8 bytes
  9130 ;; Hardware stack levels used:    1
  9131 ;; Hardware stack levels required when called:    3
  9132 ;; This function calls:
  9133 ;;		Nothing
  9134 ;; This function is called by:
  9135 ;;		_floor
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           	psect	text39
  9140  003D5E                     __ptext39:
  9141                           	opt stack 0
  9142  003D5E                     _frexp:
  9143                           	opt stack 26
  9144                           
  9145                           ;incstack = 0
  9146  003D5E  5018               	movf	frexp@value,w,c
  9147  003D60  1019               	iorwf	frexp@value+1,w,c
  9148  003D62  101A               	iorwf	frexp@value+2,w,c
  9149  003D64  101B               	iorwf	frexp@value+3,w,c
  9150  003D66  A4D8               	btfss	status,2,c
  9151  003D68  D009               	goto	l3797
  9152  003D6A  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9153  003D6E  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9154  003D72  0E00               	movlw	0
  9155  003D74  6EDE               	movwf	postinc2,c
  9156  003D76  0E00               	movlw	0
  9157  003D78  6EDD               	movwf	postdec2,c
  9158                           
  9159                           ;	Return value of _frexp is never used
  9160  003D7A  0012               	return	
  9161  003D7C                     l3797:
  9162  003D7C  501B               	movf	frexp@value+3,w,c
  9163  003D7E  0B7F               	andlw	127
  9164  003D80  6E1E               	movwf	??_frexp& (0+255),c
  9165  003D82  6A1F               	clrf	(??_frexp+1)& (0+255),c
  9166  003D84  90D8               	bcf	status,0,c
  9167  003D86  361E               	rlcf	??_frexp,f,c
  9168  003D88  361F               	rlcf	??_frexp+1,f,c
  9169  003D8A  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9170  003D8E  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9171  003D92  C01E  FFDE         	movff	??_frexp,postinc2
  9172  003D96  C01F  FFDD         	movff	??_frexp+1,postdec2
  9173  003D9A  AE1A               	btfss	frexp@value+2,7,c
  9174  003D9C  D003               	goto	u3850
  9175  003D9E  6A1E               	clrf	??_frexp& (0+255),c
  9176  003DA0  2A1E               	incf	??_frexp& (0+255),f,c
  9177  003DA2  D001               	goto	u3858
  9178  003DA4                     u3850:
  9179  003DA4  6A1E               	clrf	??_frexp& (0+255),c
  9180  003DA6                     u3858:
  9181  003DA6  501E               	movf	??_frexp,w,c
  9182  003DA8  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9183  003DAC  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9184  003DB0  12DE               	iorwf	postinc2,f,c
  9185  003DB2  0E00               	movlw	0
  9186  003DB4  12DD               	iorwf	postdec2,f,c
  9187  003DB6  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9188  003DBA  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9189  003DBE  0E82               	movlw	130
  9190  003DC0  26DE               	addwf	postinc2,f,c
  9191  003DC2  0EFF               	movlw	255
  9192  003DC4  22DD               	addwfc	postdec2,f,c
  9193  003DC6  801B               	bsf	frexp@value+3,0,c
  9194  003DC8  821B               	bsf	frexp@value+3,1,c
  9195  003DCA  841B               	bsf	frexp@value+3,2,c
  9196  003DCC  861B               	bsf	frexp@value+3,3,c
  9197  003DCE  881B               	bsf	frexp@value+3,4,c
  9198  003DD0  8A1B               	bsf	frexp@value+3,5,c
  9199  003DD2  9C1B               	bcf	frexp@value+3,6,c
  9200  003DD4  9E1A               	bcf	frexp@value+2,7,c
  9201  003DD6  0012               	return	
  9202  003DD8                     __end_of_frexp:
  9203                           	opt stack 0
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           postinc0	equ	0xFEE
  9212                           wreg	equ	0xFE8
  9213                           postdec1	equ	0xFE5
  9214                           fsr1l	equ	0xFE1
  9215                           indf2	equ	0xFDF
  9216                           postinc2	equ	0xFDE
  9217                           postdec2	equ	0xFDD
  9218                           fsr2h	equ	0xFDA
  9219                           fsr2l	equ	0xFD9
  9220                           status	equ	0xFD8
  9221                           
  9222 ;; *************** function ___xxtofl *****************
  9223 ;; Defined at:
  9224 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\xxtofl.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;  sign            1    wreg     unsigned char 
  9227 ;;  val             4   66[COMRAM] long 
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;  sign            1   74[COMRAM] unsigned char 
  9230 ;;  arg             4   76[COMRAM] unsigned long 
  9231 ;;  exp             1   75[COMRAM] unsigned char 
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  4   66[COMRAM] unsigned char 
  9234 ;; Registers used:
  9235 ;;		wreg, status,2, status,0
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9241 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;Total ram usage:       14 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    3
  9248 ;; This function calls:
  9249 ;;		Nothing
  9250 ;; This function is called by:
  9251 ;;		_read_adc_voltage
  9252 ;;		_read_adc_temp
  9253 ;;		_sprintf
  9254 ;;		_floor
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text40
  9259  00331C                     __ptext40:
  9260                           	opt stack 0
  9261  00331C                     ___xxtofl:
  9262                           	opt stack 26
  9263                           
  9264                           ;incstack = 0
  9265                           ;___xxtofl@sign stored from wreg
  9266  00331C  6E4B               	movwf	___xxtofl@sign,c
  9267  00331E  504B               	movf	___xxtofl@sign,w,c
  9268  003320  A4D8               	btfss	status,2,c
  9269  003322  AE46               	btfss	___xxtofl@val+3,7,c
  9270  003324  D01A               	goto	l1103
  9271  003326  C043  F047         	movff	___xxtofl@val,??___xxtofl
  9272  00332A  C044  F048         	movff	___xxtofl@val+1,??___xxtofl+1
  9273  00332E  C045  F049         	movff	___xxtofl@val+2,??___xxtofl+2
  9274  003332  C046  F04A         	movff	___xxtofl@val+3,??___xxtofl+3
  9275  003336  1E47               	comf	??___xxtofl,f,c
  9276  003338  1E48               	comf	??___xxtofl+1,f,c
  9277  00333A  1E49               	comf	??___xxtofl+2,f,c
  9278  00333C  1E4A               	comf	??___xxtofl+3,f,c
  9279  00333E  2A47               	incf	??___xxtofl,f,c
  9280  003340  0E00               	movlw	0
  9281  003342  2248               	addwfc	??___xxtofl+1,f,c
  9282  003344  2249               	addwfc	??___xxtofl+2,f,c
  9283  003346  224A               	addwfc	??___xxtofl+3,f,c
  9284  003348  C047  F04D         	movff	??___xxtofl,___xxtofl@arg
  9285  00334C  C048  F04E         	movff	??___xxtofl+1,___xxtofl@arg+1
  9286  003350  C049  F04F         	movff	??___xxtofl+2,___xxtofl@arg+2
  9287  003354  C04A  F050         	movff	??___xxtofl+3,___xxtofl@arg+3
  9288  003358  D008               	goto	l5287
  9289  00335A                     l1103:
  9290  00335A  C043  F04D         	movff	___xxtofl@val,___xxtofl@arg
  9291  00335E  C044  F04E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9292  003362  C045  F04F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9293  003366  C046  F050         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9294  00336A                     l5287:
  9295  00336A  5043               	movf	___xxtofl@val,w,c
  9296  00336C  1044               	iorwf	___xxtofl@val+1,w,c
  9297  00336E  1045               	iorwf	___xxtofl@val+2,w,c
  9298  003370  1046               	iorwf	___xxtofl@val+3,w,c
  9299  003372  A4D8               	btfss	status,2,c
  9300  003374  D009               	goto	l5293
  9301  003376  0E00               	movlw	0
  9302  003378  6E43               	movwf	?___xxtofl,c
  9303  00337A  0E00               	movlw	0
  9304  00337C  6E44               	movwf	?___xxtofl+1,c
  9305  00337E  0E00               	movlw	0
  9306  003380  6E45               	movwf	?___xxtofl+2,c
  9307  003382  0E00               	movlw	0
  9308  003384  6E46               	movwf	?___xxtofl+3,c
  9309  003386  0012               	return	
  9310  003388                     l5293:
  9311  003388  0E96               	movlw	150
  9312  00338A  6E4C               	movwf	___xxtofl@exp,c
  9313  00338C  D006               	goto	l5297
  9314  00338E                     l5295:
  9315  00338E  2A4C               	incf	___xxtofl@exp,f,c
  9316  003390  90D8               	bcf	status,0,c
  9317  003392  3250               	rrcf	___xxtofl@arg+3,f,c
  9318  003394  324F               	rrcf	___xxtofl@arg+2,f,c
  9319  003396  324E               	rrcf	___xxtofl@arg+1,f,c
  9320  003398  324D               	rrcf	___xxtofl@arg,f,c
  9321  00339A                     l5297:
  9322  00339A  0E00               	movlw	0
  9323  00339C  144D               	andwf	___xxtofl@arg,w,c
  9324  00339E  6E47               	movwf	??___xxtofl& (0+255),c
  9325  0033A0  0E00               	movlw	0
  9326  0033A2  144E               	andwf	___xxtofl@arg+1,w,c
  9327  0033A4  6E48               	movwf	(??___xxtofl+1)& (0+255),c
  9328  0033A6  0E00               	movlw	0
  9329  0033A8  144F               	andwf	___xxtofl@arg+2,w,c
  9330  0033AA  6E49               	movwf	(??___xxtofl+2)& (0+255),c
  9331  0033AC  0EFE               	movlw	254
  9332  0033AE  1450               	andwf	___xxtofl@arg+3,w,c
  9333  0033B0  6E4A               	movwf	(??___xxtofl+3)& (0+255),c
  9334  0033B2  5047               	movf	??___xxtofl,w,c
  9335  0033B4  1048               	iorwf	??___xxtofl+1,w,c
  9336  0033B6  1049               	iorwf	??___xxtofl+2,w,c
  9337  0033B8  104A               	iorwf	??___xxtofl+3,w,c
  9338  0033BA  B4D8               	btfsc	status,2,c
  9339  0033BC  D00D               	goto	l1110
  9340  0033BE  D7E7               	goto	l5295
  9341  0033C0                     l5299:
  9342  0033C0  2A4C               	incf	___xxtofl@exp,f,c
  9343  0033C2  0E01               	movlw	1
  9344  0033C4  264D               	addwf	___xxtofl@arg,f,c
  9345  0033C6  0E00               	movlw	0
  9346  0033C8  224E               	addwfc	___xxtofl@arg+1,f,c
  9347  0033CA  224F               	addwfc	___xxtofl@arg+2,f,c
  9348  0033CC  2250               	addwfc	___xxtofl@arg+3,f,c
  9349  0033CE  90D8               	bcf	status,0,c
  9350  0033D0  3250               	rrcf	___xxtofl@arg+3,f,c
  9351  0033D2  324F               	rrcf	___xxtofl@arg+2,f,c
  9352  0033D4  324E               	rrcf	___xxtofl@arg+1,f,c
  9353  0033D6  324D               	rrcf	___xxtofl@arg,f,c
  9354  0033D8                     l1110:
  9355  0033D8  0E00               	movlw	0
  9356  0033DA  144D               	andwf	___xxtofl@arg,w,c
  9357  0033DC  6E47               	movwf	??___xxtofl& (0+255),c
  9358  0033DE  0E00               	movlw	0
  9359  0033E0  144E               	andwf	___xxtofl@arg+1,w,c
  9360  0033E2  6E48               	movwf	(??___xxtofl+1)& (0+255),c
  9361  0033E4  0E00               	movlw	0
  9362  0033E6  144F               	andwf	___xxtofl@arg+2,w,c
  9363  0033E8  6E49               	movwf	(??___xxtofl+2)& (0+255),c
  9364  0033EA  0EFF               	movlw	255
  9365  0033EC  1450               	andwf	___xxtofl@arg+3,w,c
  9366  0033EE  6E4A               	movwf	(??___xxtofl+3)& (0+255),c
  9367  0033F0  5047               	movf	??___xxtofl,w,c
  9368  0033F2  1048               	iorwf	??___xxtofl+1,w,c
  9369  0033F4  1049               	iorwf	??___xxtofl+2,w,c
  9370  0033F6  104A               	iorwf	??___xxtofl+3,w,c
  9371  0033F8  B4D8               	btfsc	status,2,c
  9372  0033FA  D007               	goto	l5307
  9373  0033FC  D7E1               	goto	l5299
  9374  0033FE                     l5305:
  9375  0033FE  064C               	decf	___xxtofl@exp,f,c
  9376  003400  90D8               	bcf	status,0,c
  9377  003402  364D               	rlcf	___xxtofl@arg,f,c
  9378  003404  364E               	rlcf	___xxtofl@arg+1,f,c
  9379  003406  364F               	rlcf	___xxtofl@arg+2,f,c
  9380  003408  3650               	rlcf	___xxtofl@arg+3,f,c
  9381  00340A                     l5307:
  9382  00340A  BE4F               	btfsc	___xxtofl@arg+2,7,c
  9383  00340C  D003               	goto	l1117
  9384  00340E  0E02               	movlw	2
  9385  003410  604C               	cpfslt	___xxtofl@exp,c
  9386  003412  D7F5               	goto	l5305
  9387  003414                     l1117:
  9388  003414  B04C               	btfsc	___xxtofl@exp,0,c
  9389  003416  D008               	goto	l1118
  9390  003418  0EFF               	movlw	255
  9391  00341A  164D               	andwf	___xxtofl@arg,f,c
  9392  00341C  0EFF               	movlw	255
  9393  00341E  164E               	andwf	___xxtofl@arg+1,f,c
  9394  003420  0E7F               	movlw	127
  9395  003422  164F               	andwf	___xxtofl@arg+2,f,c
  9396  003424  0EFF               	movlw	255
  9397  003426  1650               	andwf	___xxtofl@arg+3,f,c
  9398  003428                     l1118:
  9399  003428  90D8               	bcf	status,0,c
  9400  00342A  324C               	rrcf	___xxtofl@exp,f,c
  9401  00342C  C04C  F047         	movff	___xxtofl@exp,??___xxtofl
  9402  003430  6A48               	clrf	(??___xxtofl+1)& (0+255),c
  9403  003432  6A49               	clrf	(??___xxtofl+2)& (0+255),c
  9404  003434  6A4A               	clrf	(??___xxtofl+3)& (0+255),c
  9405  003436  C047  F04A         	movff	??___xxtofl,??___xxtofl+3
  9406  00343A  6A49               	clrf	??___xxtofl+2,c
  9407  00343C  6A48               	clrf	??___xxtofl+1,c
  9408  00343E  6A47               	clrf	??___xxtofl,c
  9409  003440  5047               	movf	??___xxtofl,w,c
  9410  003442  124D               	iorwf	___xxtofl@arg,f,c
  9411  003444  5048               	movf	??___xxtofl+1,w,c
  9412  003446  124E               	iorwf	___xxtofl@arg+1,f,c
  9413  003448  5049               	movf	??___xxtofl+2,w,c
  9414  00344A  124F               	iorwf	___xxtofl@arg+2,f,c
  9415  00344C  504A               	movf	??___xxtofl+3,w,c
  9416  00344E  1250               	iorwf	___xxtofl@arg+3,f,c
  9417  003450  504B               	movf	___xxtofl@sign,w,c
  9418  003452  A4D8               	btfss	status,2,c
  9419  003454  AE46               	btfss	___xxtofl@val+3,7,c
  9420  003456  D001               	goto	l5319
  9421  003458  8E50               	bsf	___xxtofl@arg+3,7,c
  9422  00345A                     l5319:
  9423  00345A  C04D  F043         	movff	___xxtofl@arg,?___xxtofl
  9424  00345E  C04E  F044         	movff	___xxtofl@arg+1,?___xxtofl+1
  9425  003462  C04F  F045         	movff	___xxtofl@arg+2,?___xxtofl+2
  9426  003466  C050  F046         	movff	___xxtofl@arg+3,?___xxtofl+3
  9427  00346A  0012               	return	
  9428  00346C                     __end_of___xxtofl:
  9429                           	opt stack 0
  9430                           tblptru	equ	0xFF8
  9431                           tblptrh	equ	0xFF7
  9432                           tblptrl	equ	0xFF6
  9433                           tablat	equ	0xFF5
  9434                           prodh	equ	0xFF4
  9435                           prodl	equ	0xFF3
  9436                           intcon	equ	0xFF2
  9437                           postinc0	equ	0xFEE
  9438                           wreg	equ	0xFE8
  9439                           postdec1	equ	0xFE5
  9440                           fsr1l	equ	0xFE1
  9441                           indf2	equ	0xFDF
  9442                           postinc2	equ	0xFDE
  9443                           postdec2	equ	0xFDD
  9444                           fsr2h	equ	0xFDA
  9445                           fsr2l	equ	0xFD9
  9446                           status	equ	0xFD8
  9447                           
  9448 ;; *************** function ___fltol *****************
  9449 ;; Defined at:
  9450 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fltol.c"
  9451 ;; Parameters:    Size  Location     Type
  9452 ;;  f1              4   56[COMRAM] unsigned char 
  9453 ;; Auto vars:     Size  Location     Type
  9454 ;;  exp1            1   65[COMRAM] unsigned char 
  9455 ;;  sign1           1   64[COMRAM] unsigned char 
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  4   56[COMRAM] long 
  9458 ;; Registers used:
  9459 ;;		wreg, status,2, status,0
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9465 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9467 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9468 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9469 ;;Total ram usage:       10 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:    3
  9472 ;; This function calls:
  9473 ;;		Nothing
  9474 ;; This function is called by:
  9475 ;;		_main
  9476 ;;		_sprintf
  9477 ;;		_floor
  9478 ;;		_set_pwm1_percent
  9479 ;;		_set_pwm1_voltage
  9480 ;;		_set_pwm1_general
  9481 ;; This function uses a non-reentrant model
  9482 ;;
  9483                           
  9484                           	psect	text41
  9485  003904                     __ptext41:
  9486                           	opt stack 0
  9487  003904                     ___fltol:
  9488                           	opt stack 26
  9489                           
  9490                           ;incstack = 0
  9491  003904  343B               	rlcf	___fltol@f1+2,w,c
  9492  003906  343C               	rlcf	___fltol@f1+3,w,c
  9493  003908  6E42               	movwf	___fltol@exp1,c
  9494  00390A  5042               	movf	___fltol@exp1,w,c
  9495  00390C  A4D8               	btfss	status,2,c
  9496  00390E  D009               	goto	l3813
  9497  003910  0E00               	movlw	0
  9498  003912  6E39               	movwf	?___fltol,c
  9499  003914  0E00               	movlw	0
  9500  003916  6E3A               	movwf	?___fltol+1,c
  9501  003918  0E00               	movlw	0
  9502  00391A  6E3B               	movwf	?___fltol+2,c
  9503  00391C  0E00               	movlw	0
  9504  00391E  6E3C               	movwf	?___fltol+3,c
  9505  003920  0012               	return	
  9506  003922                     l3813:
  9507  003922  C039  F03D         	movff	___fltol@f1,??___fltol
  9508  003926  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  9509  00392A  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  9510  00392E  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  9511  003932  0E20               	movlw	32
  9512  003934  D005               	goto	u3870
  9513  003936                     u3875:
  9514  003936  90D8               	bcf	status,0,c
  9515  003938  3240               	rrcf	??___fltol+3,f,c
  9516  00393A  323F               	rrcf	??___fltol+2,f,c
  9517  00393C  323E               	rrcf	??___fltol+1,f,c
  9518  00393E  323D               	rrcf	??___fltol,f,c
  9519  003940                     u3870:
  9520  003940  2EE8               	decfsz	wreg,f,c
  9521  003942  D7F9               	goto	u3875
  9522  003944  503D               	movf	??___fltol,w,c
  9523  003946  6E41               	movwf	___fltol@sign1,c
  9524  003948  8E3B               	bsf	___fltol@f1+2,7,c
  9525  00394A  0EFF               	movlw	255
  9526  00394C  1639               	andwf	___fltol@f1,f,c
  9527  00394E  0EFF               	movlw	255
  9528  003950  163A               	andwf	___fltol@f1+1,f,c
  9529  003952  0EFF               	movlw	255
  9530  003954  163B               	andwf	___fltol@f1+2,f,c
  9531  003956  0E00               	movlw	0
  9532  003958  163C               	andwf	___fltol@f1+3,f,c
  9533  00395A  0E96               	movlw	150
  9534  00395C  5E42               	subwf	___fltol@exp1,f,c
  9535  00395E  AE42               	btfss	___fltol@exp1,7,c
  9536  003960  D016               	goto	l3833
  9537  003962  5042               	movf	___fltol@exp1,w,c
  9538  003964  0A80               	xorlw	128
  9539  003966  0F97               	addlw	151
  9540  003968  B0D8               	btfsc	status,0,c
  9541  00396A  D009               	goto	l3829
  9542  00396C  0E00               	movlw	0
  9543  00396E  6E39               	movwf	?___fltol,c
  9544  003970  0E00               	movlw	0
  9545  003972  6E3A               	movwf	?___fltol+1,c
  9546  003974  0E00               	movlw	0
  9547  003976  6E3B               	movwf	?___fltol+2,c
  9548  003978  0E00               	movlw	0
  9549  00397A  6E3C               	movwf	?___fltol+3,c
  9550  00397C  0012               	return	
  9551  00397E                     l3829:
  9552  00397E  90D8               	bcf	status,0,c
  9553  003980  323C               	rrcf	___fltol@f1+3,f,c
  9554  003982  323B               	rrcf	___fltol@f1+2,f,c
  9555  003984  323A               	rrcf	___fltol@f1+1,f,c
  9556  003986  3239               	rrcf	___fltol@f1,f,c
  9557  003988  3E42               	incfsz	___fltol@exp1,f,c
  9558  00398A  D7F9               	goto	l3829
  9559  00398C  D015               	goto	l3843
  9560  00398E                     l3833:
  9561  00398E  0E1F               	movlw	31
  9562  003990  6442               	cpfsgt	___fltol@exp1,c
  9563  003992  D00F               	goto	l3841
  9564  003994  0E00               	movlw	0
  9565  003996  6E39               	movwf	?___fltol,c
  9566  003998  0E00               	movlw	0
  9567  00399A  6E3A               	movwf	?___fltol+1,c
  9568  00399C  0E00               	movlw	0
  9569  00399E  6E3B               	movwf	?___fltol+2,c
  9570  0039A0  0E00               	movlw	0
  9571  0039A2  6E3C               	movwf	?___fltol+3,c
  9572  0039A4  0012               	return	
  9573  0039A6                     l3839:
  9574  0039A6  90D8               	bcf	status,0,c
  9575  0039A8  3639               	rlcf	___fltol@f1,f,c
  9576  0039AA  363A               	rlcf	___fltol@f1+1,f,c
  9577  0039AC  363B               	rlcf	___fltol@f1+2,f,c
  9578  0039AE  363C               	rlcf	___fltol@f1+3,f,c
  9579  0039B0  0642               	decf	___fltol@exp1,f,c
  9580  0039B2                     l3841:
  9581  0039B2  5042               	movf	___fltol@exp1,w,c
  9582  0039B4  A4D8               	btfss	status,2,c
  9583  0039B6  D7F7               	goto	l3839
  9584  0039B8                     l3843:
  9585  0039B8  5041               	movf	___fltol@sign1,w,c
  9586  0039BA  B4D8               	btfsc	status,2,c
  9587  0039BC  D008               	goto	l3847
  9588  0039BE  1E3C               	comf	___fltol@f1+3,f,c
  9589  0039C0  1E3B               	comf	___fltol@f1+2,f,c
  9590  0039C2  1E3A               	comf	___fltol@f1+1,f,c
  9591  0039C4  6C39               	negf	___fltol@f1,c
  9592  0039C6  0E00               	movlw	0
  9593  0039C8  223A               	addwfc	___fltol@f1+1,f,c
  9594  0039CA  223B               	addwfc	___fltol@f1+2,f,c
  9595  0039CC  223C               	addwfc	___fltol@f1+3,f,c
  9596  0039CE                     l3847:
  9597  0039CE  C039  F039         	movff	___fltol@f1,?___fltol
  9598  0039D2  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  9599  0039D6  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  9600  0039DA  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  9601  0039DE  0012               	return	
  9602  0039E0                     __end_of___fltol:
  9603                           	opt stack 0
  9604                           tblptru	equ	0xFF8
  9605                           tblptrh	equ	0xFF7
  9606                           tblptrl	equ	0xFF6
  9607                           tablat	equ	0xFF5
  9608                           prodh	equ	0xFF4
  9609                           prodl	equ	0xFF3
  9610                           intcon	equ	0xFF2
  9611                           postinc0	equ	0xFEE
  9612                           wreg	equ	0xFE8
  9613                           postdec1	equ	0xFE5
  9614                           fsr1l	equ	0xFE1
  9615                           indf2	equ	0xFDF
  9616                           postinc2	equ	0xFDE
  9617                           postdec2	equ	0xFDD
  9618                           fsr2h	equ	0xFDA
  9619                           fsr2l	equ	0xFD9
  9620                           status	equ	0xFD8
  9621                           
  9622 ;; *************** function ___flge *****************
  9623 ;; Defined at:
  9624 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\flge.c"
  9625 ;; Parameters:    Size  Location     Type
  9626 ;;  ff1             4   56[COMRAM] long 
  9627 ;;  ff2             4   60[COMRAM] long 
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;		None               void
  9632 ;; Registers used:
  9633 ;;		wreg, status,2, status,0
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9639 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9641 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9642 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9643 ;;Total ram usage:       12 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    3
  9646 ;; This function calls:
  9647 ;;		Nothing
  9648 ;; This function is called by:
  9649 ;;		_main
  9650 ;;		_sprintf
  9651 ;;		_floor
  9652 ;; This function uses a non-reentrant model
  9653 ;;
  9654                           
  9655                           	psect	text42
  9656  0036C6                     __ptext42:
  9657                           	opt stack 0
  9658  0036C6                     ___flge:
  9659                           	opt stack 26
  9660                           
  9661                           ;incstack = 0
  9662  0036C6  0E00               	movlw	0
  9663  0036C8  1439               	andwf	___flge@ff1,w,c
  9664  0036CA  6E41               	movwf	??___flge& (0+255),c
  9665  0036CC  0E00               	movlw	0
  9666  0036CE  143A               	andwf	___flge@ff1+1,w,c
  9667  0036D0  6E42               	movwf	(??___flge+1)& (0+255),c
  9668  0036D2  0E80               	movlw	128
  9669  0036D4  143B               	andwf	___flge@ff1+2,w,c
  9670  0036D6  6E43               	movwf	(??___flge+2)& (0+255),c
  9671  0036D8  0E7F               	movlw	127
  9672  0036DA  143C               	andwf	___flge@ff1+3,w,c
  9673  0036DC  6E44               	movwf	(??___flge+3)& (0+255),c
  9674  0036DE  5041               	movf	??___flge,w,c
  9675  0036E0  1042               	iorwf	??___flge+1,w,c
  9676  0036E2  1043               	iorwf	??___flge+2,w,c
  9677  0036E4  1044               	iorwf	??___flge+3,w,c
  9678  0036E6  A4D8               	btfss	status,2,c
  9679  0036E8  D008               	goto	l3765
  9680  0036EA  0E00               	movlw	0
  9681  0036EC  6E39               	movwf	___flge@ff1,c
  9682  0036EE  0E00               	movlw	0
  9683  0036F0  6E3A               	movwf	___flge@ff1+1,c
  9684  0036F2  0E00               	movlw	0
  9685  0036F4  6E3B               	movwf	___flge@ff1+2,c
  9686  0036F6  0E00               	movlw	0
  9687  0036F8  6E3C               	movwf	___flge@ff1+3,c
  9688  0036FA                     l3765:
  9689  0036FA  0E00               	movlw	0
  9690  0036FC  143D               	andwf	___flge@ff2,w,c
  9691  0036FE  6E41               	movwf	??___flge& (0+255),c
  9692  003700  0E00               	movlw	0
  9693  003702  143E               	andwf	___flge@ff2+1,w,c
  9694  003704  6E42               	movwf	(??___flge+1)& (0+255),c
  9695  003706  0E80               	movlw	128
  9696  003708  143F               	andwf	___flge@ff2+2,w,c
  9697  00370A  6E43               	movwf	(??___flge+2)& (0+255),c
  9698  00370C  0E7F               	movlw	127
  9699  00370E  1440               	andwf	___flge@ff2+3,w,c
  9700  003710  6E44               	movwf	(??___flge+3)& (0+255),c
  9701  003712  5041               	movf	??___flge,w,c
  9702  003714  1042               	iorwf	??___flge+1,w,c
  9703  003716  1043               	iorwf	??___flge+2,w,c
  9704  003718  1044               	iorwf	??___flge+3,w,c
  9705  00371A  A4D8               	btfss	status,2,c
  9706  00371C  D008               	goto	l3769
  9707  00371E  0E00               	movlw	0
  9708  003720  6E3D               	movwf	___flge@ff2,c
  9709  003722  0E00               	movlw	0
  9710  003724  6E3E               	movwf	___flge@ff2+1,c
  9711  003726  0E00               	movlw	0
  9712  003728  6E3F               	movwf	___flge@ff2+2,c
  9713  00372A  0E00               	movlw	0
  9714  00372C  6E40               	movwf	___flge@ff2+3,c
  9715  00372E                     l3769:
  9716  00372E  AE3C               	btfss	___flge@ff1+3,7,c
  9717  003730  D01D               	goto	l3773
  9718  003732  C039  F041         	movff	___flge@ff1,??___flge
  9719  003736  C03A  F042         	movff	___flge@ff1+1,??___flge+1
  9720  00373A  C03B  F043         	movff	___flge@ff1+2,??___flge+2
  9721  00373E  C03C  F044         	movff	___flge@ff1+3,??___flge+3
  9722  003742  1E41               	comf	??___flge,f,c
  9723  003744  1E42               	comf	??___flge+1,f,c
  9724  003746  1E43               	comf	??___flge+2,f,c
  9725  003748  1E44               	comf	??___flge+3,f,c
  9726  00374A  2A41               	incf	??___flge,f,c
  9727  00374C  0E00               	movlw	0
  9728  00374E  2242               	addwfc	??___flge+1,f,c
  9729  003750  2243               	addwfc	??___flge+2,f,c
  9730  003752  2244               	addwfc	??___flge+3,f,c
  9731  003754  0E00               	movlw	0
  9732  003756  2441               	addwf	??___flge,w,c
  9733  003758  6E39               	movwf	___flge@ff1,c
  9734  00375A  0E00               	movlw	0
  9735  00375C  2042               	addwfc	??___flge+1,w,c
  9736  00375E  6E3A               	movwf	___flge@ff1+1,c
  9737  003760  0E00               	movlw	0
  9738  003762  2043               	addwfc	??___flge+2,w,c
  9739  003764  6E3B               	movwf	___flge@ff1+2,c
  9740  003766  0E80               	movlw	128
  9741  003768  2044               	addwfc	??___flge+3,w,c
  9742  00376A  6E3C               	movwf	___flge@ff1+3,c
  9743  00376C                     l3773:
  9744  00376C  AE40               	btfss	___flge@ff2+3,7,c
  9745  00376E  D01D               	goto	l707
  9746  003770  C03D  F041         	movff	___flge@ff2,??___flge
  9747  003774  C03E  F042         	movff	___flge@ff2+1,??___flge+1
  9748  003778  C03F  F043         	movff	___flge@ff2+2,??___flge+2
  9749  00377C  C040  F044         	movff	___flge@ff2+3,??___flge+3
  9750  003780  1E41               	comf	??___flge,f,c
  9751  003782  1E42               	comf	??___flge+1,f,c
  9752  003784  1E43               	comf	??___flge+2,f,c
  9753  003786  1E44               	comf	??___flge+3,f,c
  9754  003788  2A41               	incf	??___flge,f,c
  9755  00378A  0E00               	movlw	0
  9756  00378C  2242               	addwfc	??___flge+1,f,c
  9757  00378E  2243               	addwfc	??___flge+2,f,c
  9758  003790  2244               	addwfc	??___flge+3,f,c
  9759  003792  0E00               	movlw	0
  9760  003794  2441               	addwf	??___flge,w,c
  9761  003796  6E3D               	movwf	___flge@ff2,c
  9762  003798  0E00               	movlw	0
  9763  00379A  2042               	addwfc	??___flge+1,w,c
  9764  00379C  6E3E               	movwf	___flge@ff2+1,c
  9765  00379E  0E00               	movlw	0
  9766  0037A0  2043               	addwfc	??___flge+2,w,c
  9767  0037A2  6E3F               	movwf	___flge@ff2+2,c
  9768  0037A4  0E80               	movlw	128
  9769  0037A6  2044               	addwfc	??___flge+3,w,c
  9770  0037A8  6E40               	movwf	___flge@ff2+3,c
  9771  0037AA                     l707:
  9772  0037AA  0E00               	movlw	0
  9773  0037AC  1A39               	xorwf	___flge@ff1,f,c
  9774  0037AE  0E00               	movlw	0
  9775  0037B0  1A3A               	xorwf	___flge@ff1+1,f,c
  9776  0037B2  0E00               	movlw	0
  9777  0037B4  1A3B               	xorwf	___flge@ff1+2,f,c
  9778  0037B6  0E80               	movlw	128
  9779  0037B8  1A3C               	xorwf	___flge@ff1+3,f,c
  9780  0037BA  0E00               	movlw	0
  9781  0037BC  1A3D               	xorwf	___flge@ff2,f,c
  9782  0037BE  0E00               	movlw	0
  9783  0037C0  1A3E               	xorwf	___flge@ff2+1,f,c
  9784  0037C2  0E00               	movlw	0
  9785  0037C4  1A3F               	xorwf	___flge@ff2+2,f,c
  9786  0037C6  0E80               	movlw	128
  9787  0037C8  1A40               	xorwf	___flge@ff2+3,f,c
  9788  0037CA  503D               	movf	___flge@ff2,w,c
  9789  0037CC  5C39               	subwf	___flge@ff1,w,c
  9790  0037CE  503E               	movf	___flge@ff2+1,w,c
  9791  0037D0  583A               	subwfb	___flge@ff1+1,w,c
  9792  0037D2  503F               	movf	___flge@ff2+2,w,c
  9793  0037D4  583B               	subwfb	___flge@ff1+2,w,c
  9794  0037D6  5040               	movf	___flge@ff2+3,w,c
  9795  0037D8  583C               	subwfb	___flge@ff1+3,w,c
  9796  0037DA  B0D8               	btfsc	status,0,c
  9797  0037DC  D002               	goto	l3779
  9798  0037DE  90D8               	bcf	status,0,c
  9799  0037E0  0012               	return	
  9800  0037E2                     l3779:
  9801  0037E2  80D8               	bsf	status,0,c
  9802  0037E4  0012               	return	
  9803  0037E6                     __end_of___flge:
  9804                           	opt stack 0
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           postinc0	equ	0xFEE
  9813                           wreg	equ	0xFE8
  9814                           postdec1	equ	0xFE5
  9815                           fsr1l	equ	0xFE1
  9816                           indf2	equ	0xFDF
  9817                           postinc2	equ	0xFDE
  9818                           postdec2	equ	0xFDD
  9819                           fsr2h	equ	0xFDA
  9820                           fsr2l	equ	0xFD9
  9821                           status	equ	0xFD8
  9822                           
  9823 ;; *************** function ___fladd *****************
  9824 ;; Defined at:
  9825 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcadd.c"
  9826 ;; Parameters:    Size  Location     Type
  9827 ;;  b               4   25[BANK0 ] long 
  9828 ;;  a               4   29[BANK0 ] long 
  9829 ;; Auto vars:     Size  Location     Type
  9830 ;;  grs             1   44[BANK0 ] unsigned char 
  9831 ;;  bexp            1   43[BANK0 ] unsigned char 
  9832 ;;  aexp            1   42[BANK0 ] unsigned char 
  9833 ;;  signs           1   41[BANK0 ] unsigned char 
  9834 ;; Return value:  Size  Location     Type
  9835 ;;                  4   25[BANK0 ] unsigned char 
  9836 ;; Registers used:
  9837 ;;		wreg, status,2, status,0
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9843 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9844 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9845 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9846 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9847 ;;Total ram usage:       20 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    3
  9850 ;; This function calls:
  9851 ;;		Nothing
  9852 ;; This function is called by:
  9853 ;;		_main
  9854 ;;		_read_adc_temp
  9855 ;;		_sprintf
  9856 ;;		_floor
  9857 ;;		___flsub
  9858 ;;		_set_pwm1_percent
  9859 ;;		_set_pwm1_voltage
  9860 ;;		_set_pwm1_general
  9861 ;; This function uses a non-reentrant model
  9862 ;;
  9863                           
  9864                           	psect	text43
  9865  001C96                     __ptext43:
  9866                           	opt stack 0
  9867  001C96                     ___fladd:
  9868                           	opt stack 25
  9869                           
  9870                           ;incstack = 0
  9871  001C96  0100               	movlb	0	; () banked
  9872  001C98  519C               	movf	(___fladd@b+3)& (0+255),w,b
  9873  001C9A  0B80               	andlw	128
  9874  001C9C  0100               	movlb	0	; () banked
  9875  001C9E  6FA9               	movwf	___fladd@signs& (0+255),b
  9876  001CA0  0100               	movlb	0	; () banked
  9877  001CA2  519C               	movf	(___fladd@b+3)& (0+255),w,b
  9878  001CA4  259C               	addwf	(___fladd@b+3)& (0+255),w,b
  9879  001CA6  0100               	movlb	0	; () banked
  9880  001CA8  6FAB               	movwf	___fladd@bexp& (0+255),b
  9881                           
  9882                           ; BSR set to: 0
  9883  001CAA  0100               	movlb	0	; () banked
  9884  001CAC  AF9B               	btfss	(___fladd@b+2)& (0+255),7,b
  9885  001CAE  D002               	goto	l4657
  9886                           
  9887                           ; BSR set to: 0
  9888  001CB0  0100               	movlb	0	; () banked
  9889  001CB2  81AB               	bsf	___fladd@bexp& (0+255),0,b
  9890  001CB4                     l4657:
  9891                           
  9892                           ; BSR set to: 0
  9893  001CB4  0100               	movlb	0	; () banked
  9894  001CB6  51AB               	movf	___fladd@bexp& (0+255),w,b
  9895  001CB8  0100               	movlb	0	; () banked
  9896  001CBA  B4D8               	btfsc	status,2,c
  9897  001CBC  D012               	goto	l4667
  9898                           
  9899                           ; BSR set to: 0
  9900  001CBE  0100               	movlb	0	; () banked
  9901  001CC0  29AB               	incf	___fladd@bexp& (0+255),w,b
  9902  001CC2  A4D8               	btfss	status,2,c
  9903  001CC4  D009               	goto	l4663
  9904                           
  9905                           ; BSR set to: 0
  9906  001CC6  0E00               	movlw	0
  9907  001CC8  0100               	movlb	0	; () banked
  9908  001CCA  6F99               	movwf	___fladd@b& (0+255),b
  9909  001CCC  0E00               	movlw	0
  9910  001CCE  6F9A               	movwf	(___fladd@b+1)& (0+255),b
  9911  001CD0  0E00               	movlw	0
  9912  001CD2  6F9B               	movwf	(___fladd@b+2)& (0+255),b
  9913  001CD4  0E00               	movlw	0
  9914  001CD6  6F9C               	movwf	(___fladd@b+3)& (0+255),b
  9915  001CD8                     l4663:
  9916                           
  9917                           ; BSR set to: 0
  9918  001CD8  0100               	movlb	0	; () banked
  9919  001CDA  8F9B               	bsf	(___fladd@b+2)& (0+255),7,b
  9920                           
  9921                           ; BSR set to: 0
  9922  001CDC  0E00               	movlw	0
  9923  001CDE  0100               	movlb	0	; () banked
  9924  001CE0  D008               	goto	L13
  9925  001CE2                     l4667:
  9926                           
  9927                           ; BSR set to: 0
  9928  001CE2  0E00               	movlw	0
  9929  001CE4  0100               	movlb	0	; () banked
  9930  001CE6  6F99               	movwf	___fladd@b& (0+255),b
  9931  001CE8  0E00               	movlw	0
  9932  001CEA  6F9A               	movwf	(___fladd@b+1)& (0+255),b
  9933  001CEC  0E00               	movlw	0
  9934  001CEE  6F9B               	movwf	(___fladd@b+2)& (0+255),b
  9935  001CF0  0E00               	movlw	0
  9936  001CF2                     L13:
  9937  001CF2  6F9C               	movwf	(___fladd@b+3)& (0+255),b
  9938                           
  9939                           ; BSR set to: 0
  9940                           
  9941                           ; BSR set to: 0
  9942  001CF4  0100               	movlb	0	; () banked
  9943  001CF6  51A0               	movf	(___fladd@a+3)& (0+255),w,b
  9944  001CF8  0B80               	andlw	128
  9945  001CFA  0100               	movlb	0	; () banked
  9946  001CFC  6FAA               	movwf	___fladd@aexp& (0+255),b
  9947                           
  9948                           ; BSR set to: 0
  9949  001CFE  0100               	movlb	0	; () banked
  9950  001D00  51A9               	movf	___fladd@signs& (0+255),w,b
  9951  001D02  0100               	movlb	0	; () banked
  9952  001D04  19AA               	xorwf	___fladd@aexp& (0+255),w,b
  9953  001D06  B4D8               	btfsc	status,2,c
  9954  001D08  D002               	goto	l4675
  9955                           
  9956                           ; BSR set to: 0
  9957  001D0A  0100               	movlb	0	; () banked
  9958  001D0C  8DA9               	bsf	___fladd@signs& (0+255),6,b
  9959  001D0E                     l4675:
  9960                           
  9961                           ; BSR set to: 0
  9962  001D0E  0100               	movlb	0	; () banked
  9963  001D10  51A0               	movf	(___fladd@a+3)& (0+255),w,b
  9964  001D12  25A0               	addwf	(___fladd@a+3)& (0+255),w,b
  9965  001D14  0100               	movlb	0	; () banked
  9966  001D16  6FAA               	movwf	___fladd@aexp& (0+255),b
  9967                           
  9968                           ; BSR set to: 0
  9969  001D18  0100               	movlb	0	; () banked
  9970  001D1A  AF9F               	btfss	(___fladd@a+2)& (0+255),7,b
  9971  001D1C  D002               	goto	l4681
  9972                           
  9973                           ; BSR set to: 0
  9974  001D1E  0100               	movlb	0	; () banked
  9975  001D20  81AA               	bsf	___fladd@aexp& (0+255),0,b
  9976  001D22                     l4681:
  9977                           
  9978                           ; BSR set to: 0
  9979  001D22  0100               	movlb	0	; () banked
  9980  001D24  51AA               	movf	___fladd@aexp& (0+255),w,b
  9981  001D26  0100               	movlb	0	; () banked
  9982  001D28  B4D8               	btfsc	status,2,c
  9983  001D2A  D012               	goto	l4691
  9984                           
  9985                           ; BSR set to: 0
  9986  001D2C  0100               	movlb	0	; () banked
  9987  001D2E  29AA               	incf	___fladd@aexp& (0+255),w,b
  9988  001D30  A4D8               	btfss	status,2,c
  9989  001D32  D009               	goto	l4687
  9990                           
  9991                           ; BSR set to: 0
  9992  001D34  0E00               	movlw	0
  9993  001D36  0100               	movlb	0	; () banked
  9994  001D38  6F9D               	movwf	___fladd@a& (0+255),b
  9995  001D3A  0E00               	movlw	0
  9996  001D3C  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  9997  001D3E  0E00               	movlw	0
  9998  001D40  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  9999  001D42  0E00               	movlw	0
 10000  001D44  6FA0               	movwf	(___fladd@a+3)& (0+255),b
 10001  001D46                     l4687:
 10002                           
 10003                           ; BSR set to: 0
 10004  001D46  0100               	movlb	0	; () banked
 10005  001D48  8F9F               	bsf	(___fladd@a+2)& (0+255),7,b
 10006                           
 10007                           ; BSR set to: 0
 10008  001D4A  0E00               	movlw	0
 10009  001D4C  0100               	movlb	0	; () banked
 10010  001D4E  D008               	goto	L14
 10011  001D50                     l4691:
 10012                           
 10013                           ; BSR set to: 0
 10014  001D50  0E00               	movlw	0
 10015  001D52  0100               	movlb	0	; () banked
 10016  001D54  6F9D               	movwf	___fladd@a& (0+255),b
 10017  001D56  0E00               	movlw	0
 10018  001D58  6F9E               	movwf	(___fladd@a+1)& (0+255),b
 10019  001D5A  0E00               	movlw	0
 10020  001D5C  6F9F               	movwf	(___fladd@a+2)& (0+255),b
 10021  001D5E  0E00               	movlw	0
 10022  001D60                     L14:
 10023  001D60  6FA0               	movwf	(___fladd@a+3)& (0+255),b
 10024                           
 10025                           ; BSR set to: 0
 10026                           
 10027                           ; BSR set to: 0
 10028  001D62  0100               	movlb	0	; () banked
 10029  001D64  51AB               	movf	___fladd@bexp& (0+255),w,b
 10030  001D66  0100               	movlb	0	; () banked
 10031  001D68  5DAA               	subwf	___fladd@aexp& (0+255),w,b
 10032  001D6A  B0D8               	btfsc	status,0,c
 10033  001D6C  D024               	goto	l4729
 10034                           
 10035                           ; BSR set to: 0
 10036  001D6E  0100               	movlb	0	; () banked
 10037  001D70  ADA9               	btfss	___fladd@signs& (0+255),6,b
 10038  001D72  D003               	goto	l4699
 10039                           
 10040                           ; BSR set to: 0
 10041  001D74  0E80               	movlw	128
 10042  001D76  0100               	movlb	0	; () banked
 10043  001D78  1BA9               	xorwf	___fladd@signs& (0+255),f,b
 10044  001D7A                     l4699:
 10045                           
 10046                           ; BSR set to: 0
 10047  001D7A  C0AB  F0AC         	movff	___fladd@bexp,___fladd@grs
 10048                           
 10049                           ; BSR set to: 0
 10050  001D7E  C0AA  F0AB         	movff	___fladd@aexp,___fladd@bexp
 10051                           
 10052                           ; BSR set to: 0
 10053  001D82  C0AC  F0AA         	movff	___fladd@grs,___fladd@aexp
 10054                           
 10055                           ; BSR set to: 0
 10056  001D86  C099  F0AC         	movff	___fladd@b,___fladd@grs
 10057                           
 10058                           ; BSR set to: 0
 10059  001D8A  C09D  F099         	movff	___fladd@a,___fladd@b
 10060                           
 10061                           ; BSR set to: 0
 10062  001D8E  C0AC  F09D         	movff	___fladd@grs,___fladd@a
 10063                           
 10064                           ; BSR set to: 0
 10065  001D92  C09A  F0AC         	movff	___fladd@b+1,___fladd@grs
 10066                           
 10067                           ; BSR set to: 0
 10068  001D96  C09E  F09A         	movff	___fladd@a+1,___fladd@b+1
 10069                           
 10070                           ; BSR set to: 0
 10071  001D9A  C0AC  F09E         	movff	___fladd@grs,___fladd@a+1
 10072                           
 10073                           ; BSR set to: 0
 10074  001D9E  C09B  F0AC         	movff	___fladd@b+2,___fladd@grs
 10075                           
 10076                           ; BSR set to: 0
 10077  001DA2  C09F  F09B         	movff	___fladd@a+2,___fladd@b+2
 10078                           
 10079                           ; BSR set to: 0
 10080  001DA6  C0AC  F09F         	movff	___fladd@grs,___fladd@a+2
 10081                           
 10082                           ; BSR set to: 0
 10083  001DAA  C09C  F0AC         	movff	___fladd@b+3,___fladd@grs
 10084                           
 10085                           ; BSR set to: 0
 10086  001DAE  C0A0  F09C         	movff	___fladd@a+3,___fladd@b+3
 10087                           
 10088                           ; BSR set to: 0
 10089  001DB2  C0AC  F0A0         	movff	___fladd@grs,___fladd@a+3
 10090  001DB6                     l4729:
 10091                           
 10092                           ; BSR set to: 0
 10093  001DB6  0E00               	movlw	0
 10094  001DB8  0100               	movlb	0	; () banked
 10095  001DBA  6FAC               	movwf	___fladd@grs& (0+255),b
 10096                           
 10097                           ; BSR set to: 0
 10098  001DBC  0100               	movlb	0	; () banked
 10099  001DBE  51AB               	movf	___fladd@bexp& (0+255),w,b
 10100  001DC0  0100               	movlb	0	; () banked
 10101  001DC2  6FA1               	movwf	??___fladd& (0+255),b
 10102  001DC4  6BA2               	clrf	(??___fladd+1)& (0+255),b
 10103  001DC6  0100               	movlb	0	; () banked
 10104  001DC8  1FA1               	comf	??___fladd& (0+255),f,b
 10105  001DCA  1FA2               	comf	(??___fladd+1)& (0+255),f,b
 10106  001DCC  4BA1               	infsnz	??___fladd& (0+255),f,b
 10107  001DCE  2BA2               	incf	(??___fladd+1)& (0+255),f,b
 10108  001DD0  0100               	movlb	0	; () banked
 10109  001DD2  51AA               	movf	___fladd@aexp& (0+255),w,b
 10110  001DD4  0100               	movlb	0	; () banked
 10111  001DD6  6FA3               	movwf	(??___fladd+2)& (0+255),b
 10112  001DD8  6BA4               	clrf	(??___fladd+3)& (0+255),b
 10113  001DDA  0100               	movlb	0	; () banked
 10114  001DDC  51A1               	movf	??___fladd& (0+255),w,b
 10115  001DDE  0100               	movlb	0	; () banked
 10116  001DE0  27A3               	addwf	(??___fladd+2)& (0+255),f,b
 10117  001DE2  0100               	movlb	0	; () banked
 10118  001DE4  51A2               	movf	(??___fladd+1)& (0+255),w,b
 10119  001DE6  0100               	movlb	0	; () banked
 10120  001DE8  23A4               	addwfc	(??___fladd+3)& (0+255),f,b
 10121  001DEA  0100               	movlb	0	; () banked
 10122  001DEC  BFA4               	btfsc	(??___fladd+3)& (0+255),7,b
 10123  001DEE  D03D               	goto	l996
 10124  001DF0  0100               	movlb	0	; () banked
 10125  001DF2  51A4               	movf	(??___fladd+3)& (0+255),w,b
 10126  001DF4  E105               	bnz	u5130
 10127  001DF6  0E1A               	movlw	26
 10128  001DF8  0100               	movlb	0	; () banked
 10129  001DFA  5DA3               	subwf	(??___fladd+2)& (0+255),w,b
 10130  001DFC  A0D8               	btfss	status,0,c
 10131  001DFE  D035               	goto	l996
 10132  001E00                     u5130:
 10133                           
 10134                           ; BSR set to: 0
 10135  001E00  0100               	movlb	0	; () banked
 10136  001E02  5199               	movf	___fladd@b& (0+255),w,b
 10137  001E04  0100               	movlb	0	; () banked
 10138  001E06  119A               	iorwf	(___fladd@b+1)& (0+255),w,b
 10139  001E08  0100               	movlb	0	; () banked
 10140  001E0A  119B               	iorwf	(___fladd@b+2)& (0+255),w,b
 10141  001E0C  0100               	movlb	0	; () banked
 10142  001E0E  119C               	iorwf	(___fladd@b+3)& (0+255),w,b
 10143  001E10  B4D8               	btfsc	status,2,c
 10144  001E12  D002               	goto	u5140
 10145  001E14  0E01               	movlw	1
 10146  001E16  D001               	goto	u5150
 10147  001E18                     u5140:
 10148  001E18  0E00               	movlw	0
 10149  001E1A                     u5150:
 10150  001E1A  0100               	movlb	0	; () banked
 10151  001E1C  6FAC               	movwf	___fladd@grs& (0+255),b
 10152                           
 10153                           ; BSR set to: 0
 10154  001E1E  0E00               	movlw	0
 10155  001E20  0100               	movlb	0	; () banked
 10156  001E22  6F99               	movwf	___fladd@b& (0+255),b
 10157  001E24  0E00               	movlw	0
 10158  001E26  6F9A               	movwf	(___fladd@b+1)& (0+255),b
 10159  001E28  0E00               	movlw	0
 10160  001E2A  6F9B               	movwf	(___fladd@b+2)& (0+255),b
 10161  001E2C  0E00               	movlw	0
 10162  001E2E  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10163                           
 10164                           ; BSR set to: 0
 10165  001E30  C0AA  F0AB         	movff	___fladd@aexp,___fladd@bexp
 10166  001E34  D020               	goto	l995
 10167  001E36                     l997:
 10168                           
 10169                           ; BSR set to: 0
 10170  001E36  0100               	movlb	0	; () banked
 10171  001E38  A1AC               	btfss	___fladd@grs& (0+255),0,b
 10172  001E3A  D007               	goto	l4741
 10173                           
 10174                           ; BSR set to: 0
 10175  001E3C  0100               	movlb	0	; () banked
 10176  001E3E  90D8               	bcf	status,0,c
 10177  001E40  31AC               	rrcf	___fladd@grs& (0+255),w,b
 10178  001E42  0901               	iorlw	1
 10179  001E44  0100               	movlb	0	; () banked
 10180  001E46  6FAC               	movwf	___fladd@grs& (0+255),b
 10181  001E48  D003               	goto	l4743
 10182  001E4A                     l4741:
 10183                           
 10184                           ; BSR set to: 0
 10185  001E4A  0100               	movlb	0	; () banked
 10186  001E4C  90D8               	bcf	status,0,c
 10187  001E4E  33AC               	rrcf	___fladd@grs& (0+255),f,b
 10188  001E50                     l4743:
 10189                           
 10190                           ; BSR set to: 0
 10191  001E50  0100               	movlb	0	; () banked
 10192  001E52  A199               	btfss	___fladd@b& (0+255),0,b
 10193  001E54  D002               	goto	l4747
 10194                           
 10195                           ; BSR set to: 0
 10196  001E56  0100               	movlb	0	; () banked
 10197  001E58  8FAC               	bsf	___fladd@grs& (0+255),7,b
 10198  001E5A                     l4747:
 10199                           
 10200                           ; BSR set to: 0
 10201  001E5A  0100               	movlb	0	; () banked
 10202  001E5C  359C               	rlcf	(___fladd@b+3)& (0+255),w,b
 10203  001E5E  339C               	rrcf	(___fladd@b+3)& (0+255),f,b
 10204  001E60  339B               	rrcf	(___fladd@b+2)& (0+255),f,b
 10205  001E62  339A               	rrcf	(___fladd@b+1)& (0+255),f,b
 10206  001E64  3399               	rrcf	___fladd@b& (0+255),f,b
 10207                           
 10208                           ; BSR set to: 0
 10209  001E66  0100               	movlb	0	; () banked
 10210  001E68  2BAB               	incf	___fladd@bexp& (0+255),f,b
 10211  001E6A                     l996:
 10212                           
 10213                           ; BSR set to: 0
 10214  001E6A  0100               	movlb	0	; () banked
 10215  001E6C  51AA               	movf	___fladd@aexp& (0+255),w,b
 10216  001E6E  0100               	movlb	0	; () banked
 10217  001E70  5DAB               	subwf	___fladd@bexp& (0+255),w,b
 10218  001E72  A0D8               	btfss	status,0,c
 10219  001E74  D7E0               	goto	l997
 10220  001E76                     l995:
 10221                           
 10222                           ; BSR set to: 0
 10223  001E76  0100               	movlb	0	; () banked
 10224  001E78  BDA9               	btfsc	___fladd@signs& (0+255),6,b
 10225  001E7A  D03F               	goto	l4775
 10226                           
 10227                           ; BSR set to: 0
 10228  001E7C  0100               	movlb	0	; () banked
 10229  001E7E  51AB               	movf	___fladd@bexp& (0+255),w,b
 10230  001E80  0100               	movlb	0	; () banked
 10231  001E82  A4D8               	btfss	status,2,c
 10232  001E84  D00A               	goto	l4757
 10233                           
 10234                           ; BSR set to: 0
 10235  001E86  0E00               	movlw	0
 10236  001E88  0100               	movlb	0	; () banked
 10237  001E8A  6F99               	movwf	?___fladd& (0+255),b
 10238  001E8C  0E00               	movlw	0
 10239  001E8E  6F9A               	movwf	(?___fladd+1)& (0+255),b
 10240  001E90  0E00               	movlw	0
 10241  001E92  6F9B               	movwf	(?___fladd+2)& (0+255),b
 10242  001E94  0E00               	movlw	0
 10243  001E96  6F9C               	movwf	(?___fladd+3)& (0+255),b
 10244                           
 10245                           ; BSR set to: 0
 10246  001E98  0012               	return	
 10247  001E9A                     l4757:
 10248                           
 10249                           ; BSR set to: 0
 10250  001E9A  0100               	movlb	0	; () banked
 10251  001E9C  519D               	movf	___fladd@a& (0+255),w,b
 10252  001E9E  0100               	movlb	0	; () banked
 10253  001EA0  2799               	addwf	___fladd@b& (0+255),f,b
 10254  001EA2  0100               	movlb	0	; () banked
 10255  001EA4  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10256  001EA6  0100               	movlb	0	; () banked
 10257  001EA8  239A               	addwfc	(___fladd@b+1)& (0+255),f,b
 10258  001EAA  0100               	movlb	0	; () banked
 10259  001EAC  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10260  001EAE  0100               	movlb	0	; () banked
 10261  001EB0  239B               	addwfc	(___fladd@b+2)& (0+255),f,b
 10262  001EB2  0100               	movlb	0	; () banked
 10263  001EB4  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10264  001EB6  0100               	movlb	0	; () banked
 10265  001EB8  239C               	addwfc	(___fladd@b+3)& (0+255),f,b
 10266                           
 10267                           ; BSR set to: 0
 10268  001EBA  0100               	movlb	0	; () banked
 10269  001EBC  A19C               	btfss	(___fladd@b+3)& (0+255),0,b
 10270  001EBE  D0CC               	goto	l4811
 10271                           
 10272                           ; BSR set to: 0
 10273  001EC0  0100               	movlb	0	; () banked
 10274  001EC2  A1AC               	btfss	___fladd@grs& (0+255),0,b
 10275  001EC4  D009               	goto	l4765
 10276                           
 10277                           ; BSR set to: 0
 10278  001EC6  0100               	movlb	0	; () banked
 10279  001EC8  90D8               	bcf	status,0,c
 10280  001ECA  33AC               	rrcf	___fladd@grs& (0+255),f,b
 10281  001ECC  0100               	movlb	0	; () banked
 10282  001ECE  51AC               	movf	___fladd@grs& (0+255),w,b
 10283  001ED0  0901               	iorlw	1
 10284  001ED2  0100               	movlb	0	; () banked
 10285  001ED4  6FAC               	movwf	___fladd@grs& (0+255),b
 10286  001ED6  D003               	goto	l4767
 10287  001ED8                     l4765:
 10288                           
 10289                           ; BSR set to: 0
 10290  001ED8  0100               	movlb	0	; () banked
 10291  001EDA  90D8               	bcf	status,0,c
 10292  001EDC  33AC               	rrcf	___fladd@grs& (0+255),f,b
 10293  001EDE                     l4767:
 10294                           
 10295                           ; BSR set to: 0
 10296  001EDE  0100               	movlb	0	; () banked
 10297  001EE0  A199               	btfss	___fladd@b& (0+255),0,b
 10298  001EE2  D002               	goto	l4771
 10299                           
 10300                           ; BSR set to: 0
 10301  001EE4  0100               	movlb	0	; () banked
 10302  001EE6  8FAC               	bsf	___fladd@grs& (0+255),7,b
 10303  001EE8                     l4771:
 10304                           
 10305                           ; BSR set to: 0
 10306  001EE8  0100               	movlb	0	; () banked
 10307  001EEA  359C               	rlcf	(___fladd@b+3)& (0+255),w,b
 10308  001EEC  339C               	rrcf	(___fladd@b+3)& (0+255),f,b
 10309  001EEE  339B               	rrcf	(___fladd@b+2)& (0+255),f,b
 10310  001EF0  339A               	rrcf	(___fladd@b+1)& (0+255),f,b
 10311  001EF2  3399               	rrcf	___fladd@b& (0+255),f,b
 10312                           
 10313                           ; BSR set to: 0
 10314  001EF4  0100               	movlb	0	; () banked
 10315  001EF6  2BAB               	incf	___fladd@bexp& (0+255),f,b
 10316                           
 10317                           ; BSR set to: 0
 10318  001EF8  D0AF               	goto	l4811
 10319  001EFA                     l4775:
 10320                           
 10321                           ; BSR set to: 0
 10322  001EFA  0100               	movlb	0	; () banked
 10323  001EFC  519D               	movf	___fladd@a& (0+255),w,b
 10324  001EFE  0100               	movlb	0	; () banked
 10325  001F00  5D99               	subwf	___fladd@b& (0+255),w,b
 10326  001F02  0100               	movlb	0	; () banked
 10327  001F04  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10328  001F06  0100               	movlb	0	; () banked
 10329  001F08  599A               	subwfb	(___fladd@b+1)& (0+255),w,b
 10330  001F0A  0100               	movlb	0	; () banked
 10331  001F0C  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10332  001F0E  0100               	movlb	0	; () banked
 10333  001F10  599B               	subwfb	(___fladd@b+2)& (0+255),w,b
 10334  001F12  0100               	movlb	0	; () banked
 10335  001F14  519C               	movf	(___fladd@b+3)& (0+255),w,b
 10336  001F16  0A80               	xorlw	128
 10337  001F18  0100               	movlb	0	; () banked
 10338  001F1A  6FA1               	movwf	??___fladd& (0+255),b
 10339  001F1C  0100               	movlb	0	; () banked
 10340  001F1E  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10341  001F20  0A80               	xorlw	128
 10342  001F22  0100               	movlb	0	; () banked
 10343  001F24  59A1               	subwfb	??___fladd& (0+255),w,b
 10344  001F26  B0D8               	btfsc	status,0,c
 10345  001F28  D050               	goto	l4785
 10346                           
 10347                           ; BSR set to: 0
 10348  001F2A  C099  F0A1         	movff	___fladd@b,??___fladd
 10349  001F2E  C09A  F0A2         	movff	___fladd@b+1,??___fladd+1
 10350  001F32  C09B  F0A3         	movff	___fladd@b+2,??___fladd+2
 10351  001F36  C09C  F0A4         	movff	___fladd@b+3,??___fladd+3
 10352  001F3A  0100               	movlb	0	; () banked
 10353  001F3C  1FA1               	comf	??___fladd& (0+255),f,b
 10354  001F3E  1FA2               	comf	(??___fladd+1)& (0+255),f,b
 10355  001F40  1FA3               	comf	(??___fladd+2)& (0+255),f,b
 10356  001F42  1FA4               	comf	(??___fladd+3)& (0+255),f,b
 10357  001F44  2BA1               	incf	??___fladd& (0+255),f,b
 10358  001F46  0E00               	movlw	0
 10359  001F48  23A2               	addwfc	(??___fladd+1)& (0+255),f,b
 10360  001F4A  23A3               	addwfc	(??___fladd+2)& (0+255),f,b
 10361  001F4C  23A4               	addwfc	(??___fladd+3)& (0+255),f,b
 10362  001F4E  0100               	movlb	0	; () banked
 10363  001F50  519D               	movf	___fladd@a& (0+255),w,b
 10364  001F52  0100               	movlb	0	; () banked
 10365  001F54  25A1               	addwf	??___fladd& (0+255),w,b
 10366  001F56  0100               	movlb	0	; () banked
 10367  001F58  6FA5               	movwf	(??___fladd+4)& (0+255),b
 10368  001F5A  0100               	movlb	0	; () banked
 10369  001F5C  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10370  001F5E  0100               	movlb	0	; () banked
 10371  001F60  21A2               	addwfc	(??___fladd+1)& (0+255),w,b
 10372  001F62  0100               	movlb	0	; () banked
 10373  001F64  6FA6               	movwf	(??___fladd+5)& (0+255),b
 10374  001F66  0100               	movlb	0	; () banked
 10375  001F68  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10376  001F6A  0100               	movlb	0	; () banked
 10377  001F6C  21A3               	addwfc	(??___fladd+2)& (0+255),w,b
 10378  001F6E  0100               	movlb	0	; () banked
 10379  001F70  6FA7               	movwf	(??___fladd+6)& (0+255),b
 10380  001F72  0100               	movlb	0	; () banked
 10381  001F74  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10382  001F76  0100               	movlb	0	; () banked
 10383  001F78  21A4               	addwfc	(??___fladd+3)& (0+255),w,b
 10384  001F7A  0100               	movlb	0	; () banked
 10385  001F7C  6FA8               	movwf	(??___fladd+7)& (0+255),b
 10386  001F7E  0EFF               	movlw	255
 10387  001F80  0100               	movlb	0	; () banked
 10388  001F82  25A5               	addwf	(??___fladd+4)& (0+255),w,b
 10389  001F84  0100               	movlb	0	; () banked
 10390  001F86  6F99               	movwf	___fladd@b& (0+255),b
 10391  001F88  0EFF               	movlw	255
 10392  001F8A  0100               	movlb	0	; () banked
 10393  001F8C  21A6               	addwfc	(??___fladd+5)& (0+255),w,b
 10394  001F8E  0100               	movlb	0	; () banked
 10395  001F90  6F9A               	movwf	(___fladd@b+1)& (0+255),b
 10396  001F92  0EFF               	movlw	255
 10397  001F94  0100               	movlb	0	; () banked
 10398  001F96  21A7               	addwfc	(??___fladd+6)& (0+255),w,b
 10399  001F98  0100               	movlb	0	; () banked
 10400  001F9A  6F9B               	movwf	(___fladd@b+2)& (0+255),b
 10401  001F9C  0EFF               	movlw	255
 10402  001F9E  0100               	movlb	0	; () banked
 10403  001FA0  21A8               	addwfc	(??___fladd+7)& (0+255),w,b
 10404  001FA2  0100               	movlb	0	; () banked
 10405  001FA4  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10406  001FA6  0E80               	movlw	128
 10407  001FA8  0100               	movlb	0	; () banked
 10408  001FAA  1BA9               	xorwf	___fladd@signs& (0+255),f,b
 10409                           
 10410                           ; BSR set to: 0
 10411  001FAC  0100               	movlb	0	; () banked
 10412  001FAE  6DAC               	negf	___fladd@grs& (0+255),b
 10413                           
 10414                           ; BSR set to: 0
 10415  001FB0  0100               	movlb	0	; () banked
 10416  001FB2  51AC               	movf	___fladd@grs& (0+255),w,b
 10417  001FB4  0100               	movlb	0	; () banked
 10418  001FB6  A4D8               	btfss	status,2,c
 10419  001FB8  D018               	goto	l1012
 10420                           
 10421                           ; BSR set to: 0
 10422  001FBA  0E01               	movlw	1
 10423  001FBC  0100               	movlb	0	; () banked
 10424  001FBE  2799               	addwf	___fladd@b& (0+255),f,b
 10425  001FC0  0E00               	movlw	0
 10426  001FC2  239A               	addwfc	(___fladd@b+1)& (0+255),f,b
 10427  001FC4  239B               	addwfc	(___fladd@b+2)& (0+255),f,b
 10428  001FC6  239C               	addwfc	(___fladd@b+3)& (0+255),f,b
 10429                           
 10430                           ; BSR set to: 0
 10431  001FC8  D010               	goto	l1012
 10432  001FCA                     l4785:
 10433                           
 10434                           ; BSR set to: 0
 10435  001FCA  0100               	movlb	0	; () banked
 10436  001FCC  519D               	movf	___fladd@a& (0+255),w,b
 10437  001FCE  0100               	movlb	0	; () banked
 10438  001FD0  5F99               	subwf	___fladd@b& (0+255),f,b
 10439  001FD2  0100               	movlb	0	; () banked
 10440  001FD4  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10441  001FD6  0100               	movlb	0	; () banked
 10442  001FD8  5B9A               	subwfb	(___fladd@b+1)& (0+255),f,b
 10443  001FDA  0100               	movlb	0	; () banked
 10444  001FDC  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10445  001FDE  0100               	movlb	0	; () banked
 10446  001FE0  5B9B               	subwfb	(___fladd@b+2)& (0+255),f,b
 10447  001FE2  0100               	movlb	0	; () banked
 10448  001FE4  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10449  001FE6  0100               	movlb	0	; () banked
 10450  001FE8  5B9C               	subwfb	(___fladd@b+3)& (0+255),f,b
 10451  001FEA                     l1012:
 10452                           
 10453                           ; BSR set to: 0
 10454  001FEA  0100               	movlb	0	; () banked
 10455  001FEC  5199               	movf	___fladd@b& (0+255),w,b
 10456  001FEE  0100               	movlb	0	; () banked
 10457  001FF0  119A               	iorwf	(___fladd@b+1)& (0+255),w,b
 10458  001FF2  0100               	movlb	0	; () banked
 10459  001FF4  119B               	iorwf	(___fladd@b+2)& (0+255),w,b
 10460  001FF6  0100               	movlb	0	; () banked
 10461  001FF8  119C               	iorwf	(___fladd@b+3)& (0+255),w,b
 10462  001FFA  A4D8               	btfss	status,2,c
 10463  001FFC  D02A               	goto	l4809
 10464                           
 10465                           ; BSR set to: 0
 10466  001FFE  0100               	movlb	0	; () banked
 10467  002000  51AC               	movf	___fladd@grs& (0+255),w,b
 10468  002002  0100               	movlb	0	; () banked
 10469  002004  A4D8               	btfss	status,2,c
 10470  002006  D025               	goto	l4809
 10471                           
 10472                           ; BSR set to: 0
 10473  002008  0E00               	movlw	0
 10474  00200A  0100               	movlb	0	; () banked
 10475  00200C  6F99               	movwf	?___fladd& (0+255),b
 10476  00200E  0E00               	movlw	0
 10477  002010  6F9A               	movwf	(?___fladd+1)& (0+255),b
 10478  002012  0E00               	movlw	0
 10479  002014  6F9B               	movwf	(?___fladd+2)& (0+255),b
 10480  002016  0E00               	movlw	0
 10481  002018  6F9C               	movwf	(?___fladd+3)& (0+255),b
 10482                           
 10483                           ; BSR set to: 0
 10484  00201A  0012               	return	
 10485  00201C                     l4793:
 10486                           
 10487                           ; BSR set to: 0
 10488  00201C  0100               	movlb	0	; () banked
 10489  00201E  90D8               	bcf	status,0,c
 10490  002020  3799               	rlcf	___fladd@b& (0+255),f,b
 10491  002022  379A               	rlcf	(___fladd@b+1)& (0+255),f,b
 10492  002024  379B               	rlcf	(___fladd@b+2)& (0+255),f,b
 10493  002026  379C               	rlcf	(___fladd@b+3)& (0+255),f,b
 10494                           
 10495                           ; BSR set to: 0
 10496  002028  0100               	movlb	0	; () banked
 10497  00202A  AFAC               	btfss	___fladd@grs& (0+255),7,b
 10498  00202C  D002               	goto	l4799
 10499                           
 10500                           ; BSR set to: 0
 10501  00202E  0100               	movlb	0	; () banked
 10502  002030  8199               	bsf	___fladd@b& (0+255),0,b
 10503  002032                     l4799:
 10504                           
 10505                           ; BSR set to: 0
 10506  002032  0100               	movlb	0	; () banked
 10507  002034  A1AC               	btfss	___fladd@grs& (0+255),0,b
 10508  002036  D003               	goto	l4803
 10509                           
 10510                           ; BSR set to: 0
 10511  002038  80D8               	bsf	status,0,c
 10512  00203A  0100               	movlb	0	; () banked
 10513  00203C  D002               	goto	L15
 10514  00203E                     l4803:
 10515                           
 10516                           ; BSR set to: 0
 10517  00203E  0100               	movlb	0	; () banked
 10518  002040  90D8               	bcf	status,0,c
 10519  002042                     L15:
 10520  002042  37AC               	rlcf	___fladd@grs& (0+255),f,b
 10521                           
 10522                           ; BSR set to: 0
 10523                           
 10524                           ; BSR set to: 0
 10525  002044  0100               	movlb	0	; () banked
 10526  002046  51AB               	movf	___fladd@bexp& (0+255),w,b
 10527  002048  0100               	movlb	0	; () banked
 10528  00204A  B4D8               	btfsc	status,2,c
 10529  00204C  D002               	goto	l4809
 10530                           
 10531                           ; BSR set to: 0
 10532  00204E  0100               	movlb	0	; () banked
 10533  002050  07AB               	decf	___fladd@bexp& (0+255),f,b
 10534  002052                     l4809:
 10535                           
 10536                           ; BSR set to: 0
 10537  002052  0100               	movlb	0	; () banked
 10538  002054  AF9B               	btfss	(___fladd@b+2)& (0+255),7,b
 10539  002056  D7E2               	goto	l4793
 10540  002058                     l4811:
 10541                           
 10542                           ; BSR set to: 0
 10543  002058  0E00               	movlw	0
 10544  00205A  0100               	movlb	0	; () banked
 10545  00205C  6FAA               	movwf	___fladd@aexp& (0+255),b
 10546                           
 10547                           ; BSR set to: 0
 10548  00205E  0100               	movlb	0	; () banked
 10549  002060  AFAC               	btfss	___fladd@grs& (0+255),7,b
 10550  002062  D00D               	goto	l1021
 10551                           
 10552                           ; BSR set to: 0
 10553  002064  C0AC  F0A1         	movff	___fladd@grs,??___fladd
 10554  002068  0E7F               	movlw	127
 10555  00206A  0100               	movlb	0	; () banked
 10556  00206C  17A1               	andwf	??___fladd& (0+255),f,b
 10557  00206E  A4D8               	btfss	status,2,c
 10558  002070  D003               	goto	l4819
 10559                           
 10560                           ; BSR set to: 0
 10561                           
 10562                           ; BSR set to: 0
 10563  002072  0100               	movlb	0	; () banked
 10564  002074  A199               	btfss	___fladd@b& (0+255),0,b
 10565  002076  D003               	goto	l1021
 10566  002078                     l4819:
 10567                           
 10568                           ; BSR set to: 0
 10569  002078  0E01               	movlw	1
 10570  00207A  0100               	movlb	0	; () banked
 10571  00207C  6FAA               	movwf	___fladd@aexp& (0+255),b
 10572  00207E                     l1021:
 10573                           
 10574                           ; BSR set to: 0
 10575  00207E  0100               	movlb	0	; () banked
 10576  002080  51AA               	movf	___fladd@aexp& (0+255),w,b
 10577  002082  0100               	movlb	0	; () banked
 10578  002084  B4D8               	btfsc	status,2,c
 10579  002086  D026               	goto	l4829
 10580                           
 10581                           ; BSR set to: 0
 10582  002088  0E01               	movlw	1
 10583  00208A  0100               	movlb	0	; () banked
 10584  00208C  2799               	addwf	___fladd@b& (0+255),f,b
 10585  00208E  0E00               	movlw	0
 10586  002090  239A               	addwfc	(___fladd@b+1)& (0+255),f,b
 10587  002092  239B               	addwfc	(___fladd@b+2)& (0+255),f,b
 10588  002094  239C               	addwfc	(___fladd@b+3)& (0+255),f,b
 10589                           
 10590                           ; BSR set to: 0
 10591  002096  0100               	movlb	0	; () banked
 10592  002098  A19C               	btfss	(___fladd@b+3)& (0+255),0,b
 10593  00209A  D01C               	goto	l4829
 10594                           
 10595                           ; BSR set to: 0
 10596  00209C  C099  F0A1         	movff	___fladd@b,??___fladd
 10597  0020A0  C09A  F0A2         	movff	___fladd@b+1,??___fladd+1
 10598  0020A4  C09B  F0A3         	movff	___fladd@b+2,??___fladd+2
 10599  0020A8  C09C  F0A4         	movff	___fladd@b+3,??___fladd+3
 10600  0020AC  0100               	movlb	0	; () banked
 10601  0020AE  35A4               	rlcf	(??___fladd+3)& (0+255),w,b
 10602  0020B0  33A4               	rrcf	(??___fladd+3)& (0+255),f,b
 10603  0020B2  33A3               	rrcf	(??___fladd+2)& (0+255),f,b
 10604  0020B4  33A2               	rrcf	(??___fladd+1)& (0+255),f,b
 10605  0020B6  33A1               	rrcf	??___fladd& (0+255),f,b
 10606  0020B8  C0A1  F099         	movff	??___fladd,___fladd@b
 10607  0020BC  C0A2  F09A         	movff	??___fladd+1,___fladd@b+1
 10608  0020C0  C0A3  F09B         	movff	??___fladd+2,___fladd@b+2
 10609  0020C4  C0A4  F09C         	movff	??___fladd+3,___fladd@b+3
 10610  0020C8  0100               	movlb	0	; () banked
 10611  0020CA  29AB               	incf	___fladd@bexp& (0+255),w,b
 10612  0020CC  B4D8               	btfsc	status,2,c
 10613  0020CE  D002               	goto	l4829
 10614                           
 10615                           ; BSR set to: 0
 10616  0020D0  0100               	movlb	0	; () banked
 10617  0020D2  2BAB               	incf	___fladd@bexp& (0+255),f,b
 10618  0020D4                     l4829:
 10619                           
 10620                           ; BSR set to: 0
 10621  0020D4  0100               	movlb	0	; () banked
 10622  0020D6  29AB               	incf	___fladd@bexp& (0+255),w,b
 10623  0020D8  B4D8               	btfsc	status,2,c
 10624  0020DA  D005               	goto	l4833
 10625                           
 10626                           ; BSR set to: 0
 10627  0020DC  0100               	movlb	0	; () banked
 10628  0020DE  51AB               	movf	___fladd@bexp& (0+255),w,b
 10629  0020E0  0100               	movlb	0	; () banked
 10630  0020E2  A4D8               	btfss	status,2,c
 10631  0020E4  D011               	goto	l4837
 10632  0020E6                     l4833:
 10633                           
 10634                           ; BSR set to: 0
 10635  0020E6  0E00               	movlw	0
 10636  0020E8  0100               	movlb	0	; () banked
 10637  0020EA  6F99               	movwf	___fladd@b& (0+255),b
 10638  0020EC  0E00               	movlw	0
 10639  0020EE  6F9A               	movwf	(___fladd@b+1)& (0+255),b
 10640  0020F0  0E00               	movlw	0
 10641  0020F2  6F9B               	movwf	(___fladd@b+2)& (0+255),b
 10642  0020F4  0E00               	movlw	0
 10643  0020F6  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10644  0020F8  0100               	movlb	0	; () banked
 10645  0020FA  51AB               	movf	___fladd@bexp& (0+255),w,b
 10646  0020FC  0100               	movlb	0	; () banked
 10647  0020FE  A4D8               	btfss	status,2,c
 10648  002100  D003               	goto	l4837
 10649                           
 10650                           ; BSR set to: 0
 10651  002102  0E00               	movlw	0
 10652  002104  0100               	movlb	0	; () banked
 10653  002106  6FA9               	movwf	___fladd@signs& (0+255),b
 10654  002108                     l4837:
 10655                           
 10656                           ; BSR set to: 0
 10657  002108  0100               	movlb	0	; () banked
 10658  00210A  A1AB               	btfss	___fladd@bexp& (0+255),0,b
 10659  00210C  D003               	goto	l4841
 10660                           
 10661                           ; BSR set to: 0
 10662  00210E  0100               	movlb	0	; () banked
 10663  002110  8F9B               	bsf	(___fladd@b+2)& (0+255),7,b
 10664  002112  D002               	goto	l4843
 10665  002114                     l4841:
 10666                           
 10667                           ; BSR set to: 0
 10668  002114  0100               	movlb	0	; () banked
 10669  002116  9F9B               	bcf	(___fladd@b+2)& (0+255),7,b
 10670  002118                     l4843:
 10671                           
 10672                           ; BSR set to: 0
 10673  002118  0100               	movlb	0	; () banked
 10674  00211A  90D8               	bcf	status,0,c
 10675  00211C  31AB               	rrcf	___fladd@bexp& (0+255),w,b
 10676  00211E  0100               	movlb	0	; () banked
 10677  002120  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10678                           
 10679                           ; BSR set to: 0
 10680  002122  0100               	movlb	0	; () banked
 10681  002124  AFA9               	btfss	___fladd@signs& (0+255),7,b
 10682  002126  D002               	goto	l4849
 10683                           
 10684                           ; BSR set to: 0
 10685  002128  0100               	movlb	0	; () banked
 10686  00212A  8F9C               	bsf	(___fladd@b+3)& (0+255),7,b
 10687  00212C                     l4849:
 10688                           
 10689                           ; BSR set to: 0
 10690  00212C  C099  F099         	movff	___fladd@b,?___fladd
 10691  002130  C09A  F09A         	movff	___fladd@b+1,?___fladd+1
 10692  002134  C09B  F09B         	movff	___fladd@b+2,?___fladd+2
 10693  002138  C09C  F09C         	movff	___fladd@b+3,?___fladd+3
 10694  00213C  0012               	return	
 10695  00213E                     __end_of___fladd:
 10696                           	opt stack 0
 10697                           tblptru	equ	0xFF8
 10698                           tblptrh	equ	0xFF7
 10699                           tblptrl	equ	0xFF6
 10700                           tablat	equ	0xFF5
 10701                           prodh	equ	0xFF4
 10702                           prodl	equ	0xFF3
 10703                           intcon	equ	0xFF2
 10704                           postinc0	equ	0xFEE
 10705                           wreg	equ	0xFE8
 10706                           postdec1	equ	0xFE5
 10707                           fsr1l	equ	0xFE1
 10708                           indf2	equ	0xFDF
 10709                           postinc2	equ	0xFDE
 10710                           postdec2	equ	0xFDD
 10711                           fsr2h	equ	0xFDA
 10712                           fsr2l	equ	0xFD9
 10713                           status	equ	0xFD8
 10714                           
 10715 ;; *************** function _display7seg *****************
 10716 ;; Defined at:
 10717 ;;		line 35 in file "display7s.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;  v               1    wreg     unsigned char 
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;  v               1   23[COMRAM] unsigned char 
 10722 ;; Return value:  Size  Location     Type
 10723 ;;                  1    wreg      unsigned char 
 10724 ;; Registers used:
 10725 ;;		wreg, status,2, status,0
 10726 ;; Tracked objects:
 10727 ;;		On entry : 0/0
 10728 ;;		On exit  : 0/0
 10729 ;;		Unchanged: 0/0
 10730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;Total ram usage:        1 bytes
 10736 ;; Hardware stack levels used:    1
 10737 ;; Hardware stack levels required when called:    3
 10738 ;; This function calls:
 10739 ;;		Nothing
 10740 ;; This function is called by:
 10741 ;;		_main
 10742 ;; This function uses a non-reentrant model
 10743 ;;
 10744                           
 10745                           	psect	text44
 10746  003E48                     __ptext44:
 10747                           	opt stack 0
 10748  003E48                     _display7seg:
 10749                           	opt stack 27
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;incstack = 0
 10753                           ;display7seg@v stored from wreg
 10754  003E48  6E18               	movwf	display7seg@v,c
 10755                           
 10756                           ;display7s.c: 37: switch(v)
 10757  003E4A  D016               	goto	l4471
 10758  003E4C                     l4425:
 10759                           
 10760                           ;display7s.c: 40: return 0x3F;
 10761  003E4C  0E3F               	movlw	63
 10762  003E4E  0012               	return	
 10763  003E50                     l4429:
 10764                           
 10765                           ;display7s.c: 42: return 0x06;
 10766  003E50  0E06               	movlw	6
 10767  003E52  0012               	return	
 10768  003E54                     l4433:
 10769                           
 10770                           ;display7s.c: 44: return 0x5B;
 10771  003E54  0E5B               	movlw	91
 10772  003E56  0012               	return	
 10773  003E58                     l4437:
 10774                           
 10775                           ;display7s.c: 46: return 0x4F;
 10776  003E58  0E4F               	movlw	79
 10777  003E5A  0012               	return	
 10778  003E5C                     l4441:
 10779                           
 10780                           ;display7s.c: 48: return 0x66;
 10781  003E5C  0E66               	movlw	102
 10782  003E5E  0012               	return	
 10783  003E60                     l4445:
 10784                           
 10785                           ;display7s.c: 50: return 0x6D;
 10786  003E60  0E6D               	movlw	109
 10787  003E62  0012               	return	
 10788  003E64                     l4449:
 10789                           
 10790                           ;display7s.c: 52: return 0x7D;
 10791  003E64  0E7D               	movlw	125
 10792  003E66  0012               	return	
 10793  003E68                     l4453:
 10794                           
 10795                           ;display7s.c: 54: return 0x07;
 10796  003E68  0E07               	movlw	7
 10797  003E6A  0012               	return	
 10798  003E6C                     l4457:
 10799                           
 10800                           ;display7s.c: 56: return 0x7F;
 10801  003E6C  0E7F               	movlw	127
 10802  003E6E  0012               	return	
 10803  003E70                     l4461:
 10804                           
 10805                           ;display7s.c: 58: return 0x6F;
 10806  003E70  0E6F               	movlw	111
 10807  003E72  0012               	return	
 10808  003E74                     l4465:
 10809                           
 10810                           ;display7s.c: 60: return 0;
 10811  003E74  0E00               	movlw	0
 10812                           
 10813                           ;display7s.c: 61: }
 10814  003E76  0012               	return	
 10815  003E78                     l4471:
 10816  003E78  5018               	movf	display7seg@v,w,c
 10817                           
 10818                           ; Switch size 1, requested type "space"
 10819                           ; Number of cases is 10, Range of values is 0 to 9
 10820                           ; switch strategies available:
 10821                           ; Name         Instructions Cycles
 10822                           ; simple_byte           31    16 (average)
 10823                           ;	Chosen strategy is simple_byte
 10824  003E7A  0A00               	xorlw	0	; case 0
 10825  003E7C  B4D8               	btfsc	status,2,c
 10826  003E7E  D7E6               	goto	l4425
 10827  003E80  0A01               	xorlw	1	; case 1
 10828  003E82  B4D8               	btfsc	status,2,c
 10829  003E84  D7E5               	goto	l4429
 10830  003E86  0A03               	xorlw	3	; case 2
 10831  003E88  B4D8               	btfsc	status,2,c
 10832  003E8A  D7E4               	goto	l4433
 10833  003E8C  0A01               	xorlw	1	; case 3
 10834  003E8E  B4D8               	btfsc	status,2,c
 10835  003E90  D7E3               	goto	l4437
 10836  003E92  0A07               	xorlw	7	; case 4
 10837  003E94  B4D8               	btfsc	status,2,c
 10838  003E96  D7E2               	goto	l4441
 10839  003E98  0A01               	xorlw	1	; case 5
 10840  003E9A  B4D8               	btfsc	status,2,c
 10841  003E9C  D7E1               	goto	l4445
 10842  003E9E  0A03               	xorlw	3	; case 6
 10843  003EA0  B4D8               	btfsc	status,2,c
 10844  003EA2  D7E0               	goto	l4449
 10845  003EA4  0A01               	xorlw	1	; case 7
 10846  003EA6  B4D8               	btfsc	status,2,c
 10847  003EA8  D7DF               	goto	l4453
 10848  003EAA  0A0F               	xorlw	15	; case 8
 10849  003EAC  B4D8               	btfsc	status,2,c
 10850  003EAE  D7DE               	goto	l4457
 10851  003EB0  0A01               	xorlw	1	; case 9
 10852  003EB2  B4D8               	btfsc	status,2,c
 10853  003EB4  D7DD               	goto	l4461
 10854  003EB6  D7DE               	goto	l4465
 10855  003EB8                     __end_of_display7seg:
 10856                           	opt stack 0
 10857                           tblptru	equ	0xFF8
 10858                           tblptrh	equ	0xFF7
 10859                           tblptrl	equ	0xFF6
 10860                           tablat	equ	0xFF5
 10861                           prodh	equ	0xFF4
 10862                           prodl	equ	0xFF3
 10863                           intcon	equ	0xFF2
 10864                           postinc0	equ	0xFEE
 10865                           wreg	equ	0xFE8
 10866                           postdec1	equ	0xFE5
 10867                           fsr1l	equ	0xFE1
 10868                           indf2	equ	0xFDF
 10869                           postinc2	equ	0xFDE
 10870                           postdec2	equ	0xFDD
 10871                           fsr2h	equ	0xFDA
 10872                           fsr2l	equ	0xFD9
 10873                           status	equ	0xFD8
 10874                           
 10875 ;; *************** function _highIsr *****************
 10876 ;; Defined at:
 10877 ;;		line 97 in file "pwm_asl.c"
 10878 ;; Parameters:    Size  Location     Type
 10879 ;;		None
 10880 ;; Auto vars:     Size  Location     Type
 10881 ;;		None
 10882 ;; Return value:  Size  Location     Type
 10883 ;;                  1    wreg      void 
 10884 ;; Registers used:
 10885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10886 ;; Tracked objects:
 10887 ;;		On entry : 0/0
 10888 ;;		On exit  : 0/0
 10889 ;;		Unchanged: 0/0
 10890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10893 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10894 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;Total ram usage:       14 bytes
 10896 ;; Hardware stack levels used:    1
 10897 ;; Hardware stack levels required when called:    2
 10898 ;; This function calls:
 10899 ;;		_RX_isr
 10900 ;;		_Timer1_isr
 10901 ;;		___lwmod
 10902 ;;		_examine
 10903 ;; This function is called by:
 10904 ;;		Interrupt level 2
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           	psect	intcode
 10909  000008                     __pintcode:
 10910                           	opt stack 0
 10911  000008                     _highIsr:
 10912                           	opt stack 22
 10913                           
 10914                           ;incstack = 0
 10915  000008  8268               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10916  00000A  CFFA F00A          	movff	pclath,??_highIsr
 10917  00000E  CFFB F00B          	movff	pclatu,??_highIsr+1
 10918  000012  EDF0  F01C         	call	int_func,f	;refresh shadow registers
 10919                           pclatu	equ	0xFFB
 10920                           pclath	equ	0xFFA
 10921                           tblptru	equ	0xFF8
 10922                           tblptrh	equ	0xFF7
 10923                           tblptrl	equ	0xFF6
 10924                           tablat	equ	0xFF5
 10925                           prodh	equ	0xFF4
 10926                           prodl	equ	0xFF3
 10927                           intcon	equ	0xFF2
 10928                           postinc0	equ	0xFEE
 10929                           wreg	equ	0xFE8
 10930                           postdec1	equ	0xFE5
 10931                           fsr1l	equ	0xFE1
 10932                           indf2	equ	0xFDF
 10933                           postinc2	equ	0xFDE
 10934                           postdec2	equ	0xFDD
 10935                           fsr2h	equ	0xFDA
 10936                           fsr2l	equ	0xFD9
 10937                           status	equ	0xFD8
 10938                           
 10939                           	psect	intcode_body
 10940  0039E0                     __pintcode_body:
 10941                           	opt stack 22
 10942  0039E0                     int_func:
 10943                           	opt stack 22
 10944  0039E0  0006               	pop		; remove dummy address from shadow register refresh
 10945  0039E2  CFE9 F00C          	movff	fsr0l,??_highIsr+2
 10946  0039E6  CFEA F00D          	movff	fsr0h,??_highIsr+3
 10947  0039EA  CFE1 F00E          	movff	fsr1l,??_highIsr+4
 10948  0039EE  CFE2 F00F          	movff	fsr1h,??_highIsr+5
 10949  0039F2  CFD9 F010          	movff	fsr2l,??_highIsr+6
 10950  0039F6  CFDA F011          	movff	fsr2h,??_highIsr+7
 10951  0039FA  CFF3 F012          	movff	prodl,??_highIsr+8
 10952  0039FE  CFF4 F013          	movff	prodh,??_highIsr+9
 10953  003A02  CFF6 F014          	movff	tblptrl,??_highIsr+10
 10954  003A06  CFF7 F015          	movff	tblptrh,??_highIsr+11
 10955  003A0A  CFF8 F016          	movff	tblptru,??_highIsr+12
 10956  003A0E  CFF5 F017          	movff	tablat,??_highIsr+13
 10957                           
 10958                           ;pwm_asl.c: 100: if(PIR1bits.TMR1IF) Timer1_isr(p2%3);
 10959  003A12  A09E               	btfss	3998,0,c	;volatile
 10960  003A14  D011               	goto	i2l92
 10961  003A16  C05B  F001         	movff	_p2,___lwmod@dividend
 10962  003A1A  C05C  F002         	movff	_p2+1,___lwmod@dividend+1
 10963  003A1E  0E00               	movlw	0
 10964  003A20  6E04               	movwf	___lwmod@divisor+1,c
 10965  003A22  0E03               	movlw	3
 10966  003A24  6E03               	movwf	___lwmod@divisor,c
 10967  003A26  ECB4  F020         	call	___lwmod	;wreg free
 10968  003A2A  C001  F007         	movff	?___lwmod,Timer1_isr@f
 10969  003A2E  C002  F008         	movff	?___lwmod+1,Timer1_isr@f+1
 10970  003A32  EC70  F01E         	call	_Timer1_isr	;wreg free
 10971  003A36  D018               	goto	i2l96
 10972  003A38                     i2l92:
 10973                           
 10974                           ;pwm_asl.c: 101: else if(PIR1bits.RCIF){
 10975  003A38  AA9E               	btfss	3998,5,c	;volatile
 10976  003A3A  D016               	goto	i2l96
 10977                           
 10978                           ;pwm_asl.c: 102: strr[size++]=RX_isr();
 10979  003A3C  0E65               	movlw	low _strr
 10980  003A3E  245D               	addwf	_size,w,c
 10981  003A40  6ED9               	movwf	fsr2l,c
 10982  003A42  0E00               	movlw	high _strr
 10983  003A44  205E               	addwfc	_size+1,w,c
 10984  003A46  6EDA               	movwf	fsr2h,c
 10985  003A48  EC50  F021         	call	_RX_isr	;wreg free
 10986  003A4C  6EDF               	movwf	indf2,c
 10987  003A4E  4A5D               	infsnz	_size,f,c
 10988  003A50  2A5E               	incf	_size+1,f,c
 10989                           
 10990                           ;pwm_asl.c: 103: if(size==3){
 10991  003A52  0E03               	movlw	3
 10992  003A54  185D               	xorwf	_size,w,c
 10993  003A56  105E               	iorwf	_size+1,w,c
 10994  003A58  A4D8               	btfss	status,2,c
 10995  003A5A  D004               	goto	i2l4501
 10996                           
 10997                           ;pwm_asl.c: 104: size=0;
 10998  003A5C  0E00               	movlw	0
 10999  003A5E  6E5E               	movwf	_size+1,c
 11000  003A60  0E00               	movlw	0
 11001  003A62  6E5D               	movwf	_size,c
 11002  003A64                     i2l4501:
 11003                           
 11004                           ;pwm_asl.c: 105: }
 11005                           ;pwm_asl.c: 106: examine();
 11006  003A64  ECF0  F01F         	call	_examine	;wreg free
 11007  003A68                     i2l96:
 11008  003A68  C017  FFF5         	movff	??_highIsr+13,tablat
 11009  003A6C  C016  FFF8         	movff	??_highIsr+12,tblptru
 11010  003A70  C015  FFF7         	movff	??_highIsr+11,tblptrh
 11011  003A74  C014  FFF6         	movff	??_highIsr+10,tblptrl
 11012  003A78  C013  FFF4         	movff	??_highIsr+9,prodh
 11013  003A7C  C012  FFF3         	movff	??_highIsr+8,prodl
 11014  003A80  C011  FFDA         	movff	??_highIsr+7,fsr2h
 11015  003A84  C010  FFD9         	movff	??_highIsr+6,fsr2l
 11016  003A88  C00F  FFE2         	movff	??_highIsr+5,fsr1h
 11017  003A8C  C00E  FFE1         	movff	??_highIsr+4,fsr1l
 11018  003A90  C00D  FFEA         	movff	??_highIsr+3,fsr0h
 11019  003A94  C00C  FFE9         	movff	??_highIsr+2,fsr0l
 11020  003A98  C00B  FFFB         	movff	??_highIsr+1,pclatu
 11021  003A9C  C00A  FFFA         	movff	??_highIsr,pclath
 11022  003AA0  9268               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11023  003AA2  0011               	retfie		f
 11024  003AA4                     __end_of_highIsr:
 11025                           	opt stack 0
 11026                           pclatu	equ	0xFFB
 11027                           pclath	equ	0xFFA
 11028                           tblptru	equ	0xFF8
 11029                           tblptrh	equ	0xFF7
 11030                           tblptrl	equ	0xFF6
 11031                           tablat	equ	0xFF5
 11032                           prodh	equ	0xFF4
 11033                           prodl	equ	0xFF3
 11034                           intcon	equ	0xFF2
 11035                           postinc0	equ	0xFEE
 11036                           fsr0h	equ	0xFEA
 11037                           fsr0l	equ	0xFE9
 11038                           wreg	equ	0xFE8
 11039                           postdec1	equ	0xFE5
 11040                           fsr1h	equ	0xFE2
 11041                           fsr1l	equ	0xFE1
 11042                           indf2	equ	0xFDF
 11043                           postinc2	equ	0xFDE
 11044                           postdec2	equ	0xFDD
 11045                           fsr2h	equ	0xFDA
 11046                           fsr2l	equ	0xFD9
 11047                           status	equ	0xFD8
 11048                           
 11049 ;; *************** function _examine *****************
 11050 ;; Defined at:
 11051 ;;		line 116 in file "pwm_asl.c"
 11052 ;; Parameters:    Size  Location     Type
 11053 ;;		None
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;		None
 11056 ;; Return value:  Size  Location     Type
 11057 ;;                  1    wreg      void 
 11058 ;; Registers used:
 11059 ;;		wreg, status,2, status,0
 11060 ;; Tracked objects:
 11061 ;;		On entry : 0/0
 11062 ;;		On exit  : 0/0
 11063 ;;		Unchanged: 0/0
 11064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;Total ram usage:        0 bytes
 11070 ;; Hardware stack levels used:    1
 11071 ;; This function calls:
 11072 ;;		Nothing
 11073 ;; This function is called by:
 11074 ;;		_highIsr
 11075 ;; This function uses a non-reentrant model
 11076 ;;
 11077                           
 11078                           	psect	text46
 11079  003FE0                     __ptext46:
 11080                           	opt stack 0
 11081  003FE0                     _examine:
 11082                           	opt stack 23
 11083                           
 11084                           ;pwm_asl.c: 117: if(strr[0]=='o'){
 11085                           
 11086                           ;incstack = 0
 11087  003FE0  0E6F               	movlw	111
 11088  003FE2  1865               	xorwf	_strr,w,c
 11089  003FE4  A4D8               	btfss	status,2,c
 11090  003FE6  0012               	return	
 11091                           
 11092                           ;pwm_asl.c: 118: if(strr[1]=='n'){
 11093  003FE8  0E6E               	movlw	110
 11094  003FEA  1866               	xorwf	_strr+1,w,c
 11095  003FEC  A4D8               	btfss	status,2,c
 11096  003FEE  D010               	goto	i2l3963
 11097                           
 11098                           ;pwm_asl.c: 119: size=0;
 11099  003FF0  0E00               	movlw	0
 11100  003FF2  6E5E               	movwf	_size+1,c
 11101  003FF4  0E00               	movlw	0
 11102  003FF6  6E5D               	movwf	_size,c
 11103                           
 11104                           ;pwm_asl.c: 120: f= 1;
 11105  003FF8  0E00               	movlw	0
 11106  003FFA  0101               	movlb	1	; () banked
 11107  003FFC  6F44               	movwf	(_f+1)& (0+255),b
 11108  003FFE  0E01               	movlw	1
 11109  004000  6F43               	movwf	_f& (0+255),b
 11110                           
 11111                           ;pwm_asl.c: 121: strr[0]='\n';
 11112  004002  0E0A               	movlw	10
 11113  004004  6E65               	movwf	_strr,c
 11114                           
 11115                           ;pwm_asl.c: 122: strr[1]='\n';
 11116  004006  0E0A               	movlw	10
 11117  004008  6E66               	movwf	_strr+1,c
 11118                           
 11119                           ;pwm_asl.c: 123: strr[2]='\n';
 11120  00400A  0E0A               	movlw	10
 11121  00400C  6E67               	movwf	_strr+2,c
 11122                           
 11123                           ;pwm_asl.c: 124: }else if(strr[1]=='f'){
 11124  00400E  0012               	return	
 11125  004010                     i2l3963:
 11126  004010  0E66               	movlw	102
 11127  004012  1866               	xorwf	_strr+1,w,c
 11128  004014  A4D8               	btfss	status,2,c
 11129  004016  0012               	return	
 11130                           
 11131                           ;pwm_asl.c: 125: if(strr[2]=='f'){
 11132  004018  0E66               	movlw	102
 11133  00401A  1867               	xorwf	_strr+2,w,c
 11134  00401C  A4D8               	btfss	status,2,c
 11135  00401E  0012               	return	
 11136                           
 11137                           ;pwm_asl.c: 126: size=0;
 11138  004020  0E00               	movlw	0
 11139  004022  6E5E               	movwf	_size+1,c
 11140  004024  0E00               	movlw	0
 11141  004026  6E5D               	movwf	_size,c
 11142                           
 11143                           ;pwm_asl.c: 127: f= 0;
 11144  004028  0E00               	movlw	0
 11145  00402A  0101               	movlb	1	; () banked
 11146  00402C  6F44               	movwf	(_f+1)& (0+255),b
 11147  00402E  0E00               	movlw	0
 11148  004030  6F43               	movwf	_f& (0+255),b
 11149                           
 11150                           ;pwm_asl.c: 128: strr[0]='\n';
 11151  004032  0E0A               	movlw	10
 11152  004034  6E65               	movwf	_strr,c
 11153                           
 11154                           ;pwm_asl.c: 129: strr[1]='\n';
 11155  004036  0E0A               	movlw	10
 11156  004038  6E66               	movwf	_strr+1,c
 11157                           
 11158                           ;pwm_asl.c: 130: strr[2]='\n';
 11159  00403A  0E0A               	movlw	10
 11160  00403C  6E67               	movwf	_strr+2,c
 11161                           
 11162                           ; BSR set to: 1
 11163                           
 11164                           ; BSR set to: 1
 11165                           
 11166                           ; BSR set to: 1
 11167  00403E  0012               	return	
 11168  004040                     __end_of_examine:
 11169                           	opt stack 0
 11170                           pclatu	equ	0xFFB
 11171                           pclath	equ	0xFFA
 11172                           tblptru	equ	0xFF8
 11173                           tblptrh	equ	0xFF7
 11174                           tblptrl	equ	0xFF6
 11175                           tablat	equ	0xFF5
 11176                           prodh	equ	0xFF4
 11177                           prodl	equ	0xFF3
 11178                           intcon	equ	0xFF2
 11179                           postinc0	equ	0xFEE
 11180                           fsr0h	equ	0xFEA
 11181                           fsr0l	equ	0xFE9
 11182                           wreg	equ	0xFE8
 11183                           postdec1	equ	0xFE5
 11184                           fsr1h	equ	0xFE2
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           fsr2h	equ	0xFDA
 11190                           fsr2l	equ	0xFD9
 11191                           status	equ	0xFD8
 11192                           
 11193 ;; *************** function ___lwmod *****************
 11194 ;; Defined at:
 11195 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;  dividend        2    0[COMRAM] unsigned int 
 11198 ;;  divisor         2    2[COMRAM] unsigned int 
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  counter         1    4[COMRAM] unsigned char 
 11201 ;; Return value:  Size  Location     Type
 11202 ;;                  2    0[COMRAM] unsigned int 
 11203 ;; Registers used:
 11204 ;;		wreg, status,2, status,0
 11205 ;; Tracked objects:
 11206 ;;		On entry : 0/0
 11207 ;;		On exit  : 0/0
 11208 ;;		Unchanged: 0/0
 11209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11210 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11211 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;Total ram usage:        5 bytes
 11215 ;; Hardware stack levels used:    1
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_highIsr
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           	psect	text47
 11224  004168                     __ptext47:
 11225                           	opt stack 0
 11226  004168                     ___lwmod:
 11227                           	opt stack 23
 11228                           
 11229                           ;incstack = 0
 11230  004168  5003               	movf	___lwmod@divisor,w,c
 11231  00416A  1004               	iorwf	___lwmod@divisor+1,w,c
 11232  00416C  B4D8               	btfsc	status,2,c
 11233  00416E  D018               	goto	i2l964
 11234  004170  0E01               	movlw	1
 11235  004172  6E05               	movwf	___lwmod@counter,c
 11236  004174  D004               	goto	i2l4479
 11237  004176                     i2l4477:
 11238  004176  90D8               	bcf	status,0,c
 11239  004178  3603               	rlcf	___lwmod@divisor,f,c
 11240  00417A  3604               	rlcf	___lwmod@divisor+1,f,c
 11241  00417C  2A05               	incf	___lwmod@counter,f,c
 11242  00417E                     i2l4479:
 11243  00417E  AE04               	btfss	___lwmod@divisor+1,7,c
 11244  004180  D7FA               	goto	i2l4477
 11245  004182                     i2l4481:
 11246  004182  5003               	movf	___lwmod@divisor,w,c
 11247  004184  5C01               	subwf	___lwmod@dividend,w,c
 11248  004186  5004               	movf	___lwmod@divisor+1,w,c
 11249  004188  5802               	subwfb	___lwmod@dividend+1,w,c
 11250  00418A  A0D8               	btfss	status,0,c
 11251  00418C  D004               	goto	i2l4485
 11252  00418E  5003               	movf	___lwmod@divisor,w,c
 11253  004190  5E01               	subwf	___lwmod@dividend,f,c
 11254  004192  5004               	movf	___lwmod@divisor+1,w,c
 11255  004194  5A02               	subwfb	___lwmod@dividend+1,f,c
 11256  004196                     i2l4485:
 11257  004196  90D8               	bcf	status,0,c
 11258  004198  3204               	rrcf	___lwmod@divisor+1,f,c
 11259  00419A  3203               	rrcf	___lwmod@divisor,f,c
 11260  00419C  2E05               	decfsz	___lwmod@counter,f,c
 11261  00419E  D7F1               	goto	i2l4481
 11262  0041A0                     i2l964:
 11263  0041A0  C001  F001         	movff	___lwmod@dividend,?___lwmod
 11264  0041A4  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 11265  0041A8  0012               	return		;funcret
 11266  0041AA                     __end_of___lwmod:
 11267                           	opt stack 0
 11268                           pclatu	equ	0xFFB
 11269                           pclath	equ	0xFFA
 11270                           tblptru	equ	0xFF8
 11271                           tblptrh	equ	0xFF7
 11272                           tblptrl	equ	0xFF6
 11273                           tablat	equ	0xFF5
 11274                           prodh	equ	0xFF4
 11275                           prodl	equ	0xFF3
 11276                           intcon	equ	0xFF2
 11277                           postinc0	equ	0xFEE
 11278                           fsr0h	equ	0xFEA
 11279                           fsr0l	equ	0xFE9
 11280                           wreg	equ	0xFE8
 11281                           postdec1	equ	0xFE5
 11282                           fsr1h	equ	0xFE2
 11283                           fsr1l	equ	0xFE1
 11284                           indf2	equ	0xFDF
 11285                           postinc2	equ	0xFDE
 11286                           postdec2	equ	0xFDD
 11287                           fsr2h	equ	0xFDA
 11288                           fsr2l	equ	0xFD9
 11289                           status	equ	0xFD8
 11290                           
 11291 ;; *************** function _Timer1_isr *****************
 11292 ;; Defined at:
 11293 ;;		line 21 in file "timer.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;  f               2    6[COMRAM] unsigned int 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;		None
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  1    wreg      void 
 11300 ;; Registers used:
 11301 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;Total ram usage:        3 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    1
 11314 ;; This function calls:
 11315 ;;		i2___wmul
 11316 ;;		i2_reloadTimer1
 11317 ;; This function is called by:
 11318 ;;		_highIsr
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           	psect	text48
 11323  003CE0                     __ptext48:
 11324                           	opt stack 0
 11325  003CE0                     _Timer1_isr:
 11326                           	opt stack 22
 11327                           
 11328                           ;timer.c: 23: PIR1bits.TMR1IF = 0;
 11329                           
 11330                           ;incstack = 0
 11331  003CE0  909E               	bcf	3998,0,c	;volatile
 11332                           
 11333                           ;timer.c: 24: count_t1++;
 11334  003CE2  4A55               	infsnz	_count_t1,f,c
 11335  003CE4  2A56               	incf	_count_t1+1,f,c
 11336                           
 11337                           ;timer.c: 25: count_t2++;
 11338  003CE6  4A57               	infsnz	_count_t2,f,c
 11339  003CE8  2A58               	incf	_count_t2+1,f,c
 11340                           
 11341                           ;timer.c: 26: if(count_t1 >= f*20) {
 11342  003CEA  C007  F001         	movff	Timer1_isr@f,i2___wmul@multiplier
 11343  003CEE  C008  F002         	movff	Timer1_isr@f+1,i2___wmul@multiplier+1
 11344  003CF2  0E00               	movlw	0
 11345  003CF4  6E04               	movwf	i2___wmul@multiplicand+1,c
 11346  003CF6  0E14               	movlw	20
 11347  003CF8  6E03               	movwf	i2___wmul@multiplicand,c
 11348  003CFA  EC8F  F021         	call	i2___wmul	;wreg free
 11349  003CFE  5001               	movf	?i2___wmul,w,c
 11350  003D00  5C55               	subwf	_count_t1,w,c
 11351  003D02  5002               	movf	?i2___wmul+1,w,c
 11352  003D04  5856               	subwfb	_count_t1+1,w,c
 11353  003D06  A0D8               	btfss	status,0,c
 11354  003D08  D010               	goto	i2l3949
 11355                           
 11356                           ;timer.c: 27: PORTBbits.RB1 = !PORTBbits.RB1;
 11357  003D0A  B281               	btfsc	3969,1,c	;volatile
 11358  003D0C  D003               	goto	i2u410_40
 11359  003D0E  6A09               	clrf	??_Timer1_isr& (0+255),c
 11360  003D10  2A09               	incf	??_Timer1_isr& (0+255),f,c
 11361  003D12  D001               	goto	i2u411_48
 11362  003D14                     i2u410_40:
 11363  003D14  6A09               	clrf	??_Timer1_isr& (0+255),c
 11364  003D16                     i2u411_48:
 11365  003D16  4609               	rlncf	??_Timer1_isr,f,c
 11366  003D18  5081               	movf	3969,w,c	;volatile
 11367  003D1A  1809               	xorwf	??_Timer1_isr,w,c
 11368  003D1C  0BFD               	andlw	-3
 11369  003D1E  1809               	xorwf	??_Timer1_isr,w,c
 11370  003D20  6E81               	movwf	3969,c	;volatile
 11371                           
 11372                           ;timer.c: 28: count_t1=0;
 11373  003D22  0E00               	movlw	0
 11374  003D24  6E56               	movwf	_count_t1+1,c
 11375  003D26  0E00               	movlw	0
 11376  003D28  6E55               	movwf	_count_t1,c
 11377  003D2A                     i2l3949:
 11378                           
 11379                           ;timer.c: 29: }
 11380                           ;timer.c: 30: if(count_t1 >= 5) {
 11381  003D2A  5056               	movf	_count_t1+1,w,c
 11382  003D2C  E104               	bnz	i2u412_40
 11383  003D2E  0E05               	movlw	5
 11384  003D30  5C55               	subwf	_count_t1,w,c
 11385  003D32  A0D8               	btfss	status,0,c
 11386  003D34  D011               	goto	i2l3955
 11387  003D36                     i2u412_40:
 11388                           
 11389                           ;timer.c: 31: PORTBbits.RB2 = !PORTBbits.RB2;
 11390  003D36  B481               	btfsc	3969,2,c	;volatile
 11391  003D38  D003               	goto	i2u413_40
 11392  003D3A  6A09               	clrf	??_Timer1_isr& (0+255),c
 11393  003D3C  2A09               	incf	??_Timer1_isr& (0+255),f,c
 11394  003D3E  D001               	goto	i2u414_48
 11395  003D40                     i2u413_40:
 11396  003D40  6A09               	clrf	??_Timer1_isr& (0+255),c
 11397  003D42                     i2u414_48:
 11398  003D42  4609               	rlncf	??_Timer1_isr,f,c
 11399  003D44  4609               	rlncf	??_Timer1_isr,f,c
 11400  003D46  5081               	movf	3969,w,c	;volatile
 11401  003D48  1809               	xorwf	??_Timer1_isr,w,c
 11402  003D4A  0BFB               	andlw	-5
 11403  003D4C  1809               	xorwf	??_Timer1_isr,w,c
 11404  003D4E  6E81               	movwf	3969,c	;volatile
 11405                           
 11406                           ;timer.c: 32: count_t2=0;
 11407  003D50  0E00               	movlw	0
 11408  003D52  6E58               	movwf	_count_t2+1,c
 11409  003D54  0E00               	movlw	0
 11410  003D56  6E57               	movwf	_count_t2,c
 11411  003D58                     i2l3955:
 11412                           
 11413                           ;timer.c: 33: }
 11414                           ;timer.c: 34: reloadTimer1();
 11415  003D58  EC2E  F022         	call	i2_reloadTimer1	;wreg free
 11416  003D5C  0012               	return		;funcret
 11417  003D5E                     __end_of_Timer1_isr:
 11418                           	opt stack 0
 11419                           pclatu	equ	0xFFB
 11420                           pclath	equ	0xFFA
 11421                           tblptru	equ	0xFF8
 11422                           tblptrh	equ	0xFF7
 11423                           tblptrl	equ	0xFF6
 11424                           tablat	equ	0xFF5
 11425                           prodh	equ	0xFF4
 11426                           prodl	equ	0xFF3
 11427                           intcon	equ	0xFF2
 11428                           postinc0	equ	0xFEE
 11429                           fsr0h	equ	0xFEA
 11430                           fsr0l	equ	0xFE9
 11431                           wreg	equ	0xFE8
 11432                           postdec1	equ	0xFE5
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           fsr2h	equ	0xFDA
 11439                           fsr2l	equ	0xFD9
 11440                           status	equ	0xFD8
 11441                           
 11442 ;; *************** function i2_reloadTimer1 *****************
 11443 ;; Defined at:
 11444 ;;		line 16 in file "timer.c"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;		None
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;		None
 11449 ;; Return value:  Size  Location     Type
 11450 ;;                  1    wreg      void 
 11451 ;; Registers used:
 11452 ;;		wreg, status,2
 11453 ;; Tracked objects:
 11454 ;;		On entry : 0/0
 11455 ;;		On exit  : 0/0
 11456 ;;		Unchanged: 0/0
 11457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;Total ram usage:        0 bytes
 11463 ;; Hardware stack levels used:    1
 11464 ;; This function calls:
 11465 ;;		Nothing
 11466 ;; This function is called by:
 11467 ;;		_Timer1_isr
 11468 ;; This function uses a non-reentrant model
 11469 ;;
 11470                           
 11471                           	psect	text49
 11472  00445C                     __ptext49:
 11473                           	opt stack 0
 11474  00445C                     i2_reloadTimer1:
 11475                           	opt stack 22
 11476                           
 11477                           ;timer.c: 18: TMR1H = (unsigned char) ((40536 >> 8) & 0x00FF);
 11478                           
 11479                           ;incstack = 0
 11480  00445C  0E9E               	movlw	158
 11481  00445E  6ECF               	movwf	4047,c	;volatile
 11482                           
 11483                           ;timer.c: 19: TMR1L = (unsigned char)(40536 & 0x00FF );
 11484  004460  0E58               	movlw	88
 11485  004462  6ECE               	movwf	4046,c	;volatile
 11486  004464  0012               	return		;funcret
 11487  004466                     __end_ofi2_reloadTimer1:
 11488                           	opt stack 0
 11489                           pclatu	equ	0xFFB
 11490                           pclath	equ	0xFFA
 11491                           tblptru	equ	0xFF8
 11492                           tblptrh	equ	0xFF7
 11493                           tblptrl	equ	0xFF6
 11494                           tablat	equ	0xFF5
 11495                           prodh	equ	0xFF4
 11496                           prodl	equ	0xFF3
 11497                           intcon	equ	0xFF2
 11498                           postinc0	equ	0xFEE
 11499                           fsr0h	equ	0xFEA
 11500                           fsr0l	equ	0xFE9
 11501                           wreg	equ	0xFE8
 11502                           postdec1	equ	0xFE5
 11503                           fsr1h	equ	0xFE2
 11504                           fsr1l	equ	0xFE1
 11505                           indf2	equ	0xFDF
 11506                           postinc2	equ	0xFDE
 11507                           postdec2	equ	0xFDD
 11508                           fsr2h	equ	0xFDA
 11509                           fsr2l	equ	0xFD9
 11510                           status	equ	0xFD8
 11511                           
 11512 ;; *************** function i2___wmul *****************
 11513 ;; Defined at:
 11514 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  multiplier      2    0[COMRAM] unsigned int 
 11517 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;  __wmul          2    4[COMRAM] unsigned int 
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  2    0[COMRAM] unsigned int 
 11522 ;; Registers used:
 11523 ;;		wreg, status,2, status,0, prodl, prodh
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11529 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11533 ;;Total ram usage:        6 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_Timer1_isr
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text50
 11543  00431E                     __ptext50:
 11544                           	opt stack 0
 11545  00431E                     i2___wmul:
 11546                           	opt stack 22
 11547                           
 11548                           ;incstack = 0
 11549  00431E  5001               	movf	i2___wmul@multiplier,w,c
 11550  004320  0203               	mulwf	i2___wmul@multiplicand,c
 11551  004322  CFF3 F005          	movff	prodl,i2___wmul@product
 11552  004326  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11553  00432A  5001               	movf	i2___wmul@multiplier,w,c
 11554  00432C  0204               	mulwf	i2___wmul@multiplicand+1,c
 11555  00432E  50F3               	movf	prodl,w,c
 11556  004330  2606               	addwf	i2___wmul@product+1,f,c
 11557  004332  5002               	movf	i2___wmul@multiplier+1,w,c
 11558  004334  0203               	mulwf	i2___wmul@multiplicand,c
 11559  004336  50F3               	movf	prodl,w,c
 11560  004338  2606               	addwf	i2___wmul@product+1,f,c
 11561  00433A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11562  00433E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11563  004342  0012               	return	
 11564  004344                     __end_ofi2___wmul:
 11565                           	opt stack 0
 11566                           pclatu	equ	0xFFB
 11567                           pclath	equ	0xFFA
 11568                           tblptru	equ	0xFF8
 11569                           tblptrh	equ	0xFF7
 11570                           tblptrl	equ	0xFF6
 11571                           tablat	equ	0xFF5
 11572                           prodh	equ	0xFF4
 11573                           prodl	equ	0xFF3
 11574                           intcon	equ	0xFF2
 11575                           postinc0	equ	0xFEE
 11576                           fsr0h	equ	0xFEA
 11577                           fsr0l	equ	0xFE9
 11578                           wreg	equ	0xFE8
 11579                           postdec1	equ	0xFE5
 11580                           fsr1h	equ	0xFE2
 11581                           fsr1l	equ	0xFE1
 11582                           indf2	equ	0xFDF
 11583                           postinc2	equ	0xFDE
 11584                           postdec2	equ	0xFDD
 11585                           fsr2h	equ	0xFDA
 11586                           fsr2l	equ	0xFD9
 11587                           status	equ	0xFD8
 11588                           
 11589 ;; *************** function _RX_isr *****************
 11590 ;; Defined at:
 11591 ;;		line 37 in file "timer.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;                  1    wreg      unsigned char 
 11598 ;; Registers used:
 11599 ;;		wreg, status,2, status,0
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;Total ram usage:        1 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; This function calls:
 11612 ;;		Nothing
 11613 ;; This function is called by:
 11614 ;;		_highIsr
 11615 ;; This function uses a non-reentrant model
 11616 ;;
 11617                           
 11618                           	psect	text51
 11619  0042A0                     __ptext51:
 11620                           	opt stack 0
 11621  0042A0                     _RX_isr:
 11622                           	opt stack 23
 11623                           
 11624                           ;incstack = 0
 11625  0042A0  0004               	clrwdt		;# 
 11626                           
 11627                           ;timer.c: 41: PORTBbits.RB3 = !PORTBbits.RB3;
 11628  0042A2  B681               	btfsc	3969,3,c	;volatile
 11629  0042A4  D003               	goto	i2u162_40
 11630  0042A6  6A01               	clrf	??_RX_isr& (0+255),c
 11631  0042A8  2A01               	incf	??_RX_isr& (0+255),f,c
 11632  0042AA  D001               	goto	i2u163_48
 11633  0042AC                     i2u162_40:
 11634  0042AC  6A01               	clrf	??_RX_isr& (0+255),c
 11635  0042AE                     i2u163_48:
 11636  0042AE  4601               	rlncf	??_RX_isr,f,c
 11637  0042B0  4601               	rlncf	??_RX_isr,f,c
 11638  0042B2  4601               	rlncf	??_RX_isr,f,c
 11639  0042B4  5081               	movf	3969,w,c	;volatile
 11640  0042B6  1801               	xorwf	??_RX_isr,w,c
 11641  0042B8  0BF7               	andlw	-9
 11642  0042BA  1801               	xorwf	??_RX_isr,w,c
 11643  0042BC  6E81               	movwf	3969,c	;volatile
 11644                           
 11645                           ;timer.c: 42: ReceivedChar = RCREG;
 11646  0042BE  CFAE F05F          	movff	4014,_ReceivedChar	;volatile
 11647                           
 11648                           ;timer.c: 43: while (!TXSTAbits.TRMT) {asm(" clrwdt");}
 11649  0042C2  D001               	goto	i2l346
 11650  0042C4                     i2l347:
 11651  0042C4  0004               	clrwdt		;# 
 11652  0042C6                     i2l346:
 11653  0042C6  A2AC               	btfss	4012,1,c	;volatile
 11654  0042C8  D7FD               	goto	i2l347
 11655                           
 11656                           ;timer.c: 44: return ReceivedChar;
 11657  0042CA  505F               	movf	_ReceivedChar,w,c
 11658  0042CC  0012               	return	
 11659  0042CE                     __end_of_RX_isr:
 11660                           	opt stack 0
 11661                           pclatu	equ	0xFFB
 11662                           pclath	equ	0xFFA
 11663                           tblptru	equ	0xFF8
 11664                           tblptrh	equ	0xFF7
 11665                           tblptrl	equ	0xFF6
 11666                           tablat	equ	0xFF5
 11667                           prodh	equ	0xFF4
 11668                           prodl	equ	0xFF3
 11669                           intcon	equ	0xFF2
 11670                           postinc0	equ	0xFEE
 11671                           fsr0h	equ	0xFEA
 11672                           fsr0l	equ	0xFE9
 11673                           wreg	equ	0xFE8
 11674                           postdec1	equ	0xFE5
 11675                           fsr1h	equ	0xFE2
 11676                           fsr1l	equ	0xFE1
 11677                           indf2	equ	0xFDF
 11678                           postinc2	equ	0xFDE
 11679                           postdec2	equ	0xFDD
 11680                           fsr2h	equ	0xFDA
 11681                           fsr2l	equ	0xFD9
 11682                           status	equ	0xFD8
 11683                           pclatu	equ	0xFFB
 11684                           pclath	equ	0xFFA
 11685                           tblptru	equ	0xFF8
 11686                           tblptrh	equ	0xFF7
 11687                           tblptrl	equ	0xFF6
 11688                           tablat	equ	0xFF5
 11689                           prodh	equ	0xFF4
 11690                           prodl	equ	0xFF3
 11691                           intcon	equ	0xFF2
 11692                           postinc0	equ	0xFEE
 11693                           fsr0h	equ	0xFEA
 11694                           fsr0l	equ	0xFE9
 11695                           wreg	equ	0xFE8
 11696                           postdec1	equ	0xFE5
 11697                           fsr1h	equ	0xFE2
 11698                           fsr1l	equ	0xFE1
 11699                           indf2	equ	0xFDF
 11700                           postinc2	equ	0xFDE
 11701                           postdec2	equ	0xFDD
 11702                           fsr2h	equ	0xFDA
 11703                           fsr2l	equ	0xFD9
 11704                           status	equ	0xFD8
 11705                           
 11706                           	psect	rparam
 11707  0000                     pclatu	equ	0xFFB
 11708                           pclath	equ	0xFFA
 11709                           tblptru	equ	0xFF8
 11710                           tblptrh	equ	0xFF7
 11711                           tblptrl	equ	0xFF6
 11712                           tablat	equ	0xFF5
 11713                           prodh	equ	0xFF4
 11714                           prodl	equ	0xFF3
 11715                           intcon	equ	0xFF2
 11716                           postinc0	equ	0xFEE
 11717                           fsr0h	equ	0xFEA
 11718                           fsr0l	equ	0xFE9
 11719                           wreg	equ	0xFE8
 11720                           postdec1	equ	0xFE5
 11721                           fsr1h	equ	0xFE2
 11722                           fsr1l	equ	0xFE1
 11723                           indf2	equ	0xFDF
 11724                           postinc2	equ	0xFDE
 11725                           postdec2	equ	0xFDD
 11726                           fsr2h	equ	0xFDA
 11727                           fsr2l	equ	0xFD9
 11728                           status	equ	0xFD8
 11729                           
 11730                           	psect	temp
 11731  000068                     btemp:
 11732                           	opt stack 0
 11733  000068                     	ds	1
 11734  0000                     int$flags	set	btemp
 11735                           pclatu	equ	0xFFB
 11736                           pclath	equ	0xFFA
 11737                           tblptru	equ	0xFF8
 11738                           tblptrh	equ	0xFF7
 11739                           tblptrl	equ	0xFF6
 11740                           tablat	equ	0xFF5
 11741                           prodh	equ	0xFF4
 11742                           prodl	equ	0xFF3
 11743                           intcon	equ	0xFF2
 11744                           postinc0	equ	0xFEE
 11745                           fsr0h	equ	0xFEA
 11746                           fsr0l	equ	0xFE9
 11747                           wreg	equ	0xFE8
 11748                           postdec1	equ	0xFE5
 11749                           fsr1h	equ	0xFE2
 11750                           fsr1l	equ	0xFE1
 11751                           indf2	equ	0xFDF
 11752                           postinc2	equ	0xFDE
 11753                           postdec2	equ	0xFDD
 11754                           fsr2h	equ	0xFDA
 11755                           fsr2l	equ	0xFD9
 11756                           status	equ	0xFD8


Data Sizes:
    Strings     85
    Constant    144
    Data        11
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82     103
    BANK0           128     96     100
    BANK1           256     67      69
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_7(CODE[13]), STR_5(CODE[13]), STR_4(CODE[21]), STR_3(CODE[13]), 
		 -> STR_2(CODE[13]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 9
		 -> STR_6(CODE[9]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), 


Critical Paths under _main in COMRAM

    _sprintf->_scale
    _scale->___awmod
    _fround->___awmod
    ___flmul->___awdiv
    ___awmod->___fltol
    ___llmod->___lldiv
    ___flsub->___xxtofl
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___xxtofl
    _read_adc_temp->___xxtofl
    ___fldiv->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    _floor->___xxtofl
    ___xxtofl->___fltol
    ___fltol->___flmul
    ___flge->___flmul
    ___fladd->___xxtofl

Critical Paths under _highIsr in COMRAM

    _highIsr->_Timer1_isr
    _Timer1_isr->i2___wmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_floor
    ___flsub->___fladd
    _read_adc_voltage->___fldiv
    _read_adc_temp->___fladd
    _floor->___fladd
    ___fladd->___fldiv

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                68    68      0   94129
                                             81 COMRAM     1     1      0
                                              0 BANK1     67    67      0
                            ___awmod
                            ___fladd
                             ___flge
                            ___flmul
                            ___fltol
                           _delay_ms
                        _display7seg
                              _floor
                       _initTimers01
                    _init_adc_no_lib
                          _init_pwm1
                  _is_byte_available
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                _read_adc_raw_no_lib
                      _read_adc_temp
                   _read_adc_voltage
                   _read_byte_no_lib
                 _send_string_no_lib
                       _set_pwm1_raw
                         _setupPorts
                        _setupSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    37     10   47827
                                             55 BANK0     41    31     10
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                              _floor (ARG)
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               13     9      4   10196
                                             72 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    13      4    9917
                                             72 COMRAM     4     0      4
                                              0 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5541
                                             31 COMRAM    25    17      8
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1973
                                             66 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1985
                                             23 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     431
                                             23 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     431
                                             23 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             36 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4929
                                             45 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     237
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_pwm1_raw                                         4     2      2     300
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     131
                                             24 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    4539
                                             25 BANK0     11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _read_adc_temp                                       11     7      4    9135
                                             45 BANK0     11     7      4
                            ___fladd
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1092
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2499
                                              0 BANK0     25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3198
                                             37 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    2897
                                             36 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1471
                                             33 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1564
                                             33 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1016
                                             31 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                             29 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     366
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
                       _reloadTimer1
 ---------------------------------------------------------------------------------
 (2) _reloadTimer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _floor                                               10     6      4    7724
                                             45 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                8     2      6     336
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     784
                                             66 COMRAM    14    10      4
                            ___fltol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     741
                                             56 COMRAM    10     6      4
                            ___awdiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     822
                                             56 COMRAM    12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4596
                                             25 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _display7seg                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _highIsr                                             14    14      0     582
                                              9 COMRAM    14    14      0
                             _RX_isr
                         _Timer1_isr
                            ___lwmod
                            _examine
 ---------------------------------------------------------------------------------
 (8) _examine                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _Timer1_isr                                           3     1      2     295
                                              6 COMRAM     3     1      2
                            ___lwmod (ARG)
                           i2___wmul
                     i2_reloadTimer1
 ---------------------------------------------------------------------------------
 (9) i2_reloadTimer1                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _RX_isr                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
     ___awdiv (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
     ___fltol (ARG)
       ___awdiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
   ___fladd
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
     ___wmul (ARG)
     ___xxtofl (ARG)
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
       ___flmul
         ___awdiv (ARG)
   ___flge
     ___flmul (ARG)
       ___awdiv (ARG)
   ___flmul
     ___awdiv (ARG)
   ___fltol
     ___awdiv (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
   _delay_ms
   _display7seg
   _floor
     ___fladd
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
         ___flmul
           ___awdiv (ARG)
     ___flge
       ___flmul (ARG)
         ___awdiv (ARG)
     ___fltol
       ___awdiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _frexp
   _initTimers01
     _reloadTimer1
   _init_adc_no_lib
   _init_pwm1
   _is_byte_available
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_raw_no_lib
   _read_adc_temp
     ___fladd
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
         ___flmul
           ___awdiv (ARG)
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _set_pwm1_raw
   _setupPorts
   _setupSerial
   _sprintf
     ___awdiv
     ___fladd
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
         ___flmul
           ___awdiv (ARG)
     ___flge
       ___flmul (ARG)
         ___awdiv (ARG)
     ___flmul
       ___awdiv (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
           ___flmul
             ___awdiv (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___fltol
       ___awdiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     __div_to_l_
     __tdiv_to_l_
     _floor (ARG)
       ___fladd
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
           ___flmul
             ___awdiv (ARG)
       ___flge
         ___flmul (ARG)
           ___awdiv (ARG)
       ___fltol
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___xxtofl
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _frexp
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
       ___flmul
         ___awdiv (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
       ___flmul
         ___awdiv (ARG)
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)

 _highIsr (ROOT)
   _RX_isr
   _Timer1_isr
     ___lwmod (ARG)
     i2___wmul (ARG)
     i2_reloadTimer1 (ARG)
   ___lwmod
   _examine

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     43      45       7       27.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     60      64       5       78.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     52      67       1       81.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     110      34        0.0%
DATA                 0      0     110       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jul 26 10:09:25 2022

           ?_read_adc_voltage 0099                i2_reloadTimer1 445C                  ___fldiv@aexp 0098  
                ?_display7seg 0001                  ___fldiv@bexp 0097                             _f 0143  
                ___fldiv@sign 008C            ??_read_adc_voltage 0051                ?_lcd_send_byte 0020  
                          _p2 005B                  ___awdiv@sign 001D           ___wmul@multiplicand 001A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$XT 000000  
                 __CFG_LVP$ON 000000                   __CFG_WDT$ON 000000                           l210 41C0  
                         l140 43A2                           l147 427E                           l277 441A  
                         l279 4416                           l288 442C                           l456 17EC  
                         l289 442A                           l707 37AA                           l740 38F2  
                         l820 3526                           l901 3CCE                           l911 3F0C  
                         l826 358C                           l819 34FE                           l697 36B4  
                         l995 1E76                           l996 1E6A                           l997 1E36  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                  __CFG_CPD$OFF 000000  
                         _lcd 000F83                           _tes 00E0                  ___awmod@sign 0048  
                         prod 000FF3     read_adc_voltage@raw_value 00A2                           wreg 000FE8  
                ___flmul@aexp 002D                  ___flmul@bexp 0032                  ___flmul@sign 002C  
                ___flmul@temp 0037                  ___flmul@prod 0033                   main@channel 0142  
                 lcd_gotoxy@x 0023                   lcd_gotoxy@y 0022                  ___fltol@exp1 0042  
                        l1012 1FEA                          l1021 207E                          l1110 33D8  
                        l1103 335A                          l1051 2BB8                          l1060 2BF0  
                        l1117 3414                          l1118 3428                          l1062 2C5E  
                        l1054 2B60                          l1081 2DCA                          l1090 2FE0  
                        l1098 3066                          l4011 3F62                          l4003 3F50  
                        l4007 3F5A                          l3401 4068                          l3403 4074  
                        l5003 3C14                          l5005 3C1C                          l3407 4080  
                        l3503 3498                          l5023 3C54                          l5015 3C3C  
                        l5007 3C20                          l5111 2758                          l5105 26B4  
                        l3611 36AE                          l3603 368A                          l5019 3C46  
                        l5051 3E26                          l5043 3E06                          l5035 3DEC  
                        l5123 28BC                          l5115 2782                          l4069 4422  
                        l5213 2B6C                          l5205 2B34                          l4421 42E4  
                        l3509 34C4                          l5045 3E0E                          l5231 2C04  
                        l5151 29CC                          l3551 3586                          l3543 3562  
                        l5047 3E12                          l5055 3E30                          l5039 3DF8  
                        l4441 3E5C                          l4433 3E54                          l4425 3E4C  
                        l5305 33FE                          l5241 2C58                          l5225 2BDA  
                        l5145 29A8                          l4417 42D0                          l3609 36A2  
                        l5129 2960                          l5307 340A                          l5251 2CAE  
                        l5219 2BB4                          l5171 2A2A                          l5155 29D6  
                        l3539 3552                          l5059 3E3E                          l5091 32CC  
                        l5083 31FE                          l4461 3E70                          l4453 3E68  
                        l4445 3E60                          l4437 3E58                          l4429 3E50  
                        l3813 3922                          l2933 4396                          l3397 4044  
                        l4381 437C                          l5165 2A06                          l3565 35DA  
                        l3549 357A                          l3493 43E8                          l5501 17BA  
                        l5421 1432                          l5333 10F8                          l4471 3E78  
                        l5319 345A                          l3399 405C                          l5255 2CDC  
                        l5175 2A34                          l3559 35BC                          l5503 17CE  
                        l5431 14CE                          l5423 146E                          l5415 13EE  
                        l5407 136E                          l4465 3E74                          l4457 3E6C  
                        l4449 3E64                          l3841 39B2                          l3833 398E  
                        l2929 4284                          l4377 436A                          l5265 2D22  
                        l5257 2CF0                          l5425 1484                          l5345 114A  
                        l5353 11BE                          l4803 203E                          l4811 2058  
                        l3843 39B8                          l2963 4118                          l2971 4132  
                        l5267 2D26                          l5259 2D12                          l5195 2AB6  
                        l5187 2A88                          l3587 364C                          l3579 361C  
                        l5611 1BC4                          l5531 1976                          l5515 1820  
                        l5507 17F0                          l5451 15E4                          l5435 14FC  
                        l5419 141C                          l5363 1222                          l5339 1118  
                        l4741 1E4A                          l3773 376C                          l3765 36FA  
                        l3829 397E                          l5293 3388                          l2973 4136  
                        l3861 3C90                          l5605 1B96                          l5445 1566  
                        l5381 129C                          l5621 1C88                          l5373 124E  
                        l5365 1238                          l4743 1E50                          l4663 1CD8  
                        l3847 39CE                          l3839 39A6                          l5295 338E  
                        l5287 336A                          l2967 412A                          l3599 367A  
                        l5615 1C4E                          l5519 1882                          l5471 169C  
                        l5463 162A                          l5391 12EE                          l5375 1282  
                        l5359 11E6                          l4841 2114                          l4833 20E6  
                        l4809 2052                          l4729 1DB6                          l4681 1D22  
                        l4657 1CB4                          l3769 372E                          l5297 339A  
                        l2969 412E                          l2977 413C                          l3857 3C80  
                        l3881 3EDA                          l5617 1C54                          l5537 1990  
                        l5529 1968                          l5449 15DE                          l5369 1248  
                        l5713 223C                          l5721 2280                          l4843 2118  
                        l4819 2078                          l4771 1EE8                          l4747 1E5A  
                        l4691 1D50                          l4675 1D0E                          l4667 1CE2  
                        l3779 37E2                          l5299 33C0                          l5643 3858  
                        l5635 3822                          l2979 4156                          l3787 4232  
                        l3859 3C8C                          l5555 1A08                          l5483 16F6  
                        l5475 16AE                          l5467 167A                          l5539 199E  
                        l5619 1C6A                          l4837 2108                          l4829 20D4  
                        l4765 1ED8                          l4757 1E9A                          l3797 3D7C  
                        l3869 3CC0                          l3885 3EFE                          l3877 3ECA  
                        l4941 2FA8                          l5573 1A7C                          l5557 1A0E  
                        l5549 19E2                          l5485 16FE                          l5493 1792  
                        l5477 16B6                          l5741 23AC                          l5717 227A  
                        l5709 222C                          l4767 1EDE                          l4775 1EFA  
                        l4687 1D46                          l5639 3836                          l3879 3ED6  
                        l4951 2FDC                          l4935 2F8A                          l5591 1B22  
                        l5583 1AE0                          l5495 17A0                          l5479 16CA  
                        l5735 231C                          l5727 22A4                          l4849 212C  
                        l4793 201C                          l4785 1FCA                          l3993 3F32  
                        l4961 3024                          l4865 2D76                          l5577 1AAC  
                        l5569 1A54                          l5761 24CC                          l5681 217E  
                        l4699 1D7A                          l4883 2DB6                          l4867 2D7A  
                        l5595 1B5A                          l5683 218A                          l3997 3F3A  
                        l4965 3042                          l4893 2DE8                          l4885 2DBA  
                        l4869 2D8A                          l5597 1B64                          l5589 1B18  
                        l5693 21C8                          l4799 2032                          l4991 3BEE  
                        l4967 3050                          l5599 1B70                          l5687 219C  
                        l4977 3084                          l4889 2DD6                          l5697 21D2  
                        l5689 21A8                          l4997 3BFE                          STR_1 10A6  
                        STR_2 10B6                          STR_3 10C3                          STR_4 1091  
                        STR_5 10D0                          STR_6 10DD                          STR_7 10D0  
                        u3411 34A8                          _PIE1 000F9D                          _PIE2 000FA0  
                        u5130 1E00                          u5140 1E18                          u6020 2CC2  
                        u2565 40E8                          u5150 1E1A                          u2566 40EA  
                        u3391 347C                          u5510 2F4C                          u3850 3DA4  
                        u5515 2F42                          u6420 17E4                          u3870 3940  
                        _PIR1 000F9E                          u3858 3DA6                          u3875 3936  
                        u5590 3032                          u6710 21B2                          i2l92 3A38  
                        u6660 3846                          i2l96 3A68                          u6728 21B4  
                        u6857 4110                          u6867 4398              ?_lcd_send_nibble 0001  
                 main@raw_val 0128                          _main 213E              _send_byte_no_lib 4426  
                        _size 005D                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          btemp 0068  
                        _strr 0065                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 0016                 __CFG_IESO$OFF 000000  
             ___fldiv@new_exp 0091                   main@voltage 012F        __end_ofi2_reloadTimer1 4466  
                _sprintf$2154 00C5                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
        __end_of_delay_cycles 42A0                 ___fltol@sign1 0041               __end_of___fladd 213E  
                       ?_main 0001               __end_of___fldiv 2D4A               __end_of___awdiv 3C5E  
             __end_of___flneg 4244               __end_of___awmod 3E48               __end_of___flmul 309A  
             __end_of___flsub 40DE               __end_of___fltol 39E0               __end_of___lldiv 3CE0  
             ___awdiv@divisor 001A                         _T1CON 000FCD               __end_of___llmod 3F1E  
                       _T2CON 000FCA               __end_of___lwmod 41AA                         i2l346 42C6  
                       i2l347 42C4                         i2l964 41A0               ___awdiv@counter 001C  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _TMR1H 000FCF  
                       _TMR1L 000FCE                         _SPBRG 000FAF                         _PORTD 000F83  
     read_adc_voltage@channel 00A1                         _TRISA 000F92                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95                         _TRISE 000F96  
                       _TXREG 000FAD                         _TXSTA 000FAC                 __CFG_PWRT$OFF 000000  
                display7seg@v 0018                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000               __end_of_highIsr 3AA4                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             __end_of_dpowers 1091               __end_of_examine 4040                         _floor 37E6  
                       _frexp 3D5E                         _errno 0059                         _scale 2572  
             __end_of_isdigit 43F0               _init_adc_no_lib 4446                         _test0 0060  
                       tablat 000FF5              __end_ofi2___wmul 4344                         status 000FD8  
     read_adc_voltage@voltage 009D               __end_of_sprintf 1C96                __CFG_PBADEN$ON 000000  
             ?i2_reloadTimer1 0001                main@RecvedChar 0141               __initialization 3F80  
                __end_of_main 2572               ??_lcd_send_byte 0021                        ??_main 0052  
               __activetblptr 000002                 ?_initTimers01 0001          __size_of__tdiv_to_l_ 0132  
                      _ADCON0 000FC2                        _ADCON1 000FC1                        _ADCON2 000FC0  
                      ?_floor 00AD                        ?_frexp 0018              ___llmod@dividend 0025  
                      ?_scale 0049                        _ADRESH 000FC4                        _ADRESL 000FC3  
                      _CCPR1L 000FBE              ___awdiv@dividend 0018                        i2l4501 3A64  
                      i2l4481 4182                        i2l4485 4196                        i2l4477 4176  
                      i2l4479 417E                        _INTCON 000FF2                        i2l3955 3D58  
                      i2l3963 4010                        i2l3949 3D2A                        _SPBRGH 000FB0  
            __end_of___xxtofl 346C              __end_of_delay_ms 43B0                        _RX_isr 42A0  
              __CFG_XINST$OFF 000000              __end_of__powers_ 1069                    _Timer1_isr 3CE0  
            __end_of_lcd_init 3F80                        ___flge 36C6              __end_of_lcd_putc 4096  
            __end_of_lcd_puts 438C          read_adc_temp@channel 00B5                     ??___fladd 00A1  
                      ___wmul 42F8                     ??___fldiv 0088                     ??___awdiv 001C  
                   ??___flneg 001C                __CFG_STVREN$ON 000000                     ??___awmod 0047  
                   ??___flmul 0028                     ??___flsub 0051                     ??___fltol 003D  
                   ??___lldiv 0020                     ??___llmod 002D                     ??___lwmod 0005  
      __size_of_read_adc_temp 00AE                        _fround 309A                        clear_0 3F8C  
            ___awdiv@quotient 001E          __size_of_display7seg 0070               ___awmod@divisor 0045  
             ___awmod@counter 0047                        main@AN 0135                     ??_highIsr 000A  
                      floor@i 00B1                        floor@x 00AD                ??_initTimers01 0018  
     __end_of_init_adc_no_lib 4452                     ??_examine 0001                  __pdataCOMRAM 0061  
                   ??_isdigit 0018                 main@threshold 012B                  __mediumconst 0000  
         send_string_no_lib@p 0019                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8            _send_string_no_lib 42CE                  ?_setupSerial 0001  
                   ??_sprintf 00C1                    ___flge@ff1 0039                    ___flge@ff2 003D  
                ___xxtofl@arg 004D                  ___xxtofl@exp 004C                  ___xxtofl@val 0043  
                  __accesstop 0080       __end_of__initialization 3FD2                    ___flneg@f1 0018  
         ?_send_string_no_lib 0019             ?_read_byte_no_lib 0001                 ___rparam_used 000001  
                  ___fltol@f1 0039            ??_read_byte_no_lib 0018                __pcstackCOMRAM 0001  
       __size_of_delay_cycles 002E                  __pidataBANK0 4475                 __end_of_floor 3904  
               __end_of_frexp 3DD8                 __end_of_scale 298A             read_adc_temp@temp 00B1  
        ??_send_string_no_lib 001B      __end_of_send_byte_no_lib 4436                     ?i2___wmul 0001  
                  __div_to_l_ 359E     __size_of_read_adc_voltage 0088             lcd_gotoxy@address 0024  
             __div_to_l_@exp1 0025                       ??_floor 0051               __div_to_l_@cntr 0024  
                     ??_frexp 001E                       ??_scale 004D               __div_to_l_@quot 0020  
                sprintf@width 00CD                 _read_adc_temp 3AA4                    __pbssBANK1 0143  
 __end_of_read_adc_raw_no_lib 41E4                  _delay_cycles 4272                 __div_to_l_@f1 0018  
               __div_to_l_@f2 001C            __size_of_init_pwm1 0010             read_byte_no_lib@c 0018  
                     ?_RX_isr 0001                 ?_reloadTimer1 0001                   ?_Timer1_isr 0007  
              lcd_send_byte@n 0020                       ?___flge 0039                       ?___wmul 0018  
            lcd_send_nibble@n 001F                       _CCP1CON 000FBD                       ?_fround 0049  
                  ??i2___wmul 0005              ?_init_adc_no_lib 0001                     ?___xxtofl 0043  
                   ?_delay_ms 0018                    _lcd_gotoxy 4126                   Timer1_isr@f 0007  
              ?_read_adc_temp 00AD                     ?_lcd_init 0001                     ?_lcd_putc 0001  
                   ?_lcd_puts 0026              ??i2_reloadTimer1 0001                ??_reloadTimer1 0018  
        __end_of_initTimers01 4216             _is_byte_available 440E             __end_of__npowers_ 1035  
                     __Hparam 0000               __size_of_RX_isr 002E                    _scale$2153 004D  
                     __Lparam 0000      __size_of_lcd_send_nibble 0022            ?_is_byte_available 0001  
             __size_of___flge 0120                       ___fladd 1C96                       ___fldiv 298A  
                     ___awdiv 3BDA                       ___flneg 4216                       ___awmod 3DD8  
                     ___flmul 2D4A                       ___flsub 4096                       ___fltol 3904  
                     ___lldiv 3C5E               __size_of___wmul 0026                       ___llmod 3EB8  
                     ___lwmod 4168                 ?_set_pwm1_raw 0018                  __psmallconst 1000  
                     __pcinit 3F80               __size_of_fround 0282                       __ramtop 1000  
         ??_is_byte_available 0018                       __ptext0 213E                       __ptext1 10E8  
                     __ptext2 2572                       __ptext3 43D2                       __ptext4 309A  
                     __ptext5 2D4A                       __ptext6 3DD8                       __ptext7 3BDA  
                     __ptext8 346C                       __ptext9 359E                       _highIsr 0008  
                   _T1CONbits 000FCD                   ?__div_to_l_ 0018                       _dpowers 1069  
                     _examine 3FE0                     _T2CONbits 000FCA                       _isdigit 43D2  
                  ??___xxtofl 0047             __end_of_init_pwm1 4446              ___awmod@dividend 0043  
                  ??_delay_ms 001A           __size_of_Timer1_isr 007E                       _sprintf 10E8  
                  ??_lcd_init 0022                __pintcode_body 39E0                    ??_lcd_putc 0025  
                  ??_lcd_puts 0028          end_of_initialization 3FD2          __size_of_setupSerial 0024  
               __Lmediumconst 0000     __end_of_is_byte_available 4426                       int_func 39E0  
         i2___wmul@multiplier 0001          lcd_send_byte@cm_data 0021               ___lldiv@divisor 001C  
             ___lldiv@counter 0024                     _RCSTAbits 000FAB                       postdec1 000FE5  
                     postdec2 000FDD                       postinc0 000FEE                       postinc2 000FDE  
              ??_set_pwm1_raw 001A                __tdiv_to_l_@f1 0018                __tdiv_to_l_@f2 001C  
       __end_of_lcd_send_byte 4126              setupSerial@dummy 0018                 ??__tdiv_to_l_ 0020  
                   _PORTAbits 000F80                     _PORTBbits 000F81                     _PORTCbits 000F82  
                   _PORTEbits 000F84                    _setupPorts 43F0                   ___fladd@grs 00AC  
               ___xxtofl@sign 004B              _read_adc_voltage 3B52                     _TRISCbits 000F94  
                 ?_lcd_gotoxy 0022               ??_read_adc_temp 0051                   ___fldiv@grs 0093  
                  main@Buffer 0100                   ___fldiv@rem 008D               _LCD_INIT_STRING 0061  
                   _RPS_count 0053                   ___flmul@grs 002E                   _CCP1CONbits 000FBD  
                   _TXSTAbits 000FAC           __size_of__div_to_l_ 0128                __end_of_RX_isr 42CE  
           send_byte_no_lib@c 0018                 ??_display7seg 0018                __end_of___flge 37E6  
              __end_of___wmul 431E                   _BAUDCONbits 000FB8                 __pidataCOMRAM 446E  
               delay_cycles@n 001B                 delay_cycles@x 001C             ??_lcd_send_nibble 001E  
   __size_of_read_byte_no_lib 0008                __end_of_fround 331C                    floor@expon 00B5  
            i2___wmul@product 0005             ?_send_byte_no_lib 0001          __end_of_reloadTimer1 445C  
         start_initialization 3F80             __size_ofi2___wmul 0026            ??_send_byte_no_lib 0018  
            main@SendToSerial 012A           __end_of__tdiv_to_l_ 359E         __size_of_initTimers01 0032  
                  frexp@value 0018    __size_of_is_byte_available 0018               ___llmod@divisor 0029  
             ___llmod@counter 002D                      ??_RX_isr 0001                  ??_Timer1_isr 0009  
                    ??___flge 0041           __size_of_lcd_gotoxy 0042                      ??___wmul 001C  
                 __pdataBANK0 00E0  read_adc_raw_no_lib@raw_value 001D              __CFG_LPT1OSC$OFF 000000  
                    ??_fround 004D                 sprintf@tmpval 00CF   __size_of_send_string_no_lib 002A  
                 ?_setupPorts 0001           __end_of_display7seg 3EB8                     ___fladd@a 009D  
                   ___fladd@b 0099                    fround@prec 0088                     ___fldiv@a 0084  
                   ___fldiv@b 0080                  _initTimers01 41E4                     ___flmul@a 0024  
                   ___flmul@b 0020                   __pbssCOMRAM 0053                     ___flsub@a 00B1  
                   ___flsub@b 00AD                 __pcstackBANK0 0080                 __pcstackBANK1 0100  
                _ReceivedChar 005F             __size_of___xxtofl 0150                  _isdigit$1798 0019  
           __size_of_delay_ms 0024            __end_of_Timer1_isr 3D5E          __end_of_set_pwm1_raw 4272  
           __size_of_lcd_init 0062                   sprintf@flag 00CB             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0024                   sprintf@fval 00D9                   sprintf@prec 00DD  
                   _main$2150 0124                     _main$2149 0120             __CFG_CCP2MX$PORTC 000000  
                   __pintcode 0008  __size_of_read_adc_raw_no_lib 003A                      ?___fladd 0099  
                    ?___fldiv 0080                      ?___awdiv 0018                      ?___flneg 0018  
                    ?___awmod 0043                      ?___flmul 0020                      ?___flsub 00AD  
                    ?___fltol 0039                      ?___lldiv 0018                      ?___llmod 0025  
                   __npowers_ 1001                      ?___lwmod 0001                   __tdiv_to_l_ 346C  
                    ?_highIsr 0001                  ??__div_to_l_ 0020                   __smallconst 1000  
                    ?_examine 0001                      ?_isdigit 0001                      ?_sprintf 00B7  
              __size_of_floor 011E                     _init_pwm1 4436                __size_of_frexp 007A  
              __size_of_scale 0418      __size_of_init_adc_no_lib 000C                ___wmul@product 001C  
                   delay_ms@n 0018                     delay_ms@x 001A                      _PIE1bits 000F9D  
         __size_of_setupPorts 001E                      i2u162_40 42AC                      i2u410_40 3D14  
                    i2u163_48 42AE                      i2u412_40 3D36                      i2u411_48 3D16  
                    i2u413_40 3D40                      i2u414_48 3D42                      _PIR1bits 000F9E  
          __end_of__div_to_l_ 36C6      __end_of_read_adc_voltage 3BDA                      _RCONbits 000FD0  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 001C                   _display7seg 3E48  
       __size_of_reloadTimer1 000A              _read_byte_no_lib 4466                    _ADCON0bits 000FC2  
           ___wmul@multiplier 0018                      i2___wmul 431E                     lcd_init@i 0022  
                   lcd_putc@c 0025                     lcd_puts@s 0026                  ??_lcd_gotoxy 0023  
               ??_setupSerial 0018                    ?_init_pwm1 0001                     copy_data0 3FA6  
                   copy_data1 3FC6                     frexp@eptr 001C               _lcd_send_nibble 43B0  
                _reloadTimer1 4452                      __Hrparam 0000         set_pwm1_raw@raw_value 0018  
                    __Lrparam 0000            __CFG_BOREN$SBORDIS 000000       __size_ofi2_reloadTimer1 000A  
          __end_of_lcd_gotoxy 4168              __size_of___fladd 04A8              __size_of___fldiv 03C0  
            __size_of___awdiv 0084              __size_of___flneg 002E              __size_of___awmod 0070  
            __size_of___flmul 0350              __size_of___flsub 0048              __size_of___fltol 00DC  
       i2___wmul@multiplicand 0003              __size_of___lldiv 0082              __size_of___llmod 0066  
            __size_of___lwmod 0042                   _fround$2151 0084                   _fround$2152 0080  
            __size_of_highIsr 3A9C                    sprintf@exp 00D7                    sprintf@val 00D3  
                    ___xxtofl 331C              __size_of_examine 0060         __size_of_set_pwm1_raw 002E  
            __size_of_isdigit 001E                      _delay_ms 438C                      __ptext10 3EB8  
                    __ptext11 3C5E                      __ptext20 3B52                      __ptext12 4096  
                    __ptext21 3AA4                      __ptext13 4216                      __ptext30 43B0  
                    __ptext22 41AA                      __ptext14 4344                      __ptext31 4272  
                    __ptext23 42F8                      __ptext15 43F0                      __ptext40 331C  
                    __ptext32 438C                      __ptext24 298A                      __ptext16 4244  
                    __ptext41 3904                      __ptext33 440E                      __ptext25 4368  
                    __ptext17 42CE                      __ptext50 431E                      __ptext42 36C6  
                    __ptext34 4436                      __ptext26 4040                      __ptext18 4426  
                    __ptext51 42A0                      __ptext43 1C96                      __ptext35 4446  
                    __ptext27 4126                      __ptext19 4466                      __ptext44 3E48  
                    __ptext36 41E4                      __ptext28 3F1E                      __ptext37 4452  
                    __ptext29 40DE                      __ptext46 3FE0                      __ptext38 37E6  
                    __ptext47 4168                      __ptext39 3D5E                      __ptext48 3CE0  
                    __ptext49 445C                      __powers_ 1035         __end_of_read_adc_temp 3B52  
                    _lcd_init 3F1E                      _lcd_putc 4040                      _lcd_puts 4368  
            __size_of_sprintf 0BAE                      _count_t1 0055                      _count_t2 0057  
      __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001                 __size_of_main 0434  
   __size_of_send_byte_no_lib 0010           __end_of_setupSerial 4368             ??_init_adc_no_lib 0018  
                    int$flags 0068                  _set_pwm1_raw 4244                      main@flag 0133  
      read_adc_temp@raw_value 00B6                  ??_setupPorts 0018                    _INTCONbits 000FF2  
                    isdigit@c 001A           _read_adc_raw_no_lib 41AA                      scale@scl 0051  
                 ??_init_pwm1 0018                      intlevel2 0000                     sprintf@ap 00C9  
     __end_of_lcd_send_nibble 43D2              __tdiv_to_l_@exp1 0028              __tdiv_to_l_@cntr 0027  
                   sprintf@sp 00B7                ??_delay_cycles 0018              __tdiv_to_l_@quot 0023  
            ___lwmod@dividend 0001              ___lldiv@dividend 0018            __end_of_setupPorts 440E  
        ?_read_adc_raw_no_lib 0018    __end_of_send_string_no_lib 42F8                 _lcd_send_byte 40DE  
                ?__tdiv_to_l_ 0018                      sprintf@c 00DF                      sprintf@f 00B9  
            ___lldiv@quotient 0020               ___lwmod@divisor 0003               ___lwmod@counter 0005  
                 _setupSerial 4344                 ___fladd@signs 00A9                  ___fladd@aexp 00AA  
                ___fladd@bexp 00AB      __end_of_read_byte_no_lib 446E         ??_read_adc_raw_no_lib 001A  

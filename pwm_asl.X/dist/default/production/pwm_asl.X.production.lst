

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Jul 26 10:02:01 2022

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    70                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    71                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataCOMRAM
    74  0044C4                     __pidataCOMRAM:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _LCD_INIT_STRING
    78  0044C4  28                 	db	40
    79  0044C5  0C                 	db	12
    80  0044C6  01                 	db	1
    81  0044C7  06                 	db	6
    82                           
    83                           ;initializer for _strr
    84  0044C8  63                 	db	99
    85  0044C9  63                 	db	99
    86  0044CA  63                 	db	99
    87                           
    88                           	psect	idataBANK0
    89  0044CB                     __pidataBANK0:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _tes
    93  0044CB  CCCD               	dw	52429
    94  0044CD  4205               	dw	16901
    95                           
    96                           	psect	smallconst
    97  001000                     __psmallconst:
    98                           	opt stack 0
    99  001000  00                 	db	0
   100  001001                     __npowers_:
   101                           	opt stack 0
   102  001001  0000               	dw	0
   103  001003  3F80               	dw	16256
   104  001005  CCCD               	dw	52429
   105  001007  3DCC               	dw	15820
   106  001009  D70A               	dw	55050
   107  00100B  3C23               	dw	15395
   108  00100D  126F               	dw	4719
   109  00100F  3A83               	dw	14979
   110  001011  B717               	dw	46871
   111  001013  38D1               	dw	14545
   112  001015  C5AC               	dw	50604
   113  001017  3727               	dw	14119
   114  001019  37BD               	dw	14269
   115  00101B  3586               	dw	13702
   116  00101D  BF95               	dw	49045
   117  00101F  33D6               	dw	13270
   118  001021  CC77               	dw	52343
   119  001023  322B               	dw	12843
   120  001025  705F               	dw	28767
   121  001027  3089               	dw	12425
   122  001029  E6FF               	dw	59135
   123  00102B  2EDB               	dw	11995
   124  00102D  E508               	dw	58632
   125  00102F  1E3C               	dw	7740
   126  001031  4260               	dw	16992
   127  001033  0DA2               	dw	3490
   128  001035                     __end_of__npowers_:
   129                           	opt stack 0
   130  001035                     __powers_:
   131                           	opt stack 0
   132  001035  0000               	dw	0
   133  001037  3F80               	dw	16256
   134  001039  0000               	dw	0
   135  00103B  4120               	dw	16672
   136  00103D  0000               	dw	0
   137  00103F  42C8               	dw	17096
   138  001041  0000               	dw	0
   139  001043  447A               	dw	17530
   140  001045  4000               	dw	16384
   141  001047  461C               	dw	17948
   142  001049  5000               	dw	20480
   143  00104B  47C3               	dw	18371
   144  00104D  2400               	dw	9216
   145  00104F  4974               	dw	18804
   146  001051  9680               	dw	38528
   147  001053  4B18               	dw	19224
   148  001055  BC20               	dw	48160
   149  001057  4CBE               	dw	19646
   150  001059  6B28               	dw	27432
   151  00105B  4E6E               	dw	20078
   152  00105D  02F9               	dw	761
   153  00105F  5015               	dw	20501
   154  001061  78EC               	dw	30956
   155  001063  60AD               	dw	24749
   156  001065  F2CA               	dw	62154
   157  001067  7149               	dw	29001
   158  001069                     __end_of__powers_:
   159                           	opt stack 0
   160  001069                     _dpowers:
   161                           	opt stack 0
   162  001069  0001               	dw	1
   163  00106B  0000               	dw	0
   164  00106D  000A               	dw	10
   165  00106F  0000               	dw	0
   166  001071  0064               	dw	100
   167  001073  0000               	dw	0
   168  001075  03E8               	dw	1000
   169  001077  0000               	dw	0
   170  001079  2710               	dw	10000
   171  00107B  0000               	dw	0
   172  00107D  86A0               	dw	34464
   173  00107F  0001               	dw	1
   174  001081  4240               	dw	16960
   175  001083  000F               	dw	15
   176  001085  9680               	dw	38528
   177  001087  0098               	dw	152
   178  001089  E100               	dw	57600
   179  00108B  05F5               	dw	1525
   180  00108D  CA00               	dw	51712
   181  00108F  3B9A               	dw	15258
   182  001091                     __end_of_dpowers:
   183                           	opt stack 0
   184  0000                     _ADCON0	set	4034
   185  0000                     _ADCON0bits	set	4034
   186  0000                     _ADCON1	set	4033
   187  0000                     _ADCON2	set	4032
   188  0000                     _ADRESH	set	4036
   189  0000                     _ADRESL	set	4035
   190  0000                     _BAUDCONbits	set	4024
   191  0000                     _CCP1CON	set	4029
   192  0000                     _CCP1CONbits	set	4029
   193  0000                     _CCPR1L	set	4030
   194  0000                     _INTCON	set	4082
   195  0000                     _INTCONbits	set	4082
   196  0000                     _PIE1	set	3997
   197  0000                     _PIE1bits	set	3997
   198  0000                     _PIE2	set	4000
   199  0000                     _PIR1	set	3998
   200  0000                     _PIR1bits	set	3998
   201  0000                     _PORTA	set	3968
   202  0000                     _PORTBbits	set	3969
   203  0000                     _PORTCbits	set	3970
   204  0000                     _PORTD	set	3971
   205  0000                     _PORTEbits	set	3972
   206  0000                     _PR2	set	4043
   207  0000                     _RCONbits	set	4048
   208  0000                     _RCREG	set	4014
   209  0000                     _RCSTA	set	4011
   210  0000                     _RCSTAbits	set	4011
   211  0000                     _SPBRG	set	4015
   212  0000                     _SPBRGH	set	4016
   213  0000                     _T1CON	set	4045
   214  0000                     _T1CONbits	set	4045
   215  0000                     _T2CON	set	4042
   216  0000                     _T2CONbits	set	4042
   217  0000                     _TMR1H	set	4047
   218  0000                     _TMR1L	set	4046
   219  0000                     _TRISA	set	3986
   220  0000                     _TRISB	set	3987
   221  0000                     _TRISC	set	3988
   222  0000                     _TRISCbits	set	3988
   223  0000                     _TRISD	set	3989
   224  0000                     _TRISE	set	3990
   225  0000                     _TXREG	set	4013
   226  0000                     _TXSTA	set	4012
   227  0000                     _TXSTAbits	set	4012
   228  001091                     STR_4:
   229  001091  6C                 	db	108	;'l'
   230  001092  65                 	db	101	;'e'
   231  001093  76                 	db	118	;'v'
   232  001094  65                 	db	101	;'e'
   233  001095  6C                 	db	108	;'l'
   234  001096  20                 	db	32
   235  001097  6F                 	db	111	;'o'
   236  001098  66                 	db	102	;'f'
   237  001099  20                 	db	32
   238  00109A  73                 	db	115	;'s'
   239  00109B  70                 	db	112	;'p'
   240  00109C  65                 	db	101	;'e'
   241  00109D  65                 	db	101	;'e'
   242  00109E  64                 	db	100	;'d'
   243  00109F  3D                 	db	61	;'='
   244  0010A0  25                 	db	37
   245  0010A1  31                 	db	49	;'1'
   246  0010A2  2E                 	db	46
   247  0010A3  31                 	db	49	;'1'
   248  0010A4  66                 	db	102	;'f'
   249  0010A5  00                 	db	0
   250  0010A6                     STR_1:
   251  0010A6  56                 	db	86	;'V'
   252  0010A7  25                 	db	37
   253  0010A8  64                 	db	100	;'d'
   254  0010A9  3A                 	db	58	;':'
   255  0010AA  25                 	db	37
   256  0010AB  36                 	db	54	;'6'
   257  0010AC  2E                 	db	46
   258  0010AD  32                 	db	50	;'2'
   259  0010AE  66                 	db	102	;'f'
   260  0010AF  20                 	db	32
   261  0010B0  76                 	db	118	;'v'
   262  0010B1  6F                 	db	111	;'o'
   263  0010B2  6C                 	db	108	;'l'
   264  0010B3  74                 	db	116	;'t'
   265  0010B4  0D                 	db	13
   266  0010B5  00                 	db	0
   267  0010B6                     STR_2:
   268  0010B6  74                 	db	116	;'t'
   269  0010B7  65                 	db	101	;'e'
   270  0010B8  6D                 	db	109	;'m'
   271  0010B9  70                 	db	112	;'p'
   272  0010BA  3D                 	db	61	;'='
   273  0010BB  25                 	db	37
   274  0010BC  33                 	db	51	;'3'
   275  0010BD  2E                 	db	46
   276  0010BE  32                 	db	50	;'2'
   277  0010BF  66                 	db	102	;'f'
   278  0010C0  20                 	db	32
   279  0010C1  43                 	db	67	;'C'
   280  0010C2  00                 	db	0
   281  0010C3                     STR_3:
   282  0010C3  74                 	db	116	;'t'
   283  0010C4  65                 	db	101	;'e'
   284  0010C5  6D                 	db	109	;'m'
   285  0010C6  70                 	db	112	;'p'
   286  0010C7  3D                 	db	61	;'='
   287  0010C8  25                 	db	37
   288  0010C9  33                 	db	51	;'3'
   289  0010CA  2E                 	db	46
   290  0010CB  32                 	db	50	;'2'
   291  0010CC  66                 	db	102	;'f'
   292  0010CD  20                 	db	32
   293  0010CE  46                 	db	70	;'F'
   294  0010CF  00                 	db	0
   295  0010D0                     STR_5:
   296  0010D0  74                 	db	116	;'t'
   297  0010D1  68                 	db	104	;'h'
   298  0010D2  72                 	db	114	;'r'
   299  0010D3  65                 	db	101	;'e'
   300  0010D4  73                 	db	115	;'s'
   301  0010D5  68                 	db	104	;'h'
   302  0010D6  3D                 	db	61	;'='
   303  0010D7  25                 	db	37
   304  0010D8  31                 	db	49	;'1'
   305  0010D9  2E                 	db	46
   306  0010DA  31                 	db	49	;'1'
   307  0010DB  66                 	db	102	;'f'
   308  0010DC  00                 	db	0
   309  0010DD                     STR_6:
   310  0010DD  57                 	db	87	;'W'
   311  0010DE  61                 	db	97	;'a'
   312  0010DF  72                 	db	114	;'r'
   313  0010E0  6E                 	db	110	;'n'
   314  0010E1  69                 	db	105	;'i'
   315  0010E2  6E                 	db	110	;'n'
   316  0010E3  67                 	db	103	;'g'
   317  0010E4  21                 	db	33
   318  0010E5  00                 	db	0
   319  0000                     
   320                           ; #config settings
   321  0010E6  00                 	db	0	; dummy byte at the end
   322  0000                     
   323                           	psect	cinit
   324  003FD6                     __pcinit:
   325                           	opt stack 0
   326  003FD6                     start_initialization:
   327                           	opt stack 0
   328  003FD6                     __initialization:
   329                           	opt stack 0
   330                           
   331                           ; Clear objects allocated to BANK1 (2 bytes)
   332  003FD6  0101               	movlb	1
   333  003FD8  6B48               	clrf	(__pbssBANK1+1)& (0+255),b
   334  003FDA  6B47               	clrf	__pbssBANK1& (0+255),b
   335                           
   336                           ; Clear objects allocated to COMRAM (14 bytes)
   337  003FDC  EE00  F053         	lfsr	0,__pbssCOMRAM
   338  003FE0  0E0E               	movlw	14
   339  003FE2                     clear_0:
   340  003FE2  6AEE               	clrf	postinc0,c
   341  003FE4  06E8               	decf	wreg,f,c
   342  003FE6  E1FD               	bnz	clear_0
   343                           
   344                           ; Initialize objects allocated to BANK0 (4 bytes)
   345                           ; load TBLPTR registers with __pidataBANK0
   346  003FE8  0ECB               	movlw	low __pidataBANK0
   347  003FEA  6EF6               	movwf	tblptrl,c
   348  003FEC  0E44               	movlw	high __pidataBANK0
   349  003FEE  6EF7               	movwf	tblptrh,c
   350  003FF0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   351  003FF2  6EF8               	movwf	tblptru,c
   352  003FF4  EE00  F0E0         	lfsr	0,__pdataBANK0
   353  003FF8  EE10 F004          	lfsr	1,4
   354  003FFC                     copy_data0:
   355  003FFC  0009               	tblrd		*+
   356  003FFE  CFF5 FFEE          	movff	tablat,postinc0
   357  004002  50E5               	movf	postdec1,w,c
   358  004004  50E1               	movf	fsr1l,w,c
   359  004006  E1FA               	bnz	copy_data0
   360                           
   361                           ; Initialize objects allocated to COMRAM (7 bytes)
   362                           ; load TBLPTR registers with __pidataCOMRAM
   363  004008  0EC4               	movlw	low __pidataCOMRAM
   364  00400A  6EF6               	movwf	tblptrl,c
   365  00400C  0E44               	movlw	high __pidataCOMRAM
   366  00400E  6EF7               	movwf	tblptrh,c
   367  004010  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   368  004012  6EF8               	movwf	tblptru,c
   369  004014  EE00  F061         	lfsr	0,__pdataCOMRAM
   370  004018  EE10 F007          	lfsr	1,7
   371  00401C                     copy_data1:
   372  00401C  0009               	tblrd		*+
   373  00401E  CFF5 FFEE          	movff	tablat,postinc0
   374  004022  50E5               	movf	postdec1,w,c
   375  004024  50E1               	movf	fsr1l,w,c
   376  004026  E1FA               	bnz	copy_data1
   377  004028                     end_of_initialization:
   378                           	opt stack 0
   379  004028                     __end_of__initialization:
   380                           	opt stack 0
   381  004028  9068               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   382  00402A  9268               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   383  00402C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   384  00402E  6EF8               	movwf	tblptru,c
   385  004030  0100               	movlb	0
   386  004032  EF9F  F010         	goto	_main	;jump to C main() function
   387                           tblptru	equ	0xFF8
   388                           tblptrh	equ	0xFF7
   389                           tblptrl	equ	0xFF6
   390                           tablat	equ	0xFF5
   391                           postinc0	equ	0xFEE
   392                           wreg	equ	0xFE8
   393                           postdec1	equ	0xFE5
   394                           fsr1l	equ	0xFE1
   395                           
   396                           	psect	bssCOMRAM
   397  000053                     __pbssCOMRAM:
   398                           	opt stack 0
   399  000053                     _RPS_count:
   400                           	opt stack 0
   401  000053                     	ds	2
   402  000055                     _count_t1:
   403                           	opt stack 0
   404  000055                     	ds	2
   405  000057                     _count_t2:
   406                           	opt stack 0
   407  000057                     	ds	2
   408  000059                     _errno:
   409                           	opt stack 0
   410  000059                     	ds	2
   411  00005B                     _p2:
   412                           	opt stack 0
   413  00005B                     	ds	2
   414  00005D                     _size:
   415                           	opt stack 0
   416  00005D                     	ds	2
   417  00005F                     _ReceivedChar:
   418                           	opt stack 0
   419  00005F                     	ds	1
   420  000060                     _test0:
   421                           	opt stack 0
   422  000060                     	ds	1
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           postdec1	equ	0xFE5
   430                           fsr1l	equ	0xFE1
   431                           
   432                           	psect	dataCOMRAM
   433  000061                     __pdataCOMRAM:
   434                           	opt stack 0
   435  000061                     _LCD_INIT_STRING:
   436                           	opt stack 0
   437  000061                     	ds	4
   438  000065                     _strr:
   439                           	opt stack 0
   440  000065                     	ds	3
   441                           tblptru	equ	0xFF8
   442                           tblptrh	equ	0xFF7
   443                           tblptrl	equ	0xFF6
   444                           tablat	equ	0xFF5
   445                           postinc0	equ	0xFEE
   446                           wreg	equ	0xFE8
   447                           postdec1	equ	0xFE5
   448                           fsr1l	equ	0xFE1
   449                           
   450                           	psect	dataBANK0
   451  0000E0                     __pdataBANK0:
   452                           	opt stack 0
   453  0000E0                     _tes:
   454                           	opt stack 0
   455  0000E0                     	ds	4
   456                           tblptru	equ	0xFF8
   457                           tblptrh	equ	0xFF7
   458                           tblptrl	equ	0xFF6
   459                           tablat	equ	0xFF5
   460                           postinc0	equ	0xFEE
   461                           wreg	equ	0xFE8
   462                           postdec1	equ	0xFE5
   463                           fsr1l	equ	0xFE1
   464                           
   465                           	psect	bssBANK1
   466  000147                     __pbssBANK1:
   467                           	opt stack 0
   468  000147                     _f:
   469                           	opt stack 0
   470  000147                     	ds	2
   471                           tblptru	equ	0xFF8
   472                           tblptrh	equ	0xFF7
   473                           tblptrl	equ	0xFF6
   474                           tablat	equ	0xFF5
   475                           postinc0	equ	0xFEE
   476                           wreg	equ	0xFE8
   477                           postdec1	equ	0xFE5
   478                           fsr1l	equ	0xFE1
   479                           
   480                           	psect	cstackBANK1
   481  000100                     __pcstackBANK1:
   482                           	opt stack 0
   483  000100                     main@Buffer:
   484                           	opt stack 0
   485                           
   486                           ; 32 bytes @ 0x0
   487  000100                     	ds	32
   488  000120                     _main$2065:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x20
   492  000120                     	ds	4
   493  000124                     _main$2066:
   494                           	opt stack 0
   495                           
   496                           ; 4 bytes @ 0x24
   497  000124                     	ds	4
   498  000128                     _main$2067:
   499                           	opt stack 0
   500                           
   501                           ; 4 bytes @ 0x28
   502  000128                     	ds	4
   503  00012C                     main@raw_val:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x2C
   507  00012C                     	ds	2
   508  00012E                     main@SendToSerial:
   509                           	opt stack 0
   510                           
   511                           ; 1 bytes @ 0x2E
   512  00012E                     	ds	1
   513  00012F                     main@threshold:
   514                           	opt stack 0
   515                           
   516                           ; 4 bytes @ 0x2F
   517  00012F                     	ds	4
   518  000133                     main@voltage:
   519                           	opt stack 0
   520                           
   521                           ; 4 bytes @ 0x33
   522  000133                     	ds	4
   523  000137                     main@flag:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x37
   527  000137                     	ds	2
   528  000139                     main@RecvedChar:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x39
   532  000139                     	ds	1
   533  00013A                     main@AN:
   534                           	opt stack 0
   535                           
   536                           ; 12 bytes @ 0x3A
   537  00013A                     	ds	12
   538  000146                     main@channel:
   539                           	opt stack 0
   540                           
   541                           ; 1 bytes @ 0x46
   542  000146                     	ds	1
   543                           tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           postdec1	equ	0xFE5
   550                           fsr1l	equ	0xFE1
   551                           
   552                           	psect	cstackBANK0
   553  000080                     __pcstackBANK0:
   554                           	opt stack 0
   555  000080                     ?___fldiv:
   556                           	opt stack 0
   557  000080                     ___fldiv@b:
   558                           	opt stack 0
   559  000080                     _fround$2069:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x0
   563  000080                     	ds	4
   564  000084                     ___fldiv@a:
   565                           	opt stack 0
   566  000084                     _fround$2068:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x4
   570  000084                     	ds	4
   571  000088                     ??___fldiv:
   572  000088                     fround@prec:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x8
   576  000088                     	ds	4
   577  00008C                     ___fldiv@sign:
   578                           	opt stack 0
   579                           
   580                           ; 1 bytes @ 0xC
   581  00008C                     	ds	1
   582  00008D                     ___fldiv@rem:
   583                           	opt stack 0
   584                           
   585                           ; 4 bytes @ 0xD
   586  00008D                     	ds	4
   587  000091                     ___fldiv@new_exp:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x11
   591  000091                     	ds	2
   592  000093                     ___fldiv@grs:
   593                           	opt stack 0
   594                           
   595                           ; 4 bytes @ 0x13
   596  000093                     	ds	4
   597  000097                     ___fldiv@bexp:
   598                           	opt stack 0
   599                           
   600                           ; 1 bytes @ 0x17
   601  000097                     	ds	1
   602  000098                     ___fldiv@aexp:
   603                           	opt stack 0
   604                           
   605                           ; 1 bytes @ 0x18
   606  000098                     	ds	1
   607  000099                     ?_read_adc_voltage:
   608                           	opt stack 0
   609  000099                     ?___fladd:
   610                           	opt stack 0
   611  000099                     ___fladd@b:
   612                           	opt stack 0
   613                           
   614                           ; 4 bytes @ 0x19
   615  000099                     	ds	4
   616  00009D                     read_adc_voltage@voltage:
   617                           	opt stack 0
   618  00009D                     ___fladd@a:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x1D
   622  00009D                     	ds	4
   623  0000A1                     ??___fladd:
   624  0000A1                     read_adc_voltage@channel:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x21
   628  0000A1                     	ds	1
   629  0000A2                     read_adc_voltage@raw_value:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x22
   633  0000A2                     	ds	7
   634  0000A9                     ___fladd@signs:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x29
   638  0000A9                     	ds	1
   639  0000AA                     ___fladd@aexp:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x2A
   643  0000AA                     	ds	1
   644  0000AB                     ___fladd@bexp:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x2B
   648  0000AB                     	ds	1
   649  0000AC                     ___fladd@grs:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x2C
   653  0000AC                     	ds	1
   654  0000AD                     ?_floor:
   655                           	opt stack 0
   656  0000AD                     ?_read_adc_temp:
   657                           	opt stack 0
   658  0000AD                     ?___flsub:
   659                           	opt stack 0
   660  0000AD                     floor@x:
   661                           	opt stack 0
   662  0000AD                     ___flsub@b:
   663                           	opt stack 0
   664                           
   665                           ; 4 bytes @ 0x2D
   666  0000AD                     	ds	4
   667  0000B1                     read_adc_temp@temp:
   668                           	opt stack 0
   669  0000B1                     floor@i:
   670                           	opt stack 0
   671  0000B1                     ___flsub@a:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0x31
   675  0000B1                     	ds	4
   676  0000B5                     read_adc_temp@channel:
   677                           	opt stack 0
   678  0000B5                     floor@expon:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x35
   682  0000B5                     	ds	1
   683  0000B6                     read_adc_temp@raw_value:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x36
   687  0000B6                     	ds	1
   688  0000B7                     ?_sprintf:
   689                           	opt stack 0
   690  0000B7                     sprintf@sp:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x37
   694  0000B7                     	ds	2
   695  0000B9                     sprintf@f:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x39
   699  0000B9                     	ds	8
   700  0000C1                     ??_sprintf:
   701                           
   702                           ; 1 bytes @ 0x41
   703  0000C1                     	ds	4
   704  0000C5                     _sprintf$2071:
   705                           	opt stack 0
   706                           
   707                           ; 4 bytes @ 0x45
   708  0000C5                     	ds	4
   709  0000C9                     sprintf@ap:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x49
   713  0000C9                     	ds	2
   714  0000CB                     sprintf@flag:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x4B
   718  0000CB                     	ds	2
   719  0000CD                     sprintf@width:
   720                           	opt stack 0
   721                           
   722                           ; 2 bytes @ 0x4D
   723  0000CD                     	ds	2
   724  0000CF                     sprintf@tmpval:
   725                           	opt stack 0
   726                           
   727                           ; 4 bytes @ 0x4F
   728  0000CF                     	ds	4
   729  0000D3                     sprintf@val:
   730                           	opt stack 0
   731                           
   732                           ; 4 bytes @ 0x53
   733  0000D3                     	ds	4
   734  0000D7                     sprintf@exp:
   735                           	opt stack 0
   736                           
   737                           ; 2 bytes @ 0x57
   738  0000D7                     	ds	2
   739  0000D9                     sprintf@fval:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x59
   743  0000D9                     	ds	4
   744  0000DD                     sprintf@prec:
   745                           	opt stack 0
   746                           
   747                           ; 2 bytes @ 0x5D
   748  0000DD                     	ds	2
   749  0000DF                     sprintf@c:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x5F
   753  0000DF                     	ds	1
   754                           tblptru	equ	0xFF8
   755                           tblptrh	equ	0xFF7
   756                           tblptrl	equ	0xFF6
   757                           tablat	equ	0xFF5
   758                           postinc0	equ	0xFEE
   759                           wreg	equ	0xFE8
   760                           postdec1	equ	0xFE5
   761                           fsr1l	equ	0xFE1
   762                           
   763                           	psect	cstackCOMRAM
   764  000001                     __pcstackCOMRAM:
   765                           	opt stack 0
   766  000001                     ??_RX_isr:
   767  000001                     ?___lwmod:
   768                           	opt stack 0
   769  000001                     ?i2___wmul:
   770                           	opt stack 0
   771  000001                     ___lwmod@dividend:
   772                           	opt stack 0
   773  000001                     i2___wmul@multiplier:
   774                           	opt stack 0
   775                           
   776                           ; 2 bytes @ 0x0
   777  000001                     	ds	2
   778  000003                     ___lwmod@divisor:
   779                           	opt stack 0
   780  000003                     i2___wmul@multiplicand:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x2
   784  000003                     	ds	2
   785  000005                     ___lwmod@counter:
   786                           	opt stack 0
   787  000005                     i2___wmul@product:
   788                           	opt stack 0
   789                           
   790                           ; 2 bytes @ 0x4
   791  000005                     	ds	2
   792  000007                     Timer1_isr@f:
   793                           	opt stack 0
   794                           
   795                           ; 2 bytes @ 0x6
   796  000007                     	ds	2
   797  000009                     ??_Timer1_isr:
   798                           
   799                           ; 1 bytes @ 0x8
   800  000009                     	ds	1
   801  00000A                     ??_highIsr:
   802                           
   803                           ; 1 bytes @ 0x9
   804  00000A                     	ds	14
   805  000018                     ??_isdigit:
   806  000018                     ??_delay_cycles:
   807  000018                     ?_read_adc_raw_no_lib:
   808                           	opt stack 0
   809  000018                     ?___wmul:
   810                           	opt stack 0
   811  000018                     ?___awdiv:
   812                           	opt stack 0
   813  000018                     ?__tdiv_to_l_:
   814                           	opt stack 0
   815  000018                     ?__div_to_l_:
   816                           	opt stack 0
   817  000018                     ?___flneg:
   818                           	opt stack 0
   819  000018                     ?___lldiv:
   820                           	opt stack 0
   821  000018                     setupSerial@dummy:
   822                           	opt stack 0
   823  000018                     read_byte_no_lib@c:
   824                           	opt stack 0
   825  000018                     send_byte_no_lib@c:
   826                           	opt stack 0
   827  000018                     display7seg@v:
   828                           	opt stack 0
   829  000018                     delay_ms@n:
   830                           	opt stack 0
   831  000018                     set_pwm1_raw@raw_value:
   832                           	opt stack 0
   833  000018                     ___wmul@multiplier:
   834                           	opt stack 0
   835  000018                     ___awdiv@dividend:
   836                           	opt stack 0
   837  000018                     __div_to_l_@f1:
   838                           	opt stack 0
   839  000018                     ___flneg@f1:
   840                           	opt stack 0
   841  000018                     frexp@value:
   842                           	opt stack 0
   843  000018                     __tdiv_to_l_@f1:
   844                           	opt stack 0
   845  000018                     ___lldiv@dividend:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x17
   849  000018                     	ds	1
   850  000019                     _isdigit$1714:
   851                           	opt stack 0
   852  000019                     send_string_no_lib@p:
   853                           	opt stack 0
   854                           
   855                           ; 2 bytes @ 0x18
   856  000019                     	ds	1
   857  00001A                     ??_read_adc_raw_no_lib:
   858  00001A                     ??_set_pwm1_raw:
   859  00001A                     isdigit@c:
   860                           	opt stack 0
   861  00001A                     delay_ms@x:
   862                           	opt stack 0
   863  00001A                     ___wmul@multiplicand:
   864                           	opt stack 0
   865  00001A                     ___awdiv@divisor:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0x19
   869  00001A                     	ds	1
   870  00001B                     delay_cycles@n:
   871                           	opt stack 0
   872                           
   873                           ; 1 bytes @ 0x1A
   874  00001B                     	ds	1
   875  00001C                     read_adc_raw_no_lib@channel:
   876                           	opt stack 0
   877  00001C                     ___awdiv@counter:
   878                           	opt stack 0
   879  00001C                     delay_cycles@x:
   880                           	opt stack 0
   881  00001C                     ___wmul@product:
   882                           	opt stack 0
   883  00001C                     frexp@eptr:
   884                           	opt stack 0
   885  00001C                     __div_to_l_@f2:
   886                           	opt stack 0
   887  00001C                     __tdiv_to_l_@f2:
   888                           	opt stack 0
   889  00001C                     ___lldiv@divisor:
   890                           	opt stack 0
   891                           
   892                           ; 4 bytes @ 0x1B
   893  00001C                     	ds	1
   894  00001D                     ___awdiv@sign:
   895                           	opt stack 0
   896  00001D                     read_adc_raw_no_lib@raw_value:
   897                           	opt stack 0
   898                           
   899                           ; 2 bytes @ 0x1C
   900  00001D                     	ds	1
   901  00001E                     ??_frexp:
   902  00001E                     ??_lcd_send_nibble:
   903  00001E                     ___awdiv@quotient:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x1D
   907  00001E                     	ds	1
   908  00001F                     lcd_send_nibble@n:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x1E
   912  00001F                     	ds	1
   913  000020                     ??__tdiv_to_l_:
   914  000020                     ?___flmul:
   915                           	opt stack 0
   916  000020                     lcd_send_byte@n:
   917                           	opt stack 0
   918  000020                     __div_to_l_@quot:
   919                           	opt stack 0
   920  000020                     ___lldiv@quotient:
   921                           	opt stack 0
   922  000020                     ___flmul@b:
   923                           	opt stack 0
   924                           
   925                           ; 4 bytes @ 0x1F
   926  000020                     	ds	1
   927  000021                     lcd_send_byte@cm_data:
   928                           	opt stack 0
   929                           
   930                           ; 1 bytes @ 0x20
   931  000021                     	ds	1
   932  000022                     lcd_init@i:
   933                           	opt stack 0
   934  000022                     lcd_gotoxy@y:
   935                           	opt stack 0
   936                           
   937                           ; 1 bytes @ 0x21
   938  000022                     	ds	1
   939  000023                     lcd_gotoxy@x:
   940                           	opt stack 0
   941  000023                     __tdiv_to_l_@quot:
   942                           	opt stack 0
   943                           
   944                           ; 4 bytes @ 0x22
   945  000023                     	ds	1
   946  000024                     lcd_gotoxy@address:
   947                           	opt stack 0
   948  000024                     __div_to_l_@cntr:
   949                           	opt stack 0
   950  000024                     ___lldiv@counter:
   951                           	opt stack 0
   952  000024                     ___flmul@a:
   953                           	opt stack 0
   954                           
   955                           ; 4 bytes @ 0x23
   956  000024                     	ds	1
   957  000025                     ?___llmod:
   958                           	opt stack 0
   959  000025                     lcd_putc@c:
   960                           	opt stack 0
   961  000025                     __div_to_l_@exp1:
   962                           	opt stack 0
   963  000025                     ___llmod@dividend:
   964                           	opt stack 0
   965                           
   966                           ; 4 bytes @ 0x24
   967  000025                     	ds	1
   968  000026                     lcd_puts@s:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x25
   972  000026                     	ds	1
   973  000027                     __tdiv_to_l_@cntr:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x26
   977  000027                     	ds	1
   978  000028                     ??___flmul:
   979  000028                     __tdiv_to_l_@exp1:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x27
   983  000028                     	ds	1
   984  000029                     ___llmod@divisor:
   985                           	opt stack 0
   986                           
   987                           ; 4 bytes @ 0x28
   988  000029                     	ds	3
   989  00002C                     ___flmul@sign:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x2B
   993  00002C                     	ds	1
   994  00002D                     ___llmod@counter:
   995                           	opt stack 0
   996  00002D                     ___flmul@aexp:
   997                           	opt stack 0
   998                           
   999                           ; 1 bytes @ 0x2C
  1000  00002D                     	ds	1
  1001  00002E                     ___flmul@grs:
  1002                           	opt stack 0
  1003                           
  1004                           ; 4 bytes @ 0x2D
  1005  00002E                     	ds	4
  1006  000032                     ___flmul@bexp:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x31
  1010  000032                     	ds	1
  1011  000033                     ___flmul@prod:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x32
  1015  000033                     	ds	4
  1016  000037                     ___flmul@temp:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0x36
  1020  000037                     	ds	2
  1021  000039                     ?___fltol:
  1022                           	opt stack 0
  1023  000039                     ___flge@ff1:
  1024                           	opt stack 0
  1025  000039                     ___fltol@f1:
  1026                           	opt stack 0
  1027                           
  1028                           ; 4 bytes @ 0x38
  1029  000039                     	ds	4
  1030  00003D                     ??___fltol:
  1031  00003D                     ___flge@ff2:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0x3C
  1035  00003D                     	ds	4
  1036  000041                     ??___flge:
  1037  000041                     ___fltol@sign1:
  1038                           	opt stack 0
  1039                           
  1040                           ; 1 bytes @ 0x40
  1041  000041                     	ds	1
  1042  000042                     ___fltol@exp1:
  1043                           	opt stack 0
  1044                           
  1045                           ; 1 bytes @ 0x41
  1046  000042                     	ds	1
  1047  000043                     ?___awmod:
  1048                           	opt stack 0
  1049  000043                     ?___xxtofl:
  1050                           	opt stack 0
  1051  000043                     ___awmod@dividend:
  1052                           	opt stack 0
  1053  000043                     ___xxtofl@val:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x42
  1057  000043                     	ds	2
  1058  000045                     ___awmod@divisor:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x44
  1062  000045                     	ds	2
  1063  000047                     ??___xxtofl:
  1064  000047                     ___awmod@counter:
  1065                           	opt stack 0
  1066                           
  1067                           ; 1 bytes @ 0x46
  1068  000047                     	ds	1
  1069  000048                     ___awmod@sign:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x47
  1073  000048                     	ds	1
  1074  000049                     ?_fround:
  1075                           	opt stack 0
  1076  000049                     ?_scale:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x48
  1080  000049                     	ds	2
  1081  00004B                     ___xxtofl@sign:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x4A
  1085  00004B                     	ds	1
  1086  00004C                     ___xxtofl@exp:
  1087                           	opt stack 0
  1088                           
  1089                           ; 1 bytes @ 0x4B
  1090  00004C                     	ds	1
  1091  00004D                     ___xxtofl@arg:
  1092                           	opt stack 0
  1093  00004D                     _scale$2070:
  1094                           	opt stack 0
  1095                           
  1096                           ; 4 bytes @ 0x4C
  1097  00004D                     	ds	4
  1098  000051                     scale@scl:
  1099                           	opt stack 0
  1100                           
  1101                           ; 1 bytes @ 0x50
  1102  000051                     	ds	1
  1103  000052                     ??_main:
  1104                           
  1105                           ; 1 bytes @ 0x51
  1106  000052                     	ds	1
  1107                           tblptru	equ	0xFF8
  1108                           tblptrh	equ	0xFF7
  1109                           tblptrl	equ	0xFF6
  1110                           tablat	equ	0xFF5
  1111                           postinc0	equ	0xFEE
  1112                           wreg	equ	0xFE8
  1113                           postdec1	equ	0xFE5
  1114                           fsr1l	equ	0xFE1
  1115                           
  1116 ;;
  1117 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1118 ;;
  1119 ;; *************** function _main *****************
  1120 ;; Defined at:
  1121 ;;		line 141 in file "pwm_asl.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;		None
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;  Buffer         32    0[BANK1 ] unsigned char [32]
  1126 ;;  AN             12   58[BANK1 ] float [3]
  1127 ;;  voltage         4   51[BANK1 ] float 
  1128 ;;  threshold       4   47[BANK1 ] float 
  1129 ;;  flag            2   55[BANK1 ] int 
  1130 ;;  raw_val         2   44[BANK1 ] int 
  1131 ;;  channel         1   70[BANK1 ] unsigned char 
  1132 ;;  RecvedChar      1   57[BANK1 ] unsigned char 
  1133 ;;  SendToSerial    1   46[BANK1 ] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  1    wreg      void 
  1136 ;; Registers used:
  1137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1138 ;; Tracked objects:
  1139 ;;		On entry : 0/0
  1140 ;;		On exit  : 0/0
  1141 ;;		Unchanged: 0/0
  1142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1144 ;;      Locals:         0       0      71       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1146 ;;      Totals:         1       0      71       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1147 ;;Total ram usage:       72 bytes
  1148 ;; Hardware stack levels required when called:    9
  1149 ;; This function calls:
  1150 ;;		___awmod
  1151 ;;		___fladd
  1152 ;;		___flge
  1153 ;;		___flmul
  1154 ;;		___fltol
  1155 ;;		_delay_ms
  1156 ;;		_display7seg
  1157 ;;		_floor
  1158 ;;		_initTimers01
  1159 ;;		_init_adc_no_lib
  1160 ;;		_init_pwm1
  1161 ;;		_is_byte_available
  1162 ;;		_lcd_gotoxy
  1163 ;;		_lcd_init
  1164 ;;		_lcd_putc
  1165 ;;		_lcd_puts
  1166 ;;		_read_adc_raw_no_lib
  1167 ;;		_read_adc_temp
  1168 ;;		_read_adc_voltage
  1169 ;;		_read_byte_no_lib
  1170 ;;		_send_string_no_lib
  1171 ;;		_set_pwm1_raw
  1172 ;;		_setupPorts
  1173 ;;		_setupSerial
  1174 ;;		_sprintf
  1175 ;; This function is called by:
  1176 ;;		Startup code after reset
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           	psect	text0
  1181  00213E                     __ptext0:
  1182                           	opt stack 0
  1183  00213E                     _main:
  1184                           	opt stack 22
  1185                           
  1186                           ;pwm_asl.c: 143: size=0;
  1187                           
  1188                           ;incstack = 0
  1189  00213E  0E00               	movlw	0
  1190  002140  6E5E               	movwf	_size+1,c
  1191  002142  0E00               	movlw	0
  1192  002144  6E5D               	movwf	_size,c
  1193                           
  1194                           ;pwm_asl.c: 145: char Buffer[32];
  1195                           ;pwm_asl.c: 146: float AN[3];
  1196                           ;pwm_asl.c: 147: int raw_val;
  1197                           ;pwm_asl.c: 148: float threshold;
  1198                           ;pwm_asl.c: 149: int flag=0;
  1199  002146  0E00               	movlw	0
  1200  002148  0101               	movlb	1	; () banked
  1201  00214A  6F38               	movwf	(main@flag+1)& (0+255),b
  1202  00214C  0E00               	movlw	0
  1203  00214E  6F37               	movwf	main@flag& (0+255),b
  1204                           
  1205                           ; BSR set to: 1
  1206                           ;pwm_asl.c: 150: unsigned char channel;
  1207                           ;pwm_asl.c: 151: float voltage;
  1208                           ;pwm_asl.c: 152: setupPorts();
  1209  002150  EC23  F022         	call	_setupPorts	;wreg free
  1210                           
  1211                           ;pwm_asl.c: 153: setupSerial();
  1212  002154  ECCD  F021         	call	_setupSerial	;wreg free
  1213                           
  1214                           ;pwm_asl.c: 154: lcd_init();
  1215  002158  ECBA  F01F         	call	_lcd_init	;wreg free
  1216                           
  1217                           ;pwm_asl.c: 155: init_adc_no_lib();
  1218  00215C  EC4E  F022         	call	_init_adc_no_lib	;wreg free
  1219                           
  1220                           ;pwm_asl.c: 156: init_pwm1();
  1221  002160  EC46  F022         	call	_init_pwm1	;wreg free
  1222                           
  1223                           ;pwm_asl.c: 158: PORTCbits.RC5 = 1;
  1224  002164  8A82               	bsf	3970,5,c	;volatile
  1225                           
  1226                           ;pwm_asl.c: 159: lcd_putc('\f');
  1227  002166  0E0C               	movlw	12
  1228  002168  EC4B  F020         	call	_lcd_putc
  1229                           
  1230                           ;pwm_asl.c: 160: unsigned char RecvedChar = 0;
  1231  00216C  0E00               	movlw	0
  1232  00216E  0101               	movlb	1	; () banked
  1233  002170  6F39               	movwf	main@RecvedChar& (0+255),b
  1234                           
  1235                           ; BSR set to: 1
  1236                           ;pwm_asl.c: 161: unsigned char SendToSerial = 0;
  1237  002172  0E00               	movlw	0
  1238  002174  0101               	movlb	1	; () banked
  1239  002176  6F2E               	movwf	main@SendToSerial& (0+255),b
  1240                           
  1241                           ; BSR set to: 1
  1242                           ;pwm_asl.c: 162: initTimers01();
  1243  002178  EC1D  F021         	call	_initTimers01	;wreg free
  1244                           
  1245                           ;pwm_asl.c: 163: TRISCbits.RC0 = 1;
  1246  00217C  8094               	bsf	3988,0,c	;volatile
  1247  00217E                     l5705:
  1248  00217E  0101               	movlb	1	; () banked
  1249  002180  5147               	movf	_f& (0+255),w,b
  1250  002182  0101               	movlb	1	; () banked
  1251  002184  1148               	iorwf	(_f+1)& (0+255),w,b
  1252  002186  B4D8               	btfsc	status,2,c
  1253  002188  D7FA               	goto	l5705
  1254  00218A                     l5707:
  1255                           
  1256                           ;pwm_asl.c: 167: if (!f){
  1257  00218A  0101               	movlb	1	; () banked
  1258  00218C  5147               	movf	_f& (0+255),w,b
  1259  00218E  0101               	movlb	1	; () banked
  1260  002190  1148               	iorwf	(_f+1)& (0+255),w,b
  1261  002192  A4D8               	btfss	status,2,c
  1262  002194  D00B               	goto	l5715
  1263                           
  1264                           ; BSR set to: 1
  1265                           ;pwm_asl.c: 168: lcd_putc('\f');
  1266  002196  0E0C               	movlw	12
  1267  002198  EC4B  F020         	call	_lcd_putc
  1268                           
  1269                           ;pwm_asl.c: 169: PORTD=0;
  1270  00219C  0E00               	movlw	0
  1271  00219E  6E83               	movwf	3971,c	;volatile
  1272  0021A0                     l5713:
  1273  0021A0  0101               	movlb	1	; () banked
  1274  0021A2  5147               	movf	_f& (0+255),w,b
  1275  0021A4  0101               	movlb	1	; () banked
  1276  0021A6  1148               	iorwf	(_f+1)& (0+255),w,b
  1277  0021A8  B4D8               	btfsc	status,2,c
  1278  0021AA  D7FA               	goto	l5713
  1279  0021AC                     l5715:
  1280                           
  1281                           ; BSR set to: 1
  1282                           ;pwm_asl.c: 171: }
  1283                           ;pwm_asl.c: 174: PORTCbits.RC5 = !PORTCbits.RC5;
  1284  0021AC  BA82               	btfsc	3970,5,c	;volatile
  1285  0021AE  D003               	goto	u6710
  1286  0021B0  6A52               	clrf	??_main& (0+255),c
  1287  0021B2  2A52               	incf	??_main& (0+255),f,c
  1288  0021B4  D001               	goto	u6728
  1289  0021B6                     u6710:
  1290  0021B6  6A52               	clrf	??_main& (0+255),c
  1291  0021B8                     u6728:
  1292  0021B8  3A52               	swapf	??_main,f,c
  1293  0021BA  4652               	rlncf	??_main,f,c
  1294  0021BC  5082               	movf	3970,w,c	;volatile
  1295  0021BE  1852               	xorwf	??_main,w,c
  1296  0021C0  0BDF               	andlw	-33
  1297  0021C2  1852               	xorwf	??_main,w,c
  1298  0021C4  6E82               	movwf	3970,c	;volatile
  1299                           
  1300                           ;pwm_asl.c: 176: for (channel = 0; channel < 3; channel++) {
  1301  0021C6  0E00               	movlw	0
  1302  0021C8  0101               	movlb	1	; () banked
  1303  0021CA  6F46               	movwf	main@channel& (0+255),b
  1304  0021CC                     l5719:
  1305                           
  1306                           ; BSR set to: 1
  1307  0021CC  0E02               	movlw	2
  1308  0021CE  0101               	movlb	1	; () banked
  1309  0021D0  6546               	cpfsgt	main@channel& (0+255),b
  1310  0021D2  D001               	goto	l5723
  1311  0021D4  D057               	goto	l5747
  1312  0021D6                     l5723:
  1313                           
  1314                           ; BSR set to: 1
  1315                           ;pwm_asl.c: 178: voltage = read_adc_voltage((unsigned char) channel);
  1316  0021D6  0101               	movlb	1	; () banked
  1317  0021D8  5146               	movf	main@channel& (0+255),w,b
  1318  0021DA  ECD4  F01D         	call	_read_adc_voltage
  1319  0021DE  C099  F133         	movff	?_read_adc_voltage,main@voltage
  1320  0021E2  C09A  F134         	movff	?_read_adc_voltage+1,main@voltage+1
  1321  0021E6  C09B  F135         	movff	?_read_adc_voltage+2,main@voltage+2
  1322  0021EA  C09C  F136         	movff	?_read_adc_voltage+3,main@voltage+3
  1323                           
  1324                           ;pwm_asl.c: 179: AN[channel] = voltage;
  1325  0021EE  0101               	movlb	1	; () banked
  1326  0021F0  5146               	movf	main@channel& (0+255),w,b
  1327  0021F2  0D04               	mullw	4
  1328  0021F4  0E3A               	movlw	low main@AN
  1329  0021F6  24F3               	addwf	prodl,w,c
  1330  0021F8  6ED9               	movwf	fsr2l,c
  1331  0021FA  0E01               	movlw	high main@AN
  1332  0021FC  20F4               	addwfc	prodh,w,c
  1333  0021FE  6EDA               	movwf	fsr2h,c
  1334  002200  C133  FFDE         	movff	main@voltage,postinc2
  1335  002204  C134  FFDE         	movff	main@voltage+1,postinc2
  1336  002208  C135  FFDE         	movff	main@voltage+2,postinc2
  1337  00220C  C136  FFDE         	movff	main@voltage+3,postinc2
  1338                           
  1339                           ; BSR set to: 1
  1340                           ;pwm_asl.c: 180: if (is_byte_available()) {
  1341  002210  EC32  F022         	call	_is_byte_available	;wreg free
  1342  002214  0900               	iorlw	0
  1343  002216  B4D8               	btfsc	status,2,c
  1344  002218  D013               	goto	l5739
  1345                           
  1346                           ;pwm_asl.c: 181: RecvedChar = read_byte_no_lib();
  1347  00221A  EC5E  F022         	call	_read_byte_no_lib	;wreg free
  1348  00221E  0101               	movlb	1	; () banked
  1349  002220  6F39               	movwf	main@RecvedChar& (0+255),b
  1350                           
  1351                           ; BSR set to: 1
  1352                           ;pwm_asl.c: 182: if (RecvedChar == 'S') SendToSerial = 1;
  1353  002222  0E53               	movlw	83
  1354  002224  0101               	movlb	1	; () banked
  1355  002226  1939               	xorwf	main@RecvedChar& (0+255),w,b
  1356  002228  A4D8               	btfss	status,2,c
  1357  00222A  D002               	goto	l5735
  1358                           
  1359                           ; BSR set to: 1
  1360  00222C  0E01               	movlw	1
  1361  00222E  D006               	goto	L1
  1362  002230                     l5735:
  1363                           
  1364                           ; BSR set to: 1
  1365                           ;pwm_asl.c: 183: else if (RecvedChar == 'N') SendToSerial = 0;
  1366  002230  0E4E               	movlw	78
  1367  002232  0101               	movlb	1	; () banked
  1368  002234  1939               	xorwf	main@RecvedChar& (0+255),w,b
  1369  002236  A4D8               	btfss	status,2,c
  1370  002238  D003               	goto	l5739
  1371                           
  1372                           ; BSR set to: 1
  1373  00223A  0E00               	movlw	0
  1374  00223C                     L1:
  1375  00223C  0101               	movlb	1	; () banked
  1376  00223E  6F2E               	movwf	main@SendToSerial& (0+255),b
  1377  002240                     l5739:
  1378                           
  1379                           ;pwm_asl.c: 186: }
  1380                           ;pwm_asl.c: 187: }
  1381                           ;pwm_asl.c: 188: if (SendToSerial) {
  1382  002240  0101               	movlb	1	; () banked
  1383  002242  512E               	movf	main@SendToSerial& (0+255),w,b
  1384  002244  0101               	movlb	1	; () banked
  1385  002246  B4D8               	btfsc	status,2,c
  1386  002248  D01A               	goto	l5743
  1387                           
  1388                           ; BSR set to: 1
  1389                           ;pwm_asl.c: 190: sprintf(Buffer, "V%d:%6.2f volt\r", channel, voltage);
  1390  00224A  0E00               	movlw	low main@Buffer
  1391  00224C  0100               	movlb	0	; () banked
  1392  00224E  6FB7               	movwf	sprintf@sp& (0+255),b
  1393  002250  0E01               	movlw	high main@Buffer
  1394  002252  0100               	movlb	0	; () banked
  1395  002254  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1396  002256  0EA6               	movlw	low STR_1
  1397  002258  0100               	movlb	0	; () banked
  1398  00225A  6FB9               	movwf	sprintf@f& (0+255),b
  1399  00225C  0E10               	movlw	high STR_1
  1400  00225E  0100               	movlb	0	; () banked
  1401  002260  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1402  002262  C146  F0BB         	movff	main@channel,?_sprintf+4
  1403  002266  0100               	movlb	0	; () banked
  1404  002268  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  1405  00226A  C133  F0BD         	movff	main@voltage,?_sprintf+6
  1406  00226E  C134  F0BE         	movff	main@voltage+1,?_sprintf+7
  1407  002272  C135  F0BF         	movff	main@voltage+2,?_sprintf+8
  1408  002276  C136  F0C0         	movff	main@voltage+3,?_sprintf+9
  1409  00227A  EC74  F008         	call	_sprintf	;wreg free
  1410  00227E                     l5743:
  1411  00227E  0101               	movlb	1	; () banked
  1412  002280  2B46               	incf	main@channel& (0+255),f,b
  1413  002282  D7A4               	goto	l5719
  1414  002284                     l5747:
  1415                           
  1416                           ; BSR set to: 1
  1417                           ;pwm_asl.c: 192: }
  1418                           ;pwm_asl.c: 193: }
  1419                           ;pwm_asl.c: 195: raw_val = read_adc_raw_no_lib(0);
  1420  002284  0E00               	movlw	0
  1421  002286  EC00  F021         	call	_read_adc_raw_no_lib
  1422  00228A  C018  F12C         	movff	?_read_adc_raw_no_lib,main@raw_val
  1423  00228E  C019  F12D         	movff	?_read_adc_raw_no_lib+1,main@raw_val+1
  1424                           
  1425                           ;pwm_asl.c: 196: set_pwm1_raw(raw_val);
  1426  002292  C12C  F018         	movff	main@raw_val,set_pwm1_raw@raw_value
  1427  002296  C12D  F019         	movff	main@raw_val+1,set_pwm1_raw@raw_value+1
  1428  00229A  EC4D  F021         	call	_set_pwm1_raw	;wreg free
  1429                           
  1430                           ;pwm_asl.c: 197: if(!PORTBbits.RB0){
  1431  00229E  B081               	btfsc	3969,0,c	;volatile
  1432  0022A0  D003               	goto	l5753
  1433                           
  1434                           ;pwm_asl.c: 198: flag=~flag;
  1435  0022A2  0101               	movlb	1	; () banked
  1436  0022A4  1F37               	comf	main@flag& (0+255),f,b
  1437  0022A6  1F38               	comf	(main@flag+1)& (0+255),f,b
  1438  0022A8                     l5753:
  1439                           
  1440                           ;pwm_asl.c: 199: }
  1441                           ;pwm_asl.c: 200: if(!flag){
  1442  0022A8  0101               	movlb	1	; () banked
  1443  0022AA  5137               	movf	main@flag& (0+255),w,b
  1444  0022AC  0101               	movlb	1	; () banked
  1445  0022AE  1138               	iorwf	(main@flag+1)& (0+255),w,b
  1446  0022B0  A4D8               	btfss	status,2,c
  1447  0022B2  D036               	goto	l5761
  1448                           
  1449                           ; BSR set to: 1
  1450                           ;pwm_asl.c: 201: lcd_gotoxy(1, 1);
  1451  0022B4  0E01               	movlw	1
  1452  0022B6  6E22               	movwf	lcd_gotoxy@y,c
  1453  0022B8  0E01               	movlw	1
  1454  0022BA  ECBE  F020         	call	_lcd_gotoxy
  1455                           
  1456                           ;pwm_asl.c: 202: sprintf(Buffer, "temp=%3.2f C", AN[2]*100);
  1457  0022BE  C142  F020         	movff	main@AN+8,___flmul@b
  1458  0022C2  C143  F021         	movff	main@AN+9,___flmul@b+1
  1459  0022C6  C144  F022         	movff	main@AN+10,___flmul@b+2
  1460  0022CA  C145  F023         	movff	main@AN+11,___flmul@b+3
  1461  0022CE  0E00               	movlw	0
  1462  0022D0  6E24               	movwf	___flmul@a,c
  1463  0022D2  0E00               	movlw	0
  1464  0022D4  6E25               	movwf	___flmul@a+1,c
  1465  0022D6  0EC8               	movlw	200
  1466  0022D8  6E26               	movwf	___flmul@a+2,c
  1467  0022DA  0E42               	movlw	66
  1468  0022DC  6E27               	movwf	___flmul@a+3,c
  1469  0022DE  ECD0  F016         	call	___flmul	;wreg free
  1470  0022E2  C020  F120         	movff	?___flmul,_main$2065
  1471  0022E6  C021  F121         	movff	?___flmul+1,_main$2065+1
  1472  0022EA  C022  F122         	movff	?___flmul+2,_main$2065+2
  1473  0022EE  C023  F123         	movff	?___flmul+3,_main$2065+3
  1474                           
  1475                           ;pwm_asl.c: 202: sprintf(Buffer, "temp=%3.2f C", AN[2]*100);
  1476  0022F2  0E00               	movlw	low main@Buffer
  1477  0022F4  0100               	movlb	0	; () banked
  1478  0022F6  6FB7               	movwf	sprintf@sp& (0+255),b
  1479  0022F8  0E01               	movlw	high main@Buffer
  1480  0022FA  0100               	movlb	0	; () banked
  1481  0022FC  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1482  0022FE  0EB6               	movlw	low STR_2
  1483  002300  0100               	movlb	0	; () banked
  1484  002302  6FB9               	movwf	sprintf@f& (0+255),b
  1485  002304  0E10               	movlw	high STR_2
  1486  002306  0100               	movlb	0	; () banked
  1487  002308  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1488  00230A  C120  F0BB         	movff	_main$2065,?_sprintf+4
  1489  00230E  C121  F0BC         	movff	_main$2065+1,?_sprintf+5
  1490  002312  C122  F0BD         	movff	_main$2065+2,?_sprintf+6
  1491  002316  C123  F0BE         	movff	_main$2065+3,?_sprintf+7
  1492  00231A  EC74  F008         	call	_sprintf	;wreg free
  1493                           
  1494                           ;pwm_asl.c: 203: }else{
  1495  00231E  D048               	goto	l5767
  1496  002320                     l5761:
  1497                           
  1498                           ;pwm_asl.c: 204: lcd_gotoxy(1, 1);
  1499  002320  0E01               	movlw	1
  1500  002322  6E22               	movwf	lcd_gotoxy@y,c
  1501  002324  0E01               	movlw	1
  1502  002326  ECBE  F020         	call	_lcd_gotoxy
  1503                           
  1504                           ;pwm_asl.c: 205: sprintf(Buffer, "temp=%3.2f F", (AN[2]*100)+33.8);
  1505  00232A  0E00               	movlw	0
  1506  00232C  6E24               	movwf	___flmul@a,c
  1507  00232E  0E00               	movlw	0
  1508  002330  6E25               	movwf	___flmul@a+1,c
  1509  002332  0EC8               	movlw	200
  1510  002334  6E26               	movwf	___flmul@a+2,c
  1511  002336  0E42               	movlw	66
  1512  002338  6E27               	movwf	___flmul@a+3,c
  1513  00233A  C142  F020         	movff	main@AN+8,___flmul@b
  1514  00233E  C143  F021         	movff	main@AN+9,___flmul@b+1
  1515  002342  C144  F022         	movff	main@AN+10,___flmul@b+2
  1516  002346  C145  F023         	movff	main@AN+11,___flmul@b+3
  1517  00234A  ECD0  F016         	call	___flmul	;wreg free
  1518  00234E  C020  F099         	movff	?___flmul,___fladd@b
  1519  002352  C021  F09A         	movff	?___flmul+1,___fladd@b+1
  1520  002356  C022  F09B         	movff	?___flmul+2,___fladd@b+2
  1521  00235A  C023  F09C         	movff	?___flmul+3,___fladd@b+3
  1522  00235E  0E33               	movlw	51
  1523  002360  0100               	movlb	0	; () banked
  1524  002362  6F9D               	movwf	___fladd@a& (0+255),b
  1525  002364  0E33               	movlw	51
  1526  002366  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  1527  002368  0E07               	movlw	7
  1528  00236A  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  1529  00236C  0E42               	movlw	66
  1530  00236E  6FA0               	movwf	(___fladd@a+3)& (0+255),b
  1531  002370  EC4B  F00E         	call	___fladd	;wreg free
  1532  002374  C099  F124         	movff	?___fladd,_main$2066
  1533  002378  C09A  F125         	movff	?___fladd+1,_main$2066+1
  1534  00237C  C09B  F126         	movff	?___fladd+2,_main$2066+2
  1535  002380  C09C  F127         	movff	?___fladd+3,_main$2066+3
  1536                           
  1537                           ;pwm_asl.c: 205: sprintf(Buffer, "temp=%3.2f F", (AN[2]*100)+33.8);
  1538  002384  0E00               	movlw	low main@Buffer
  1539  002386  0100               	movlb	0	; () banked
  1540  002388  6FB7               	movwf	sprintf@sp& (0+255),b
  1541  00238A  0E01               	movlw	high main@Buffer
  1542  00238C  0100               	movlb	0	; () banked
  1543  00238E  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1544  002390  0EC3               	movlw	low STR_3
  1545  002392  0100               	movlb	0	; () banked
  1546  002394  6FB9               	movwf	sprintf@f& (0+255),b
  1547  002396  0E10               	movlw	high STR_3
  1548  002398  0100               	movlb	0	; () banked
  1549  00239A  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1550  00239C  C124  F0BB         	movff	_main$2066,?_sprintf+4
  1551  0023A0  C125  F0BC         	movff	_main$2066+1,?_sprintf+5
  1552  0023A4  C126  F0BD         	movff	_main$2066+2,?_sprintf+6
  1553  0023A8  C127  F0BE         	movff	_main$2066+3,?_sprintf+7
  1554  0023AC  EC74  F008         	call	_sprintf	;wreg free
  1555  0023B0                     l5767:
  1556                           
  1557                           ;pwm_asl.c: 206: }
  1558                           ;pwm_asl.c: 207: lcd_puts(Buffer);
  1559  0023B0  0E00               	movlw	low main@Buffer
  1560  0023B2  6E26               	movwf	lcd_puts@s,c
  1561  0023B4  0E01               	movlw	high main@Buffer
  1562  0023B6  6E27               	movwf	lcd_puts@s+1,c
  1563  0023B8  ECDF  F021         	call	_lcd_puts	;wreg free
  1564                           
  1565                           ;pwm_asl.c: 208: lcd_gotoxy(1, 2);
  1566  0023BC  0E02               	movlw	2
  1567  0023BE  6E22               	movwf	lcd_gotoxy@y,c
  1568  0023C0  0E01               	movlw	1
  1569  0023C2  ECBE  F020         	call	_lcd_gotoxy
  1570                           
  1571                           ;pwm_asl.c: 209: p2=read_adc_raw_no_lib(1);
  1572  0023C6  0E01               	movlw	1
  1573  0023C8  EC00  F021         	call	_read_adc_raw_no_lib
  1574  0023CC  C018  F05B         	movff	?_read_adc_raw_no_lib,_p2
  1575  0023D0  C019  F05C         	movff	?_read_adc_raw_no_lib+1,_p2+1
  1576                           
  1577                           ;pwm_asl.c: 210: sprintf(Buffer, "level of speed=%1.1f", floor(AN[1]));
  1578  0023D4  0E00               	movlw	low main@Buffer
  1579  0023D6  0100               	movlb	0	; () banked
  1580  0023D8  6FB7               	movwf	sprintf@sp& (0+255),b
  1581  0023DA  0E01               	movlw	high main@Buffer
  1582  0023DC  0100               	movlb	0	; () banked
  1583  0023DE  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1584  0023E0  0E91               	movlw	low STR_4
  1585  0023E2  0100               	movlb	0	; () banked
  1586  0023E4  6FB9               	movwf	sprintf@f& (0+255),b
  1587  0023E6  0E10               	movlw	high STR_4
  1588  0023E8  0100               	movlb	0	; () banked
  1589  0023EA  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1590  0023EC  C13E  F0AD         	movff	main@AN+4,floor@x
  1591  0023F0  C13F  F0AE         	movff	main@AN+5,floor@x+1
  1592  0023F4  C140  F0AF         	movff	main@AN+6,floor@x+2
  1593  0023F8  C141  F0B0         	movff	main@AN+7,floor@x+3
  1594  0023FC  EC1E  F01C         	call	_floor	;wreg free
  1595  002400  C0AD  F0BB         	movff	?_floor,?_sprintf+4
  1596  002404  C0AE  F0BC         	movff	?_floor+1,?_sprintf+5
  1597  002408  C0AF  F0BD         	movff	?_floor+2,?_sprintf+6
  1598  00240C  C0B0  F0BE         	movff	?_floor+3,?_sprintf+7
  1599  002410  EC74  F008         	call	_sprintf	;wreg free
  1600                           
  1601                           ;pwm_asl.c: 211: lcd_puts(Buffer);
  1602  002414  0E00               	movlw	low main@Buffer
  1603  002416  6E26               	movwf	lcd_puts@s,c
  1604  002418  0E01               	movlw	high main@Buffer
  1605  00241A  6E27               	movwf	lcd_puts@s+1,c
  1606  00241C  ECDF  F021         	call	_lcd_puts	;wreg free
  1607                           
  1608                           ;pwm_asl.c: 212: threshold = read_adc_temp(0);
  1609  002420  0E00               	movlw	0
  1610  002422  EC7D  F01D         	call	_read_adc_temp
  1611  002426  C0AD  F12F         	movff	?_read_adc_temp,main@threshold
  1612  00242A  C0AE  F130         	movff	?_read_adc_temp+1,main@threshold+1
  1613  00242E  C0AF  F131         	movff	?_read_adc_temp+2,main@threshold+2
  1614  002432  C0B0  F132         	movff	?_read_adc_temp+3,main@threshold+3
  1615                           
  1616                           ;pwm_asl.c: 213: lcd_gotoxy(1, 3);
  1617  002436  0E03               	movlw	3
  1618  002438  6E22               	movwf	lcd_gotoxy@y,c
  1619  00243A  0E01               	movlw	1
  1620  00243C  ECBE  F020         	call	_lcd_gotoxy
  1621                           
  1622                           ;pwm_asl.c: 214: sprintf(Buffer, "thresh=%1.1f", threshold);
  1623  002440  0E00               	movlw	low main@Buffer
  1624  002442  0100               	movlb	0	; () banked
  1625  002444  6FB7               	movwf	sprintf@sp& (0+255),b
  1626  002446  0E01               	movlw	high main@Buffer
  1627  002448  0100               	movlb	0	; () banked
  1628  00244A  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1629  00244C  0ED0               	movlw	low STR_5
  1630  00244E  0100               	movlb	0	; () banked
  1631  002450  6FB9               	movwf	sprintf@f& (0+255),b
  1632  002452  0E10               	movlw	high STR_5
  1633  002454  0100               	movlb	0	; () banked
  1634  002456  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1635  002458  C12F  F0BB         	movff	main@threshold,?_sprintf+4
  1636  00245C  C130  F0BC         	movff	main@threshold+1,?_sprintf+5
  1637  002460  C131  F0BD         	movff	main@threshold+2,?_sprintf+6
  1638  002464  C132  F0BE         	movff	main@threshold+3,?_sprintf+7
  1639  002468  EC74  F008         	call	_sprintf	;wreg free
  1640                           
  1641                           ;pwm_asl.c: 215: lcd_puts(Buffer);
  1642  00246C  0E00               	movlw	low main@Buffer
  1643  00246E  6E26               	movwf	lcd_puts@s,c
  1644  002470  0E01               	movlw	high main@Buffer
  1645  002472  6E27               	movwf	lcd_puts@s+1,c
  1646  002474  ECDF  F021         	call	_lcd_puts	;wreg free
  1647                           
  1648                           ;pwm_asl.c: 216: if (AN[2]*100>threshold) {
  1649  002478  C12F  F039         	movff	main@threshold,___flge@ff1
  1650  00247C  C130  F03A         	movff	main@threshold+1,___flge@ff1+1
  1651  002480  C131  F03B         	movff	main@threshold+2,___flge@ff1+2
  1652  002484  C132  F03C         	movff	main@threshold+3,___flge@ff1+3
  1653  002488  0E00               	movlw	0
  1654  00248A  6E24               	movwf	___flmul@a,c
  1655  00248C  0E00               	movlw	0
  1656  00248E  6E25               	movwf	___flmul@a+1,c
  1657  002490  0EC8               	movlw	200
  1658  002492  6E26               	movwf	___flmul@a+2,c
  1659  002494  0E42               	movlw	66
  1660  002496  6E27               	movwf	___flmul@a+3,c
  1661  002498  C142  F020         	movff	main@AN+8,___flmul@b
  1662  00249C  C143  F021         	movff	main@AN+9,___flmul@b+1
  1663  0024A0  C144  F022         	movff	main@AN+10,___flmul@b+2
  1664  0024A4  C145  F023         	movff	main@AN+11,___flmul@b+3
  1665  0024A8  ECD0  F016         	call	___flmul	;wreg free
  1666  0024AC  C020  F03D         	movff	?___flmul,___flge@ff2
  1667  0024B0  C021  F03E         	movff	?___flmul+1,___flge@ff2+1
  1668  0024B4  C022  F03F         	movff	?___flmul+2,___flge@ff2+2
  1669  0024B8  C023  F040         	movff	?___flmul+3,___flge@ff2+3
  1670  0024BC  EC8E  F01B         	call	___flge	;wreg free
  1671  0024C0  B0D8               	btfsc	status,0,c
  1672  0024C2  D006               	goto	l5787
  1673                           
  1674                           ;pwm_asl.c: 217: send_string_no_lib((unsigned char *) "Warning!");
  1675  0024C4  0EDD               	movlw	low STR_6
  1676  0024C6  6E19               	movwf	send_string_no_lib@p,c
  1677  0024C8  0E10               	movlw	high STR_6
  1678  0024CA  6E1A               	movwf	send_string_no_lib@p+1,c
  1679  0024CC  EC92  F021         	call	_send_string_no_lib	;wreg free
  1680  0024D0                     l5787:
  1681                           
  1682                           ;pwm_asl.c: 218: }
  1683                           ;pwm_asl.c: 219: lcd_gotoxy(1, 4);
  1684  0024D0  0E04               	movlw	4
  1685  0024D2  6E22               	movwf	lcd_gotoxy@y,c
  1686  0024D4  0E01               	movlw	1
  1687  0024D6  ECBE  F020         	call	_lcd_gotoxy
  1688                           
  1689                           ;pwm_asl.c: 220: sprintf(Buffer, "thresh=%1.1f", AN[0]);
  1690  0024DA  0E00               	movlw	low main@Buffer
  1691  0024DC  0100               	movlb	0	; () banked
  1692  0024DE  6FB7               	movwf	sprintf@sp& (0+255),b
  1693  0024E0  0E01               	movlw	high main@Buffer
  1694  0024E2  0100               	movlb	0	; () banked
  1695  0024E4  6FB8               	movwf	(sprintf@sp+1)& (0+255),b
  1696  0024E6  0ED0               	movlw	low STR_5
  1697  0024E8  0100               	movlb	0	; () banked
  1698  0024EA  6FB9               	movwf	sprintf@f& (0+255),b
  1699  0024EC  0E10               	movlw	high STR_5
  1700  0024EE  0100               	movlb	0	; () banked
  1701  0024F0  6FBA               	movwf	(sprintf@f+1)& (0+255),b
  1702  0024F2  C13A  F0BB         	movff	main@AN,?_sprintf+4
  1703  0024F6  C13B  F0BC         	movff	main@AN+1,?_sprintf+5
  1704  0024FA  C13C  F0BD         	movff	main@AN+2,?_sprintf+6
  1705  0024FE  C13D  F0BE         	movff	main@AN+3,?_sprintf+7
  1706  002502  EC74  F008         	call	_sprintf	;wreg free
  1707                           
  1708                           ;pwm_asl.c: 221: lcd_puts(Buffer);
  1709  002506  0E00               	movlw	low main@Buffer
  1710  002508  6E26               	movwf	lcd_puts@s,c
  1711  00250A  0E01               	movlw	high main@Buffer
  1712  00250C  6E27               	movwf	lcd_puts@s+1,c
  1713  00250E  ECDF  F021         	call	_lcd_puts	;wreg free
  1714                           
  1715                           ;pwm_asl.c: 237: PORTD=display7seg((int)(AN[0]*10)%10);
  1716  002512  0E00               	movlw	0
  1717  002514  6E24               	movwf	___flmul@a,c
  1718  002516  0E00               	movlw	0
  1719  002518  6E25               	movwf	___flmul@a+1,c
  1720  00251A  0E20               	movlw	32
  1721  00251C  6E26               	movwf	___flmul@a+2,c
  1722  00251E  0E41               	movlw	65
  1723  002520  6E27               	movwf	___flmul@a+3,c
  1724  002522  C13A  F020         	movff	main@AN,___flmul@b
  1725  002526  C13B  F021         	movff	main@AN+1,___flmul@b+1
  1726  00252A  C13C  F022         	movff	main@AN+2,___flmul@b+2
  1727  00252E  C13D  F023         	movff	main@AN+3,___flmul@b+3
  1728  002532  ECD0  F016         	call	___flmul	;wreg free
  1729  002536  C020  F039         	movff	?___flmul,___fltol@f1
  1730  00253A  C021  F03A         	movff	?___flmul+1,___fltol@f1+1
  1731  00253E  C022  F03B         	movff	?___flmul+2,___fltol@f1+2
  1732  002542  C023  F03C         	movff	?___flmul+3,___fltol@f1+3
  1733  002546  ECAD  F01C         	call	___fltol	;wreg free
  1734  00254A  C039  F043         	movff	?___fltol,___awmod@dividend
  1735  00254E  C03A  F044         	movff	?___fltol+1,___awmod@dividend+1
  1736  002552  0E00               	movlw	0
  1737  002554  6E46               	movwf	___awmod@divisor+1,c
  1738  002556  0E0A               	movlw	10
  1739  002558  6E45               	movwf	___awmod@divisor,c
  1740  00255A  EC17  F01F         	call	___awmod	;wreg free
  1741  00255E  5043               	movf	?___awmod,w,c
  1742  002560  EC4F  F01F         	call	_display7seg
  1743  002564  6E83               	movwf	3971,c	;volatile
  1744                           
  1745                           ;pwm_asl.c: 238: PORTA=0x20;
  1746  002566  0E20               	movlw	32
  1747  002568  6E80               	movwf	3968,c	;volatile
  1748                           
  1749                           ;pwm_asl.c: 241: delay_ms(300);
  1750  00256A  0E01               	movlw	1
  1751  00256C  6E19               	movwf	delay_ms@n+1,c
  1752  00256E  0E2C               	movlw	44
  1753  002570  6E18               	movwf	delay_ms@n,c
  1754  002572  ECF1  F021         	call	_delay_ms	;wreg free
  1755                           
  1756                           ;pwm_asl.c: 245: PORTD=display7seg(floor(AN[0]));
  1757  002576  C13A  F0AD         	movff	main@AN,floor@x
  1758  00257A  C13B  F0AE         	movff	main@AN+1,floor@x+1
  1759  00257E  C13C  F0AF         	movff	main@AN+2,floor@x+2
  1760  002582  C13D  F0B0         	movff	main@AN+3,floor@x+3
  1761  002586  EC1E  F01C         	call	_floor	;wreg free
  1762  00258A  C0AD  F128         	movff	?_floor,_main$2067
  1763  00258E  C0AE  F129         	movff	?_floor+1,_main$2067+1
  1764  002592  C0AF  F12A         	movff	?_floor+2,_main$2067+2
  1765  002596  C0B0  F12B         	movff	?_floor+3,_main$2067+3
  1766                           
  1767                           ;pwm_asl.c: 245: PORTD=display7seg(floor(AN[0]));
  1768  00259A  C128  F039         	movff	_main$2067,___fltol@f1
  1769  00259E  C129  F03A         	movff	_main$2067+1,___fltol@f1+1
  1770  0025A2  C12A  F03B         	movff	_main$2067+2,___fltol@f1+2
  1771  0025A6  C12B  F03C         	movff	_main$2067+3,___fltol@f1+3
  1772  0025AA  ECAD  F01C         	call	___fltol	;wreg free
  1773  0025AE  5039               	movf	?___fltol,w,c
  1774  0025B0  EC4F  F01F         	call	_display7seg
  1775  0025B4  6E83               	movwf	3971,c	;volatile
  1776                           
  1777                           ;pwm_asl.c: 246: PORTA=0x10;
  1778  0025B6  0E10               	movlw	16
  1779  0025B8  6E80               	movwf	3968,c	;volatile
  1780                           
  1781                           ;pwm_asl.c: 248: delay_ms(300);
  1782  0025BA  0E01               	movlw	1
  1783  0025BC  6E19               	movwf	delay_ms@n+1,c
  1784  0025BE  0E2C               	movlw	44
  1785  0025C0  6E18               	movwf	delay_ms@n,c
  1786  0025C2  ECF1  F021         	call	_delay_ms	;wreg free
  1787  0025C6  D5E1               	goto	l5707
  1788  0025C8                     __end_of_main:
  1789                           	opt stack 0
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           prodh	equ	0xFF4
  1795                           prodl	equ	0xFF3
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1l	equ	0xFE1
  1800                           postinc2	equ	0xFDE
  1801                           fsr2h	equ	0xFDA
  1802                           fsr2l	equ	0xFD9
  1803                           status	equ	0xFD8
  1804                           
  1805 ;; *************** function _sprintf *****************
  1806 ;; Defined at:
  1807 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  1808 ;; Parameters:    Size  Location     Type
  1809 ;;  sp              2   55[BANK0 ] PTR unsigned char 
  1810 ;;		 -> main@Buffer(32), 
  1811 ;;  f               2   57[BANK0 ] PTR const unsigned char 
  1812 ;;		 -> STR_7(13), STR_5(13), STR_4(21), STR_3(13), 
  1813 ;;		 -> STR_2(13), STR_1(16), 
  1814 ;; Auto vars:     Size  Location     Type
  1815 ;;  fval            4   89[BANK0 ] PTR const unsigned char 
  1816 ;;  val             4   83[BANK0 ] unsigned long 
  1817 ;;  tmpval          4   79[BANK0 ] struct .
  1818 ;;  cp              3    0        PTR const unsigned char 
  1819 ;;  prec            2   93[BANK0 ] int 
  1820 ;;  exp             2   87[BANK0 ] int 
  1821 ;;  width           2   77[BANK0 ] int 
  1822 ;;  flag            2   75[BANK0 ] unsigned short 
  1823 ;;  ap              2   73[BANK0 ] PTR void [1]
  1824 ;;		 -> ?_sprintf(2), 
  1825 ;;  len             2    0        unsigned int 
  1826 ;;  c               1   95[BANK0 ] char 
  1827 ;;  d               1    0        unsigned char 
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  2   55[BANK0 ] int 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1837 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1838 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1839 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1840 ;;      Totals:         0      41       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;Total ram usage:       41 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    5
  1844 ;; This function calls:
  1845 ;;		___awdiv
  1846 ;;		___fladd
  1847 ;;		___flge
  1848 ;;		___flmul
  1849 ;;		___flneg
  1850 ;;		___flsub
  1851 ;;		___fltol
  1852 ;;		___lldiv
  1853 ;;		___llmod
  1854 ;;		___wmul
  1855 ;;		___xxtofl
  1856 ;;		__div_to_l_
  1857 ;;		__tdiv_to_l_
  1858 ;;		_fround
  1859 ;;		_isdigit
  1860 ;;		_scale
  1861 ;; This function is called by:
  1862 ;;		_main
  1863 ;; This function uses a non-reentrant model
  1864 ;;
  1865                           
  1866                           	psect	text1
  1867  0010E8                     __ptext1:
  1868                           	opt stack 0
  1869  0010E8                     _sprintf:
  1870                           	opt stack 25
  1871                           
  1872                           ;doprnt.c: 494: va_list ap;
  1873                           ;doprnt.c: 499: signed char c;
  1874                           ;doprnt.c: 501: int width;
  1875                           ;doprnt.c: 504: int prec;
  1876                           ;doprnt.c: 508: unsigned short flag;
  1877                           ;doprnt.c: 515: char d;
  1878                           ;doprnt.c: 516: double fval;
  1879                           ;doprnt.c: 517: int exp;
  1880                           ;doprnt.c: 523: union {
  1881                           ;doprnt.c: 524: unsigned long vd;
  1882                           ;doprnt.c: 525: double integ;
  1883                           ;doprnt.c: 526: } tmpval;
  1884                           ;doprnt.c: 528: unsigned long val;
  1885                           ;doprnt.c: 529: unsigned len;
  1886                           ;doprnt.c: 530: const char * cp;
  1887                           ;doprnt.c: 533: *ap = __va_start();
  1888                           
  1889                           ;incstack = 0
  1890  0010E8  0EBB               	movlw	low (?_sprintf+4)
  1891  0010EA  0100               	movlb	0	; () banked
  1892  0010EC  6FC9               	movwf	sprintf@ap& (0+255),b
  1893  0010EE  0E00               	movlw	high (?_sprintf+4)
  1894  0010F0  0100               	movlb	0	; () banked
  1895  0010F2  6FCA               	movwf	(sprintf@ap+1)& (0+255),b
  1896                           
  1897                           ;doprnt.c: 536: while(c = *f++) {
  1898  0010F4  EF35  F00E         	goto	l5643
  1899  0010F8                     l5357:
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;doprnt.c: 538: if(c != '%')
  1903  0010F8  0E25               	movlw	37
  1904  0010FA  0100               	movlb	0	; () banked
  1905  0010FC  19DF               	xorwf	sprintf@c& (0+255),w,b
  1906  0010FE  B4D8               	btfsc	status,2,c
  1907  001100  D00B               	goto	l5363
  1908                           
  1909                           ; BSR set to: 0
  1910                           ;doprnt.c: 540: {
  1911                           ;doprnt.c: 541: ((*sp++ = (c)));
  1912  001102  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  1913  001106  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  1914  00110A  C0DF  FFDF         	movff	sprintf@c,indf2
  1915                           
  1916                           ; BSR set to: 0
  1917  00110E  0100               	movlb	0	; () banked
  1918  001110  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  1919  001112  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  1920                           
  1921                           ;doprnt.c: 542: continue;
  1922  001114  EF35  F00E         	goto	l5643
  1923  001118                     l5363:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;doprnt.c: 543: }
  1927                           ;doprnt.c: 546: width = 0;
  1928  001118  0E00               	movlw	0
  1929  00111A  0100               	movlb	0	; () banked
  1930  00111C  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  1931  00111E  0E00               	movlw	0
  1932  001120  6FCD               	movwf	sprintf@width& (0+255),b
  1933                           
  1934                           ;doprnt.c: 548: flag = 0;
  1935  001122  0E00               	movlw	0
  1936  001124  0100               	movlb	0	; () banked
  1937  001126  6FCC               	movwf	(sprintf@flag+1)& (0+255),b
  1938  001128  0E00               	movlw	0
  1939  00112A  6FCB               	movwf	sprintf@flag& (0+255),b
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1943  00112C  C0B9  FFF6         	movff	sprintf@f,tblptrl
  1944  001130  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  1945  001134                     	if	0	;tblptru may be non-zero
  1946  001134                     	endif
  1947  001134                     	if	0	;tblptru may be non-zero
  1948  001134                     	endif
  1949  001134  0008               	tblrd		*
  1950  001136  50F5               	movf	tablat,w,c
  1951  001138  EC14  F022         	call	_isdigit
  1952  00113C  A0D8               	btfss	status,0,c
  1953  00113E  D03F               	goto	l5377
  1954                           
  1955                           ;doprnt.c: 598: width = 0;
  1956  001140  0E00               	movlw	0
  1957  001142  0100               	movlb	0	; () banked
  1958  001144  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  1959  001146  0E00               	movlw	0
  1960  001148  6FCD               	movwf	sprintf@width& (0+255),b
  1961  00114A                     l5369:
  1962                           
  1963                           ;doprnt.c: 600: width *= 10;
  1964  00114A  C0CD  F018         	movff	sprintf@width,___wmul@multiplier
  1965  00114E  C0CE  F019         	movff	sprintf@width+1,___wmul@multiplier+1
  1966  001152  0E00               	movlw	0
  1967  001154  6E1B               	movwf	___wmul@multiplicand+1,c
  1968  001156  0E0A               	movlw	10
  1969  001158  6E1A               	movwf	___wmul@multiplicand,c
  1970  00115A  ECA7  F021         	call	___wmul	;wreg free
  1971  00115E  C018  F0CD         	movff	?___wmul,sprintf@width
  1972  001162  C019  F0CE         	movff	?___wmul+1,sprintf@width+1
  1973                           
  1974                           ;doprnt.c: 601: width += *f++ - '0';
  1975  001166  0ED0               	movlw	208
  1976  001168  0100               	movlb	0	; () banked
  1977  00116A  6FC1               	movwf	??_sprintf& (0+255),b
  1978  00116C  0EFF               	movlw	255
  1979  00116E  0100               	movlb	0	; () banked
  1980  001170  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  1981  001172  C0B9  FFF6         	movff	sprintf@f,tblptrl
  1982  001176  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  1983  00117A                     	if	0	;tblptru may be non-zero
  1984  00117A                     	endif
  1985  00117A                     	if	0	;tblptru may be non-zero
  1986  00117A                     	endif
  1987  00117A  0008               	tblrd		*
  1988  00117C  50F5               	movf	tablat,w,c
  1989  00117E  0100               	movlb	0	; () banked
  1990  001180  6FC3               	movwf	(??_sprintf+2)& (0+255),b
  1991  001182  6BC4               	clrf	(??_sprintf+3)& (0+255),b
  1992  001184  0100               	movlb	0	; () banked
  1993  001186  51C1               	movf	??_sprintf& (0+255),w,b
  1994  001188  0100               	movlb	0	; () banked
  1995  00118A  27C3               	addwf	(??_sprintf+2)& (0+255),f,b
  1996  00118C  0100               	movlb	0	; () banked
  1997  00118E  51C2               	movf	(??_sprintf+1)& (0+255),w,b
  1998  001190  0100               	movlb	0	; () banked
  1999  001192  23C4               	addwfc	(??_sprintf+3)& (0+255),f,b
  2000  001194  0100               	movlb	0	; () banked
  2001  001196  51C3               	movf	(??_sprintf+2)& (0+255),w,b
  2002  001198  0100               	movlb	0	; () banked
  2003  00119A  27CD               	addwf	sprintf@width& (0+255),f,b
  2004  00119C  0100               	movlb	0	; () banked
  2005  00119E  51C4               	movf	(??_sprintf+3)& (0+255),w,b
  2006  0011A0  0100               	movlb	0	; () banked
  2007  0011A2  23CE               	addwfc	(sprintf@width+1)& (0+255),f,b
  2008                           
  2009                           ; BSR set to: 0
  2010  0011A4  0100               	movlb	0	; () banked
  2011  0011A6  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2012  0011A8  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2016  0011AA  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2017  0011AE  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2018  0011B2                     	if	0	;tblptru may be non-zero
  2019  0011B2                     	endif
  2020  0011B2                     	if	0	;tblptru may be non-zero
  2021  0011B2                     	endif
  2022  0011B2  0008               	tblrd		*
  2023  0011B4  50F5               	movf	tablat,w,c
  2024  0011B6  EC14  F022         	call	_isdigit
  2025  0011BA  B0D8               	btfsc	status,0,c
  2026  0011BC  D7C6               	goto	l5369
  2027  0011BE                     l5377:
  2028                           
  2029                           ;doprnt.c: 608: }
  2030                           ;doprnt.c: 611: if(*f == '.') {
  2031  0011BE  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2032  0011C2  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2033  0011C6                     	if	0	;tblptru may be non-zero
  2034  0011C6                     	endif
  2035  0011C6                     	if	0	;tblptru may be non-zero
  2036  0011C6                     	endif
  2037  0011C6  0008               	tblrd		*
  2038  0011C8  50F5               	movf	tablat,w,c
  2039  0011CA  0A2E               	xorlw	46
  2040  0011CC  A4D8               	btfss	status,2,c
  2041  0011CE  D034               	goto	l5389
  2042                           
  2043                           ;doprnt.c: 612: flag |= 0x4000;
  2044  0011D0  0100               	movlb	0	; () banked
  2045  0011D2  8DCC               	bsf	(sprintf@flag+1)& (0+255),6,b
  2046                           
  2047                           ;doprnt.c: 613: f++;
  2048  0011D4  0100               	movlb	0	; () banked
  2049  0011D6  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2050  0011D8  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2051                           
  2052                           ; BSR set to: 0
  2053                           ;doprnt.c: 620: {
  2054                           ;doprnt.c: 621: prec = 0;
  2055  0011DA  0E00               	movlw	0
  2056  0011DC  0100               	movlb	0	; () banked
  2057  0011DE  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2058  0011E0  0E00               	movlw	0
  2059  0011E2  6FDD               	movwf	sprintf@prec& (0+255),b
  2060                           
  2061                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2062  0011E4  D01E               	goto	l5387
  2063  0011E6                     l5383:
  2064                           
  2065                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2066  0011E6  C0DD  F018         	movff	sprintf@prec,___wmul@multiplier
  2067  0011EA  C0DE  F019         	movff	sprintf@prec+1,___wmul@multiplier+1
  2068  0011EE  0E00               	movlw	0
  2069  0011F0  6E1B               	movwf	___wmul@multiplicand+1,c
  2070  0011F2  0E0A               	movlw	10
  2071  0011F4  6E1A               	movwf	___wmul@multiplicand,c
  2072  0011F6  ECA7  F021         	call	___wmul	;wreg free
  2073  0011FA  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2074  0011FE  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2075  001202                     	if	0	;tblptru may be non-zero
  2076  001202                     	endif
  2077  001202                     	if	0	;tblptru may be non-zero
  2078  001202                     	endif
  2079  001202  0008               	tblrd		*
  2080  001204  50F5               	movf	tablat,w,c
  2081  001206  2618               	addwf	?___wmul,f,c
  2082  001208  0E00               	movlw	0
  2083  00120A  2219               	addwfc	?___wmul+1,f,c
  2084  00120C  0ED0               	movlw	208
  2085  00120E  2418               	addwf	?___wmul,w,c
  2086  001210  0100               	movlb	0	; () banked
  2087  001212  6FDD               	movwf	sprintf@prec& (0+255),b
  2088  001214  0EFF               	movlw	255
  2089  001216  2019               	addwfc	?___wmul+1,w,c
  2090  001218  0100               	movlb	0	; () banked
  2091  00121A  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094  00121C  0100               	movlb	0	; () banked
  2095  00121E  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2096  001220  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2097  001222                     l5387:
  2098                           
  2099                           ; BSR set to: 0
  2100  001222  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2101  001226  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2102  00122A                     	if	0	;tblptru may be non-zero
  2103  00122A                     	endif
  2104  00122A                     	if	0	;tblptru may be non-zero
  2105  00122A                     	endif
  2106  00122A  0008               	tblrd		*
  2107  00122C  50F5               	movf	tablat,w,c
  2108  00122E  EC14  F022         	call	_isdigit
  2109  001232  A0D8               	btfss	status,0,c
  2110  001234  D00C               	goto	l5397
  2111  001236  D7D7               	goto	l5383
  2112  001238                     l5389:
  2113                           
  2114                           ;doprnt.c: 626: prec = 0;
  2115  001238  0E00               	movlw	0
  2116  00123A  0100               	movlb	0	; () banked
  2117  00123C  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2118  00123E  0E00               	movlw	0
  2119  001240  6FDD               	movwf	sprintf@prec& (0+255),b
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;doprnt.c: 628: flag |= 0x1000;
  2123  001242  0100               	movlb	0	; () banked
  2124  001244  89CC               	bsf	(sprintf@flag+1)& (0+255),4,b
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;doprnt.c: 630: }
  2128                           ;doprnt.c: 635: switch(c = *f++) {
  2129  001246  D003               	goto	l5397
  2130  001248                     l5393:
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;doprnt.c: 663: flag |= 0x400;
  2134  001248  0100               	movlb	0	; () banked
  2135  00124A  85CC               	bsf	(sprintf@flag+1)& (0+255),2,b
  2136                           
  2137                           ; BSR set to: 0
  2138                           ;doprnt.c: 698: case 'i':
  2139                           ;doprnt.c: 699: break;
  2140                           
  2141                           ; BSR set to: 0
  2142                           
  2143                           ;doprnt.c: 697: case 'd':
  2144                           
  2145                           ;doprnt.c: 664: break;
  2146  00124C  D01A               	goto	l5399
  2147  00124E                     l5397:
  2148  00124E  C0B9  FFF6         	movff	sprintf@f,tblptrl
  2149  001252  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  2150  001256  0100               	movlb	0	; () banked
  2151  001258  4BB9               	infsnz	sprintf@f& (0+255),f,b
  2152  00125A  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  2153  00125C                     	if	0	;tblptru may be non-zero
  2154  00125C                     	endif
  2155  00125C                     	if	0	;tblptru may be non-zero
  2156  00125C                     	endif
  2157  00125C  0008               	tblrd		*
  2158  00125E  CFF5 F0DF          	movff	tablat,sprintf@c
  2159  001262  0100               	movlb	0	; () banked
  2160  001264  51DF               	movf	sprintf@c& (0+255),w,b
  2161                           
  2162                           ; Switch size 1, requested type "space"
  2163                           ; Number of cases is 4, Range of values is 0 to 105
  2164                           ; switch strategies available:
  2165                           ; Name         Instructions Cycles
  2166                           ; simple_byte           13     7 (average)
  2167                           ;	Chosen strategy is simple_byte
  2168  001266  0A00               	xorlw	0	; case 0
  2169  001268  B4D8               	btfsc	status,2,c
  2170  00126A  EF44  F00E         	goto	l5645
  2171  00126E  0A64               	xorlw	100	; case 100
  2172  001270  B4D8               	btfsc	status,2,c
  2173  001272  D007               	goto	l5399
  2174  001274  0A02               	xorlw	2	; case 102
  2175  001276  B4D8               	btfsc	status,2,c
  2176  001278  D7E7               	goto	l5393
  2177  00127A  0A0F               	xorlw	15	; case 105
  2178  00127C  A4D8               	btfss	status,2,c
  2179  00127E  EF35  F00E         	goto	l5643
  2180  001282                     l5399:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;doprnt.c: 825: if(flag & (0x700)) {
  2184  001282  0E07               	movlw	7
  2185  001284  0100               	movlb	0	; () banked
  2186  001286  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2187  001288  B4D8               	btfsc	status,2,c
  2188  00128A  D389               	goto	l5563
  2189                           
  2190                           ; BSR set to: 0
  2191                           ;doprnt.c: 827: if(flag & 0x1000)
  2192  00128C  0100               	movlb	0	; () banked
  2193  00128E  A9CC               	btfss	(sprintf@flag+1)& (0+255),4,b
  2194  001290  D005               	goto	l5405
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;doprnt.c: 829: prec = 6;
  2198  001292  0E00               	movlw	0
  2199  001294  0100               	movlb	0	; () banked
  2200  001296  6FDE               	movwf	(sprintf@prec+1)& (0+255),b
  2201  001298  0E06               	movlw	6
  2202  00129A  6FDD               	movwf	sprintf@prec& (0+255),b
  2203  00129C                     l5405:
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2207  00129C  C0C9  FFD9         	movff	sprintf@ap,fsr2l
  2208  0012A0  C0CA  FFDA         	movff	sprintf@ap+1,fsr2h
  2209  0012A4  CFDE F0D9          	movff	postinc2,sprintf@fval
  2210  0012A8  CFDE F0DA          	movff	postinc2,sprintf@fval+1
  2211  0012AC  CFDE F0DB          	movff	postinc2,sprintf@fval+2
  2212  0012B0  CFDE F0DC          	movff	postinc2,sprintf@fval+3
  2213                           
  2214                           ; BSR set to: 0
  2215  0012B4  0E04               	movlw	4
  2216  0012B6  0100               	movlb	0	; () banked
  2217  0012B8  27C9               	addwf	sprintf@ap& (0+255),f,b
  2218  0012BA  0E00               	movlw	0
  2219  0012BC  23CA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2220                           
  2221                           ; BSR set to: 0
  2222                           ;doprnt.c: 831: if(fval < 0.0) {
  2223  0012BE  0100               	movlb	0	; () banked
  2224  0012C0  AFDC               	btfss	(sprintf@fval+3)& (0+255),7,b
  2225  0012C2  D015               	goto	l5415
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;doprnt.c: 832: fval = -fval;
  2229  0012C4  C0D9  F018         	movff	sprintf@fval,___flneg@f1
  2230  0012C8  C0DA  F019         	movff	sprintf@fval+1,___flneg@f1+1
  2231  0012CC  C0DB  F01A         	movff	sprintf@fval+2,___flneg@f1+2
  2232  0012D0  C0DC  F01B         	movff	sprintf@fval+3,___flneg@f1+3
  2233  0012D4  EC36  F021         	call	___flneg	;wreg free
  2234  0012D8  C018  F0D9         	movff	?___flneg,sprintf@fval
  2235  0012DC  C019  F0DA         	movff	?___flneg+1,sprintf@fval+1
  2236  0012E0  C01A  F0DB         	movff	?___flneg+2,sprintf@fval+2
  2237  0012E4  C01B  F0DC         	movff	?___flneg+3,sprintf@fval+3
  2238                           
  2239                           ;doprnt.c: 833: flag |= 0x03;
  2240  0012E8  0E03               	movlw	3
  2241  0012EA  0100               	movlb	0	; () banked
  2242  0012EC  13CB               	iorwf	sprintf@flag& (0+255),f,b
  2243  0012EE                     l5415:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 834: }
  2247                           ;doprnt.c: 835: exp = 0;
  2248  0012EE  0E00               	movlw	0
  2249  0012F0  0100               	movlb	0	; () banked
  2250  0012F2  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  2251  0012F4  0E00               	movlw	0
  2252  0012F6  6FD7               	movwf	sprintf@exp& (0+255),b
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;doprnt.c: 836: if( fval!=0) {
  2256  0012F8  0100               	movlb	0	; () banked
  2257  0012FA  51D9               	movf	sprintf@fval& (0+255),w,b
  2258  0012FC  0100               	movlb	0	; () banked
  2259  0012FE  11DA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2260  001300  0100               	movlb	0	; () banked
  2261  001302  11DB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2262  001304  0100               	movlb	0	; () banked
  2263  001306  11DC               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2264  001308  B4D8               	btfsc	status,2,c
  2265  00130A  D088               	goto	l5443
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2269  00130C  0100               	movlb	0	; () banked
  2270  00130E  35DB               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2271  001310  35DC               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2272  001312  0F82               	addlw	130
  2273  001314  0100               	movlb	0	; () banked
  2274  001316  6FD7               	movwf	sprintf@exp& (0+255),b
  2275  001318  0100               	movlb	0	; () banked
  2276  00131A  6BD8               	clrf	(sprintf@exp+1)& (0+255),b
  2277  00131C  0EFF               	movlw	255
  2278  00131E  23D8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;doprnt.c: 838: exp--;
  2282  001320  0100               	movlb	0	; () banked
  2283  001322  07D7               	decf	sprintf@exp& (0+255),f,b
  2284  001324  A0D8               	btfss	status,0,c
  2285  001326  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;doprnt.c: 839: exp *= 3;
  2289  001328  C0D7  F018         	movff	sprintf@exp,___wmul@multiplier
  2290  00132C  C0D8  F019         	movff	sprintf@exp+1,___wmul@multiplier+1
  2291  001330  0E00               	movlw	0
  2292  001332  6E1B               	movwf	___wmul@multiplicand+1,c
  2293  001334  0E03               	movlw	3
  2294  001336  6E1A               	movwf	___wmul@multiplicand,c
  2295  001338  ECA7  F021         	call	___wmul	;wreg free
  2296  00133C  C018  F0D7         	movff	?___wmul,sprintf@exp
  2297  001340  C019  F0D8         	movff	?___wmul+1,sprintf@exp+1
  2298                           
  2299                           ;doprnt.c: 840: exp /= 10;
  2300  001344  C0D7  F018         	movff	sprintf@exp,___awdiv@dividend
  2301  001348  C0D8  F019         	movff	sprintf@exp+1,___awdiv@dividend+1
  2302  00134C  0E00               	movlw	0
  2303  00134E  6E1B               	movwf	___awdiv@divisor+1,c
  2304  001350  0E0A               	movlw	10
  2305  001352  6E1A               	movwf	___awdiv@divisor,c
  2306  001354  EC18  F01E         	call	___awdiv	;wreg free
  2307  001358  C018  F0D7         	movff	?___awdiv,sprintf@exp
  2308  00135C  C019  F0D8         	movff	?___awdiv+1,sprintf@exp+1
  2309                           
  2310                           ;doprnt.c: 841: if(exp < 0)
  2311  001360  0100               	movlb	0	; () banked
  2312  001362  AFD8               	btfss	(sprintf@exp+1)& (0+255),7,b
  2313  001364  D004               	goto	l5431
  2314                           
  2315                           ; BSR set to: 0
  2316                           ;doprnt.c: 842: exp--;
  2317  001366  0100               	movlb	0	; () banked
  2318  001368  07D7               	decf	sprintf@exp& (0+255),f,b
  2319  00136A  A0D8               	btfss	status,0,c
  2320  00136C  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2321  00136E                     l5431:
  2322                           
  2323                           ; BSR set to: 0
  2324                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2325  00136E  0100               	movlb	0	; () banked
  2326  001370  51D7               	movf	sprintf@exp& (0+255),w,b
  2327  001372  0800               	sublw	0
  2328  001374  ECE4  F012         	call	_scale
  2329  001378  C049  F0CF         	movff	?_scale,sprintf@tmpval
  2330  00137C  C04A  F0D0         	movff	?_scale+1,sprintf@tmpval+1
  2331  001380  C04B  F0D1         	movff	?_scale+2,sprintf@tmpval+2
  2332  001384  C04C  F0D2         	movff	?_scale+3,sprintf@tmpval+3
  2333                           
  2334                           ;doprnt.c: 847: tmpval.integ *= fval;
  2335  001388  C0CF  F020         	movff	sprintf@tmpval,___flmul@b
  2336  00138C  C0D0  F021         	movff	sprintf@tmpval+1,___flmul@b+1
  2337  001390  C0D1  F022         	movff	sprintf@tmpval+2,___flmul@b+2
  2338  001394  C0D2  F023         	movff	sprintf@tmpval+3,___flmul@b+3
  2339  001398  C0D9  F024         	movff	sprintf@fval,___flmul@a
  2340  00139C  C0DA  F025         	movff	sprintf@fval+1,___flmul@a+1
  2341  0013A0  C0DB  F026         	movff	sprintf@fval+2,___flmul@a+2
  2342  0013A4  C0DC  F027         	movff	sprintf@fval+3,___flmul@a+3
  2343  0013A8  ECD0  F016         	call	___flmul	;wreg free
  2344  0013AC  C020  F0CF         	movff	?___flmul,sprintf@tmpval
  2345  0013B0  C021  F0D0         	movff	?___flmul+1,sprintf@tmpval+1
  2346  0013B4  C022  F0D1         	movff	?___flmul+2,sprintf@tmpval+2
  2347  0013B8  C023  F0D2         	movff	?___flmul+3,sprintf@tmpval+3
  2348                           
  2349                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2350  0013BC  C0CF  F039         	movff	sprintf@tmpval,___flge@ff1
  2351  0013C0  C0D0  F03A         	movff	sprintf@tmpval+1,___flge@ff1+1
  2352  0013C4  C0D1  F03B         	movff	sprintf@tmpval+2,___flge@ff1+2
  2353  0013C8  C0D2  F03C         	movff	sprintf@tmpval+3,___flge@ff1+3
  2354  0013CC  0E00               	movlw	0
  2355  0013CE  6E3D               	movwf	___flge@ff2,c
  2356  0013D0  0E00               	movlw	0
  2357  0013D2  6E3E               	movwf	___flge@ff2+1,c
  2358  0013D4  0E80               	movlw	128
  2359  0013D6  6E3F               	movwf	___flge@ff2+2,c
  2360  0013D8  0E3F               	movlw	63
  2361  0013DA  6E40               	movwf	___flge@ff2+3,c
  2362  0013DC  EC8E  F01B         	call	___flge	;wreg free
  2363  0013E0  B0D8               	btfsc	status,0,c
  2364  0013E2  D005               	goto	l5439
  2365                           
  2366                           ;doprnt.c: 849: exp--;
  2367  0013E4  0100               	movlb	0	; () banked
  2368  0013E6  07D7               	decf	sprintf@exp& (0+255),f,b
  2369  0013E8  A0D8               	btfss	status,0,c
  2370  0013EA  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2371  0013EC  D017               	goto	l5443
  2372  0013EE                     l5439:
  2373                           
  2374                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2375  0013EE  C0CF  F039         	movff	sprintf@tmpval,___flge@ff1
  2376  0013F2  C0D0  F03A         	movff	sprintf@tmpval+1,___flge@ff1+1
  2377  0013F6  C0D1  F03B         	movff	sprintf@tmpval+2,___flge@ff1+2
  2378  0013FA  C0D2  F03C         	movff	sprintf@tmpval+3,___flge@ff1+3
  2379  0013FE  0E00               	movlw	0
  2380  001400  6E3D               	movwf	___flge@ff2,c
  2381  001402  0E00               	movlw	0
  2382  001404  6E3E               	movwf	___flge@ff2+1,c
  2383  001406  0E20               	movlw	32
  2384  001408  6E3F               	movwf	___flge@ff2+2,c
  2385  00140A  0E41               	movlw	65
  2386  00140C  6E40               	movwf	___flge@ff2+3,c
  2387  00140E  EC8E  F01B         	call	___flge	;wreg free
  2388  001412  A0D8               	btfss	status,0,c
  2389  001414  D003               	goto	l5443
  2390                           
  2391                           ;doprnt.c: 851: exp++;
  2392  001416  0100               	movlb	0	; () banked
  2393  001418  4BD7               	infsnz	sprintf@exp& (0+255),f,b
  2394  00141A  2BD8               	incf	(sprintf@exp+1)& (0+255),f,b
  2395  00141C                     l5443:
  2396                           
  2397                           ;doprnt.c: 852: }
  2398                           ;doprnt.c: 1112: if(prec <= 12)
  2399  00141C  0100               	movlb	0	; () banked
  2400  00141E  BFDE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2401  001420  D008               	goto	l5445
  2402  001422  0100               	movlb	0	; () banked
  2403  001424  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  2404  001426  E123               	bnz	l5447
  2405  001428  0E0D               	movlw	13
  2406  00142A  0100               	movlb	0	; () banked
  2407  00142C  5DDD               	subwf	sprintf@prec& (0+255),w,b
  2408  00142E  B0D8               	btfsc	status,0,c
  2409  001430  D01E               	goto	l5447
  2410  001432                     l5445:
  2411                           
  2412                           ; BSR set to: 0
  2413                           ;doprnt.c: 1113: fval += fround(prec);
  2414  001432  C0D9  F099         	movff	sprintf@fval,___fladd@b
  2415  001436  C0DA  F09A         	movff	sprintf@fval+1,___fladd@b+1
  2416  00143A  C0DB  F09B         	movff	sprintf@fval+2,___fladd@b+2
  2417  00143E  C0DC  F09C         	movff	sprintf@fval+3,___fladd@b+3
  2418  001442  0100               	movlb	0	; () banked
  2419  001444  51DD               	movf	sprintf@prec& (0+255),w,b
  2420  001446  EC78  F018         	call	_fround
  2421  00144A  C049  F09D         	movff	?_fround,___fladd@a
  2422  00144E  C04A  F09E         	movff	?_fround+1,___fladd@a+1
  2423  001452  C04B  F09F         	movff	?_fround+2,___fladd@a+2
  2424  001456  C04C  F0A0         	movff	?_fround+3,___fladd@a+3
  2425  00145A  EC4B  F00E         	call	___fladd	;wreg free
  2426  00145E  C099  F0D9         	movff	?___fladd,sprintf@fval
  2427  001462  C09A  F0DA         	movff	?___fladd+1,sprintf@fval+1
  2428  001466  C09B  F0DB         	movff	?___fladd+2,sprintf@fval+2
  2429  00146A  C09C  F0DC         	movff	?___fladd+3,sprintf@fval+3
  2430  00146E                     l5447:
  2431                           
  2432                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2433  00146E  0100               	movlb	0	; () banked
  2434  001470  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2435  001472  D008               	goto	l5449
  2436  001474  0100               	movlb	0	; () banked
  2437  001476  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2438  001478  E12A               	bnz	l5455
  2439  00147A  0E0A               	movlw	10
  2440  00147C  0100               	movlb	0	; () banked
  2441  00147E  5DD7               	subwf	sprintf@exp& (0+255),w,b
  2442  001480  B0D8               	btfsc	status,0,c
  2443  001482  D025               	goto	l5455
  2444  001484                     l5449:
  2445                           
  2446                           ; BSR set to: 0
  2447  001484  0100               	movlb	0	; () banked
  2448  001486  51D9               	movf	sprintf@fval& (0+255),w,b
  2449  001488  0100               	movlb	0	; () banked
  2450  00148A  11DA               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2451  00148C  0100               	movlb	0	; () banked
  2452  00148E  11DB               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2453  001490  0100               	movlb	0	; () banked
  2454  001492  11DC               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2455  001494  B4D8               	btfsc	status,2,c
  2456  001496  D067               	goto	l5469
  2457                           
  2458                           ; BSR set to: 0
  2459  001498  C0D9  F039         	movff	sprintf@fval,___fltol@f1
  2460  00149C  C0DA  F03A         	movff	sprintf@fval+1,___fltol@f1+1
  2461  0014A0  C0DB  F03B         	movff	sprintf@fval+2,___fltol@f1+2
  2462  0014A4  C0DC  F03C         	movff	sprintf@fval+3,___fltol@f1+3
  2463  0014A8  ECAD  F01C         	call	___fltol	;wreg free
  2464  0014AC  5039               	movf	?___fltol,w,c
  2465  0014AE  103A               	iorwf	?___fltol+1,w,c
  2466  0014B0  103B               	iorwf	?___fltol+2,w,c
  2467  0014B2  103C               	iorwf	?___fltol+3,w,c
  2468  0014B4  A4D8               	btfss	status,2,c
  2469  0014B6  D057               	goto	l5469
  2470  0014B8  0100               	movlb	0	; () banked
  2471  0014BA  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2472  0014BC  D054               	goto	l5469
  2473  0014BE  0100               	movlb	0	; () banked
  2474  0014C0  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2475  0014C2  E105               	bnz	l5455
  2476  0014C4  0E02               	movlw	2
  2477  0014C6  0100               	movlb	0	; () banked
  2478  0014C8  5DD7               	subwf	sprintf@exp& (0+255),w,b
  2479  0014CA  A0D8               	btfss	status,0,c
  2480  0014CC  D04C               	goto	l5469
  2481  0014CE                     l5455:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2485  0014CE  C0CF  F039         	movff	sprintf@tmpval,___flge@ff1
  2486  0014D2  C0D0  F03A         	movff	sprintf@tmpval+1,___flge@ff1+1
  2487  0014D6  C0D1  F03B         	movff	sprintf@tmpval+2,___flge@ff1+2
  2488  0014DA  C0D2  F03C         	movff	sprintf@tmpval+3,___flge@ff1+3
  2489  0014DE  0E5F               	movlw	95
  2490  0014E0  6E3D               	movwf	___flge@ff2,c
  2491  0014E2  0E70               	movlw	112
  2492  0014E4  6E3E               	movwf	___flge@ff2+1,c
  2493  0014E6  0E89               	movlw	137
  2494  0014E8  6E3F               	movwf	___flge@ff2+2,c
  2495  0014EA  0E40               	movlw	64
  2496  0014EC  6E40               	movwf	___flge@ff2+3,c
  2497  0014EE  EC8E  F01B         	call	___flge	;wreg free
  2498  0014F2  B0D8               	btfsc	status,0,c
  2499  0014F4  D003               	goto	l5459
  2500                           
  2501                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2502  0014F6  0100               	movlb	0	; () banked
  2503  0014F8  0EF7               	movlw	247
  2504  0014FA  D002               	goto	L2
  2505  0014FC                     l5459:
  2506                           
  2507                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2508  0014FC  0100               	movlb	0	; () banked
  2509  0014FE  0EF8               	movlw	248
  2510  001500                     L2:
  2511  001500  27D7               	addwf	sprintf@exp& (0+255),f,b
  2512  001502  0EFF               	movlw	255
  2513  001504  23D8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2517                           
  2518                           ; BSR set to: 0
  2519  001506  0100               	movlb	0	; () banked
  2520  001508  51D7               	movf	sprintf@exp& (0+255),w,b
  2521  00150A  ECE4  F012         	call	_scale
  2522  00150E  C049  F0CF         	movff	?_scale,sprintf@tmpval
  2523  001512  C04A  F0D0         	movff	?_scale+1,sprintf@tmpval+1
  2524  001516  C04B  F0D1         	movff	?_scale+2,sprintf@tmpval+2
  2525  00151A  C04C  F0D2         	movff	?_scale+3,sprintf@tmpval+3
  2526  00151E  C0D9  F018         	movff	sprintf@fval,__div_to_l_@f1
  2527  001522  C0DA  F019         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2528  001526  C0DB  F01A         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2529  00152A  C0DC  F01B         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2530  00152E  C0CF  F01C         	movff	sprintf@tmpval,__div_to_l_@f2
  2531  001532  C0D0  F01D         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2532  001536  C0D1  F01E         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2533  00153A  C0D2  F01F         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2534  00153E  ECFA  F01A         	call	__div_to_l_	;wreg free
  2535  001542  C018  F0D3         	movff	?__div_to_l_,sprintf@val
  2536  001546  C019  F0D4         	movff	?__div_to_l_+1,sprintf@val+1
  2537  00154A  C01A  F0D5         	movff	?__div_to_l_+2,sprintf@val+2
  2538  00154E  C01B  F0D6         	movff	?__div_to_l_+3,sprintf@val+3
  2539                           
  2540                           ;doprnt.c: 1129: fval = 0.0;
  2541  001552  0E00               	movlw	0
  2542  001554  0100               	movlb	0	; () banked
  2543  001556  6FD9               	movwf	sprintf@fval& (0+255),b
  2544  001558  0E00               	movlw	0
  2545  00155A  6FDA               	movwf	(sprintf@fval+1)& (0+255),b
  2546  00155C  0E00               	movlw	0
  2547  00155E  6FDB               	movwf	(sprintf@fval+2)& (0+255),b
  2548  001560  0E00               	movlw	0
  2549  001562  6FDC               	movwf	(sprintf@fval+3)& (0+255),b
  2550                           
  2551                           ;doprnt.c: 1130: } else {
  2552  001564  D03C               	goto	l5473
  2553  001566                     l5469:
  2554                           
  2555                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2556  001566  C0D9  F039         	movff	sprintf@fval,___fltol@f1
  2557  00156A  C0DA  F03A         	movff	sprintf@fval+1,___fltol@f1+1
  2558  00156E  C0DB  F03B         	movff	sprintf@fval+2,___fltol@f1+2
  2559  001572  C0DC  F03C         	movff	sprintf@fval+3,___fltol@f1+3
  2560  001576  ECAD  F01C         	call	___fltol	;wreg free
  2561  00157A  C039  F0D3         	movff	?___fltol,sprintf@val
  2562  00157E  C03A  F0D4         	movff	?___fltol+1,sprintf@val+1
  2563  001582  C03B  F0D5         	movff	?___fltol+2,sprintf@val+2
  2564  001586  C03C  F0D6         	movff	?___fltol+3,sprintf@val+3
  2565                           
  2566                           ;doprnt.c: 1132: fval -= (double)val;
  2567  00158A  C0D9  F0AD         	movff	sprintf@fval,___flsub@b
  2568  00158E  C0DA  F0AE         	movff	sprintf@fval+1,___flsub@b+1
  2569  001592  C0DB  F0AF         	movff	sprintf@fval+2,___flsub@b+2
  2570  001596  C0DC  F0B0         	movff	sprintf@fval+3,___flsub@b+3
  2571  00159A  C0D3  F043         	movff	sprintf@val,___xxtofl@val
  2572  00159E  C0D4  F044         	movff	sprintf@val+1,___xxtofl@val+1
  2573  0015A2  C0D5  F045         	movff	sprintf@val+2,___xxtofl@val+2
  2574  0015A6  C0D6  F046         	movff	sprintf@val+3,___xxtofl@val+3
  2575  0015AA  0E00               	movlw	0
  2576  0015AC  ECB9  F019         	call	___xxtofl
  2577  0015B0  C043  F0B1         	movff	?___xxtofl,___flsub@a
  2578  0015B4  C044  F0B2         	movff	?___xxtofl+1,___flsub@a+1
  2579  0015B8  C045  F0B3         	movff	?___xxtofl+2,___flsub@a+2
  2580  0015BC  C046  F0B4         	movff	?___xxtofl+3,___flsub@a+3
  2581  0015C0  EC76  F020         	call	___flsub	;wreg free
  2582  0015C4  C0AD  F0D9         	movff	?___flsub,sprintf@fval
  2583  0015C8  C0AE  F0DA         	movff	?___flsub+1,sprintf@fval+1
  2584  0015CC  C0AF  F0DB         	movff	?___flsub+2,sprintf@fval+2
  2585  0015D0  C0B0  F0DC         	movff	?___flsub+3,sprintf@fval+3
  2586                           
  2587                           ;doprnt.c: 1133: exp = 0;
  2588  0015D4  0E00               	movlw	0
  2589  0015D6  0100               	movlb	0	; () banked
  2590  0015D8  6FD8               	movwf	(sprintf@exp+1)& (0+255),b
  2591  0015DA  0E00               	movlw	0
  2592  0015DC  6FD7               	movwf	sprintf@exp& (0+255),b
  2593  0015DE                     l5473:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 1134: }
  2597                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2598  0015DE  0E01               	movlw	1
  2599  0015E0  0100               	movlb	0	; () banked
  2600  0015E2  6FDF               	movwf	sprintf@c& (0+255),b
  2601  0015E4                     l5475:
  2602                           
  2603                           ; BSR set to: 0
  2604  0015E4  0E0A               	movlw	10
  2605  0015E6  0100               	movlb	0	; () banked
  2606  0015E8  19DF               	xorwf	sprintf@c& (0+255),w,b
  2607  0015EA  B4D8               	btfsc	status,2,c
  2608  0015EC  D01E               	goto	l5487
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;doprnt.c: 1137: if(val < dpowers[c])
  2612                           
  2613                           ; BSR set to: 0
  2614                           
  2615                           ; BSR set to: 0
  2616  0015EE  0100               	movlb	0	; () banked
  2617  0015F0  51DF               	movf	sprintf@c& (0+255),w,b
  2618  0015F2  0D04               	mullw	4
  2619  0015F4  0E69               	movlw	low _dpowers
  2620  0015F6  24F3               	addwf	prodl,w,c
  2621  0015F8  6EF6               	movwf	tblptrl,c
  2622  0015FA  0E10               	movlw	high _dpowers
  2623  0015FC  20F4               	addwfc	prodh,w,c
  2624  0015FE  6EF7               	movwf	tblptrh,c
  2625  001600                     	if	0	;There are less than 3 active tblptr bytes
  2626  001600                     	endif
  2627  001600  0009               	tblrd		*+
  2628  001602  50F5               	movf	tablat,w,c
  2629  001604  0100               	movlb	0	; () banked
  2630  001606  5DD3               	subwf	sprintf@val& (0+255),w,b
  2631  001608  0009               	tblrd		*+
  2632  00160A  50F5               	movf	tablat,w,c
  2633  00160C  0100               	movlb	0	; () banked
  2634  00160E  59D4               	subwfb	(sprintf@val+1)& (0+255),w,b
  2635  001610  0009               	tblrd		*+
  2636  001612  50F5               	movf	tablat,w,c
  2637  001614  0100               	movlb	0	; () banked
  2638  001616  59D5               	subwfb	(sprintf@val+2)& (0+255),w,b
  2639  001618  0009               	tblrd		*+
  2640  00161A  50F5               	movf	tablat,w,c
  2641  00161C  0100               	movlb	0	; () banked
  2642  00161E  59D6               	subwfb	(sprintf@val+3)& (0+255),w,b
  2643  001620  A0D8               	btfss	status,0,c
  2644  001622  D003               	goto	l5487
  2645                           
  2646                           ; BSR set to: 0
  2647                           
  2648                           ; BSR set to: 0
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;doprnt.c: 1138: break;
  2652  001624  0100               	movlb	0	; () banked
  2653  001626  2BDF               	incf	sprintf@c& (0+255),f,b
  2654  001628  D7DD               	goto	l5475
  2655  00162A                     l5487:
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;doprnt.c: 1142: width -= prec + c + exp;
  2659  00162A  C0DF  F0C1         	movff	sprintf@c,??_sprintf
  2660  00162E  0100               	movlb	0	; () banked
  2661  001630  6BC2               	clrf	(??_sprintf+1)& (0+255),b
  2662  001632  BFC1               	btfsc	??_sprintf& (0+255),7,b
  2663  001634  07C2               	decf	(??_sprintf+1)& (0+255),f,b
  2664  001636  0100               	movlb	0	; () banked
  2665  001638  51DD               	movf	sprintf@prec& (0+255),w,b
  2666  00163A  0100               	movlb	0	; () banked
  2667  00163C  27C1               	addwf	??_sprintf& (0+255),f,b
  2668  00163E  0100               	movlb	0	; () banked
  2669  001640  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  2670  001642  0100               	movlb	0	; () banked
  2671  001644  23C2               	addwfc	(??_sprintf+1)& (0+255),f,b
  2672  001646  0100               	movlb	0	; () banked
  2673  001648  51D7               	movf	sprintf@exp& (0+255),w,b
  2674  00164A  0100               	movlb	0	; () banked
  2675  00164C  27C1               	addwf	??_sprintf& (0+255),f,b
  2676  00164E  0100               	movlb	0	; () banked
  2677  001650  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2678  001652  0100               	movlb	0	; () banked
  2679  001654  23C2               	addwfc	(??_sprintf+1)& (0+255),f,b
  2680  001656  0100               	movlb	0	; () banked
  2681  001658  51C1               	movf	??_sprintf& (0+255),w,b
  2682  00165A  0100               	movlb	0	; () banked
  2683  00165C  5FCD               	subwf	sprintf@width& (0+255),f,b
  2684  00165E  0100               	movlb	0	; () banked
  2685  001660  51C2               	movf	(??_sprintf+1)& (0+255),w,b
  2686  001662  0100               	movlb	0	; () banked
  2687  001664  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  2688                           
  2689                           ;doprnt.c: 1143: if(
  2690                           ;doprnt.c: 1147: prec)
  2691  001666  0100               	movlb	0	; () banked
  2692  001668  51DD               	movf	sprintf@prec& (0+255),w,b
  2693  00166A  0100               	movlb	0	; () banked
  2694  00166C  11DE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2695  00166E  B4D8               	btfsc	status,2,c
  2696  001670  D004               	goto	l5491
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 1148: width--;
  2700  001672  0100               	movlb	0	; () banked
  2701  001674  07CD               	decf	sprintf@width& (0+255),f,b
  2702  001676  A0D8               	btfss	status,0,c
  2703  001678  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  2704  00167A                     l5491:
  2705                           
  2706                           ; BSR set to: 0
  2707                           ;doprnt.c: 1149: if(flag & 0x03)
  2708  00167A  0E03               	movlw	3
  2709  00167C  0100               	movlb	0	; () banked
  2710  00167E  15CB               	andwf	sprintf@flag& (0+255),w,b
  2711  001680  0100               	movlb	0	; () banked
  2712  001682  6FC1               	movwf	??_sprintf& (0+255),b
  2713  001684  0E00               	movlw	0
  2714  001686  0100               	movlb	0	; () banked
  2715  001688  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2716  00168A  0100               	movlb	0	; () banked
  2717  00168C  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  2718  00168E  0100               	movlb	0	; () banked
  2719  001690  51C1               	movf	??_sprintf& (0+255),w,b
  2720  001692  0100               	movlb	0	; () banked
  2721  001694  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  2722  001696  B4D8               	btfsc	status,2,c
  2723  001698  D00E               	goto	l5501
  2724  00169A  D009               	goto	l5499
  2725  00169C                     l5495:
  2726                           
  2727                           ; BSR set to: 0
  2728                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  2729  00169C  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2730  0016A0  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2731  0016A4  0E20               	movlw	32
  2732  0016A6  6EDF               	movwf	indf2,c
  2733                           
  2734                           ; BSR set to: 0
  2735  0016A8  0100               	movlb	0	; () banked
  2736  0016AA  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2737  0016AC  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2738  0016AE                     l5499:
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;doprnt.c: 1182: width--;
  2742  0016AE  0100               	movlb	0	; () banked
  2743  0016B0  07CD               	decf	sprintf@width& (0+255),f,b
  2744  0016B2  A0D8               	btfss	status,0,c
  2745  0016B4  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  2746  0016B6                     l5501:
  2747                           
  2748                           ; BSR set to: 0
  2749  0016B6  0100               	movlb	0	; () banked
  2750  0016B8  BFCE               	btfsc	(sprintf@width+1)& (0+255),7,b
  2751  0016BA  D007               	goto	l5503
  2752  0016BC  0100               	movlb	0	; () banked
  2753  0016BE  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  2754  0016C0  E1ED               	bnz	l5495
  2755  0016C2  0100               	movlb	0	; () banked
  2756  0016C4  05CD               	decf	sprintf@width& (0+255),w,b
  2757  0016C6  B0D8               	btfsc	status,0,c
  2758  0016C8  D7E9               	goto	l5495
  2759  0016CA                     l5503:
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;doprnt.c: 1183: }
  2763                           ;doprnt.c: 1188: if(flag & 0x03)
  2764  0016CA  0E03               	movlw	3
  2765  0016CC  0100               	movlb	0	; () banked
  2766  0016CE  15CB               	andwf	sprintf@flag& (0+255),w,b
  2767  0016D0  0100               	movlb	0	; () banked
  2768  0016D2  6FC1               	movwf	??_sprintf& (0+255),b
  2769  0016D4  0E00               	movlw	0
  2770  0016D6  0100               	movlb	0	; () banked
  2771  0016D8  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  2772  0016DA  0100               	movlb	0	; () banked
  2773  0016DC  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  2774  0016DE  0100               	movlb	0	; () banked
  2775  0016E0  51C1               	movf	??_sprintf& (0+255),w,b
  2776  0016E2  0100               	movlb	0	; () banked
  2777  0016E4  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  2778  0016E6  B4D8               	btfsc	status,2,c
  2779  0016E8  D054               	goto	l5517
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  2783  0016EA  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2784  0016EE  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2785  0016F2  0E2D               	movlw	45
  2786  0016F4  D04C               	goto	L3
  2787  0016F6                     l5507:
  2788                           
  2789                           ; BSR set to: 0
  2790  0016F6  0100               	movlb	0	; () banked
  2791  0016F8  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2792  0016FA  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;doprnt.c: 1195: }
  2796                           ;doprnt.c: 1196: while(c--) {
  2797  0016FC  D04A               	goto	l5517
  2798  0016FE                     l5509:
  2799                           
  2800                           ; BSR set to: 0
  2801                           ;doprnt.c: 1200: {
  2802                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2803  0016FE  C0D3  F018         	movff	sprintf@val,___lldiv@dividend
  2804  001702  C0D4  F019         	movff	sprintf@val+1,___lldiv@dividend+1
  2805  001706  C0D5  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
  2806  00170A  C0D6  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
  2807  00170E  0100               	movlb	0	; () banked
  2808  001710  51DF               	movf	sprintf@c& (0+255),w,b
  2809  001712  0D04               	mullw	4
  2810  001714  0E69               	movlw	low _dpowers
  2811  001716  24F3               	addwf	prodl,w,c
  2812  001718  6EF6               	movwf	tblptrl,c
  2813  00171A  0E10               	movlw	high _dpowers
  2814  00171C  20F4               	addwfc	prodh,w,c
  2815  00171E  6EF7               	movwf	tblptrh,c
  2816  001720                     	if	0	;There are less than 3 active tblptr bytes
  2817  001720                     	endif
  2818  001720  0009               	tblrd		*+
  2819  001722  CFF5 F01C          	movff	tablat,___lldiv@divisor
  2820  001726  0009               	tblrd		*+
  2821  001728  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
  2822  00172C  0009               	tblrd		*+
  2823  00172E  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
  2824  001732  000A               	tblrd		*-
  2825  001734  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
  2826  001738  EC5A  F01E         	call	___lldiv	;wreg free
  2827  00173C  C018  F0CF         	movff	?___lldiv,sprintf@tmpval
  2828  001740  C019  F0D0         	movff	?___lldiv+1,sprintf@tmpval+1
  2829  001744  C01A  F0D1         	movff	?___lldiv+2,sprintf@tmpval+2
  2830  001748  C01B  F0D2         	movff	?___lldiv+3,sprintf@tmpval+3
  2831                           
  2832                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2833  00174C  C0CF  F025         	movff	sprintf@tmpval,___llmod@dividend
  2834  001750  C0D0  F026         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2835  001754  C0D1  F027         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2836  001758  C0D2  F028         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2837  00175C  0E0A               	movlw	10
  2838  00175E  6E29               	movwf	___llmod@divisor,c
  2839  001760  0E00               	movlw	0
  2840  001762  6E2A               	movwf	___llmod@divisor+1,c
  2841  001764  0E00               	movlw	0
  2842  001766  6E2B               	movwf	___llmod@divisor+2,c
  2843  001768  0E00               	movlw	0
  2844  00176A  6E2C               	movwf	___llmod@divisor+3,c
  2845  00176C  EC87  F01F         	call	___llmod	;wreg free
  2846  001770  C025  F0CF         	movff	?___llmod,sprintf@tmpval
  2847  001774  C026  F0D0         	movff	?___llmod+1,sprintf@tmpval+1
  2848  001778  C027  F0D1         	movff	?___llmod+2,sprintf@tmpval+2
  2849  00177C  C028  F0D2         	movff	?___llmod+3,sprintf@tmpval+3
  2850                           
  2851                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  2852  001780  0100               	movlb	0	; () banked
  2853  001782  51CF               	movf	sprintf@tmpval& (0+255),w,b
  2854  001784  0F30               	addlw	48
  2855  001786  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2856  00178A  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2857  00178E                     L3:
  2858  00178E  6EDF               	movwf	indf2,c
  2859  001790  D7B2               	goto	l5507
  2860  001792                     l5517:
  2861                           
  2862                           ; BSR set to: 0
  2863  001792  0100               	movlb	0	; () banked
  2864  001794  07DF               	decf	sprintf@c& (0+255),f,b
  2865  001796  0100               	movlb	0	; () banked
  2866  001798  29DF               	incf	sprintf@c& (0+255),w,b
  2867  00179A  B4D8               	btfsc	status,2,c
  2868  00179C  D00E               	goto	l5525
  2869  00179E  D7AF               	goto	l5509
  2870  0017A0                     l5519:
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  2874  0017A0  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2875  0017A4  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2876  0017A8  0E30               	movlw	48
  2877  0017AA  6EDF               	movwf	indf2,c
  2878                           
  2879                           ; BSR set to: 0
  2880  0017AC  0100               	movlb	0	; () banked
  2881  0017AE  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2882  0017B0  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;doprnt.c: 1209: exp--;
  2886  0017B2  0100               	movlb	0	; () banked
  2887  0017B4  07D7               	decf	sprintf@exp& (0+255),f,b
  2888  0017B6  A0D8               	btfss	status,0,c
  2889  0017B8  07D8               	decf	(sprintf@exp+1)& (0+255),f,b
  2890  0017BA                     l5525:
  2891                           
  2892                           ; BSR set to: 0
  2893  0017BA  0100               	movlb	0	; () banked
  2894  0017BC  BFD8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2895  0017BE  D007               	goto	l5527
  2896  0017C0  0100               	movlb	0	; () banked
  2897  0017C2  51D8               	movf	(sprintf@exp+1)& (0+255),w,b
  2898  0017C4  E1ED               	bnz	l5519
  2899  0017C6  0100               	movlb	0	; () banked
  2900  0017C8  05D7               	decf	sprintf@exp& (0+255),w,b
  2901  0017CA  B0D8               	btfsc	status,0,c
  2902  0017CC  D7E9               	goto	l5519
  2903  0017CE                     l5527:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 1210: }
  2907                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2908  0017CE  0100               	movlb	0	; () banked
  2909  0017D0  BFDE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2910  0017D2  D00C               	goto	l456
  2911  0017D4  0100               	movlb	0	; () banked
  2912  0017D6  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  2913  0017D8  E105               	bnz	u6420
  2914  0017DA  0E09               	movlw	9
  2915  0017DC  0100               	movlb	0	; () banked
  2916  0017DE  5DDD               	subwf	sprintf@prec& (0+255),w,b
  2917  0017E0  A0D8               	btfss	status,0,c
  2918  0017E2  D004               	goto	l456
  2919  0017E4                     u6420:
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2923  0017E4  0E08               	movlw	8
  2924  0017E6  0100               	movlb	0	; () banked
  2925  0017E8  6FDF               	movwf	sprintf@c& (0+255),b
  2926  0017EA  D002               	goto	l5531
  2927  0017EC                     l456:
  2928                           
  2929                           ; BSR set to: 0
  2930                           ;doprnt.c: 1213: else
  2931                           ;doprnt.c: 1214: c = prec;
  2932  0017EC  C0DD  F0DF         	movff	sprintf@prec,sprintf@c
  2933  0017F0                     l5531:
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;doprnt.c: 1215: prec -= c;
  2937  0017F0  0100               	movlb	0	; () banked
  2938  0017F2  51DF               	movf	sprintf@c& (0+255),w,b
  2939  0017F4  0100               	movlb	0	; () banked
  2940  0017F6  5FDD               	subwf	sprintf@prec& (0+255),f,b
  2941  0017F8  0E00               	movlw	0
  2942  0017FA  0100               	movlb	0	; () banked
  2943  0017FC  BFDF               	btfsc	sprintf@c& (0+255),7,b
  2944  0017FE  0EFF               	movlw	255
  2945  001800  0100               	movlb	0	; () banked
  2946  001802  5BDE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2947                           
  2948                           ; BSR set to: 0
  2949                           ;doprnt.c: 1219: if(c)
  2950  001804  0100               	movlb	0	; () banked
  2951  001806  51DF               	movf	sprintf@c& (0+255),w,b
  2952  001808  0100               	movlb	0	; () banked
  2953  00180A  B4D8               	btfsc	status,2,c
  2954  00180C  D009               	goto	l5539
  2955                           
  2956                           ; BSR set to: 0
  2957                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2958  00180E  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  2959  001812  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  2960  001816  0E2E               	movlw	46
  2961  001818  6EDF               	movwf	indf2,c
  2962                           
  2963                           ; BSR set to: 0
  2964  00181A  0100               	movlb	0	; () banked
  2965  00181C  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  2966  00181E  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  2967  001820                     l5539:
  2968                           
  2969                           ; BSR set to: 0
  2970                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2971  001820  0100               	movlb	0	; () banked
  2972  001822  51DF               	movf	sprintf@c& (0+255),w,b
  2973  001824  ECE4  F012         	call	_scale
  2974  001828  C049  F0C5         	movff	?_scale,_sprintf$2071
  2975  00182C  C04A  F0C6         	movff	?_scale+1,_sprintf$2071+1
  2976  001830  C04B  F0C7         	movff	?_scale+2,_sprintf$2071+2
  2977  001834  C04C  F0C8         	movff	?_scale+3,_sprintf$2071+3
  2978                           
  2979                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2980  001838  C0D9  F024         	movff	sprintf@fval,___flmul@a
  2981  00183C  C0DA  F025         	movff	sprintf@fval+1,___flmul@a+1
  2982  001840  C0DB  F026         	movff	sprintf@fval+2,___flmul@a+2
  2983  001844  C0DC  F027         	movff	sprintf@fval+3,___flmul@a+3
  2984  001848  C0C5  F020         	movff	_sprintf$2071,___flmul@b
  2985  00184C  C0C6  F021         	movff	_sprintf$2071+1,___flmul@b+1
  2986  001850  C0C7  F022         	movff	_sprintf$2071+2,___flmul@b+2
  2987  001854  C0C8  F023         	movff	_sprintf$2071+3,___flmul@b+3
  2988  001858  ECD0  F016         	call	___flmul	;wreg free
  2989  00185C  C020  F039         	movff	?___flmul,___fltol@f1
  2990  001860  C021  F03A         	movff	?___flmul+1,___fltol@f1+1
  2991  001864  C022  F03B         	movff	?___flmul+2,___fltol@f1+2
  2992  001868  C023  F03C         	movff	?___flmul+3,___fltol@f1+3
  2993  00186C  ECAD  F01C         	call	___fltol	;wreg free
  2994  001870  C039  F0D3         	movff	?___fltol,sprintf@val
  2995  001874  C03A  F0D4         	movff	?___fltol+1,sprintf@val+1
  2996  001878  C03B  F0D5         	movff	?___fltol+2,sprintf@val+2
  2997  00187C  C03C  F0D6         	movff	?___fltol+3,sprintf@val+3
  2998                           
  2999                           ;doprnt.c: 1228: while(c--) {
  3000  001880  D073               	goto	l5553
  3001  001882                     l5543:
  3002                           
  3003                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3004  001882  C0D3  F018         	movff	sprintf@val,___lldiv@dividend
  3005  001886  C0D4  F019         	movff	sprintf@val+1,___lldiv@dividend+1
  3006  00188A  C0D5  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
  3007  00188E  C0D6  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
  3008  001892  0100               	movlb	0	; () banked
  3009  001894  51DF               	movf	sprintf@c& (0+255),w,b
  3010  001896  0D04               	mullw	4
  3011  001898  0E69               	movlw	low _dpowers
  3012  00189A  24F3               	addwf	prodl,w,c
  3013  00189C  6EF6               	movwf	tblptrl,c
  3014  00189E  0E10               	movlw	high _dpowers
  3015  0018A0  20F4               	addwfc	prodh,w,c
  3016  0018A2  6EF7               	movwf	tblptrh,c
  3017  0018A4                     	if	0	;There are less than 3 active tblptr bytes
  3018  0018A4                     	endif
  3019  0018A4  0009               	tblrd		*+
  3020  0018A6  CFF5 F01C          	movff	tablat,___lldiv@divisor
  3021  0018AA  0009               	tblrd		*+
  3022  0018AC  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
  3023  0018B0  0009               	tblrd		*+
  3024  0018B2  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
  3025  0018B6  000A               	tblrd		*-
  3026  0018B8  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
  3027  0018BC  EC5A  F01E         	call	___lldiv	;wreg free
  3028  0018C0  C018  F0CF         	movff	?___lldiv,sprintf@tmpval
  3029  0018C4  C019  F0D0         	movff	?___lldiv+1,sprintf@tmpval+1
  3030  0018C8  C01A  F0D1         	movff	?___lldiv+2,sprintf@tmpval+2
  3031  0018CC  C01B  F0D2         	movff	?___lldiv+3,sprintf@tmpval+3
  3032                           
  3033                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3034  0018D0  C0CF  F025         	movff	sprintf@tmpval,___llmod@dividend
  3035  0018D4  C0D0  F026         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3036  0018D8  C0D1  F027         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3037  0018DC  C0D2  F028         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3038  0018E0  0E0A               	movlw	10
  3039  0018E2  6E29               	movwf	___llmod@divisor,c
  3040  0018E4  0E00               	movlw	0
  3041  0018E6  6E2A               	movwf	___llmod@divisor+1,c
  3042  0018E8  0E00               	movlw	0
  3043  0018EA  6E2B               	movwf	___llmod@divisor+2,c
  3044  0018EC  0E00               	movlw	0
  3045  0018EE  6E2C               	movwf	___llmod@divisor+3,c
  3046  0018F0  EC87  F01F         	call	___llmod	;wreg free
  3047  0018F4  C025  F0CF         	movff	?___llmod,sprintf@tmpval
  3048  0018F8  C026  F0D0         	movff	?___llmod+1,sprintf@tmpval+1
  3049  0018FC  C027  F0D1         	movff	?___llmod+2,sprintf@tmpval+2
  3050  001900  C028  F0D2         	movff	?___llmod+3,sprintf@tmpval+3
  3051                           
  3052                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3053  001904  0100               	movlb	0	; () banked
  3054  001906  51CF               	movf	sprintf@tmpval& (0+255),w,b
  3055  001908  0F30               	addlw	48
  3056  00190A  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3057  00190E  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3058  001912  6EDF               	movwf	indf2,c
  3059                           
  3060                           ; BSR set to: 0
  3061  001914  0100               	movlb	0	; () banked
  3062  001916  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3063  001918  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3064                           
  3065                           ; BSR set to: 0
  3066                           ;doprnt.c: 1232: val %= dpowers[c];
  3067  00191A  C0D3  F025         	movff	sprintf@val,___llmod@dividend
  3068  00191E  C0D4  F026         	movff	sprintf@val+1,___llmod@dividend+1
  3069  001922  C0D5  F027         	movff	sprintf@val+2,___llmod@dividend+2
  3070  001926  C0D6  F028         	movff	sprintf@val+3,___llmod@dividend+3
  3071  00192A  0100               	movlb	0	; () banked
  3072  00192C  51DF               	movf	sprintf@c& (0+255),w,b
  3073  00192E  0D04               	mullw	4
  3074  001930  0E69               	movlw	low _dpowers
  3075  001932  24F3               	addwf	prodl,w,c
  3076  001934  6EF6               	movwf	tblptrl,c
  3077  001936  0E10               	movlw	high _dpowers
  3078  001938  20F4               	addwfc	prodh,w,c
  3079  00193A  6EF7               	movwf	tblptrh,c
  3080  00193C                     	if	0	;There are less than 3 active tblptr bytes
  3081  00193C                     	endif
  3082  00193C  0009               	tblrd		*+
  3083  00193E  CFF5 F029          	movff	tablat,___llmod@divisor
  3084  001942  0009               	tblrd		*+
  3085  001944  CFF5 F02A          	movff	tablat,___llmod@divisor+1
  3086  001948  0009               	tblrd		*+
  3087  00194A  CFF5 F02B          	movff	tablat,___llmod@divisor+2
  3088  00194E  000A               	tblrd		*-
  3089  001950  CFF5 F02C          	movff	tablat,___llmod@divisor+3
  3090  001954  EC87  F01F         	call	___llmod	;wreg free
  3091  001958  C025  F0D3         	movff	?___llmod,sprintf@val
  3092  00195C  C026  F0D4         	movff	?___llmod+1,sprintf@val+1
  3093  001960  C027  F0D5         	movff	?___llmod+2,sprintf@val+2
  3094  001964  C028  F0D6         	movff	?___llmod+3,sprintf@val+3
  3095  001968                     l5553:
  3096  001968  0100               	movlb	0	; () banked
  3097  00196A  07DF               	decf	sprintf@c& (0+255),f,b
  3098  00196C  0100               	movlb	0	; () banked
  3099  00196E  29DF               	incf	sprintf@c& (0+255),w,b
  3100  001970  B4D8               	btfsc	status,2,c
  3101  001972  D00E               	goto	l5561
  3102  001974  D786               	goto	l5543
  3103  001976                     l5555:
  3104                           
  3105                           ; BSR set to: 0
  3106                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3107  001976  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3108  00197A  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3109  00197E  0E30               	movlw	48
  3110  001980  6EDF               	movwf	indf2,c
  3111                           
  3112                           ; BSR set to: 0
  3113  001982  0100               	movlb	0	; () banked
  3114  001984  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3115  001986  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;doprnt.c: 1237: prec--;
  3119  001988  0100               	movlb	0	; () banked
  3120  00198A  07DD               	decf	sprintf@prec& (0+255),f,b
  3121  00198C  A0D8               	btfss	status,0,c
  3122  00198E  07DE               	decf	(sprintf@prec+1)& (0+255),f,b
  3123  001990                     l5561:
  3124                           
  3125                           ; BSR set to: 0
  3126  001990  0100               	movlb	0	; () banked
  3127  001992  51DD               	movf	sprintf@prec& (0+255),w,b
  3128  001994  0100               	movlb	0	; () banked
  3129  001996  11DE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3130  001998  B4D8               	btfsc	status,2,c
  3131  00199A  D167               	goto	l5643
  3132  00199C  D7EC               	goto	l5555
  3133  00199E                     l5563:
  3134                           
  3135                           ; BSR set to: 0
  3136                           ;doprnt.c: 1246: }
  3137                           ;doprnt.c: 1253: {
  3138                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3139  00199E  C0C9  FFD9         	movff	sprintf@ap,fsr2l
  3140  0019A2  C0CA  FFDA         	movff	sprintf@ap+1,fsr2h
  3141  0019A6  CFDE F0D3          	movff	postinc2,sprintf@val
  3142  0019AA  CFDD F0D4          	movff	postdec2,sprintf@val+1
  3143  0019AE  0100               	movlb	0	; () banked
  3144  0019B0  0E00               	movlw	0
  3145  0019B2  BFD4               	btfsc	(sprintf@val+1)& (0+255),7,b
  3146  0019B4  0EFF               	movlw	-1
  3147  0019B6  6FD5               	movwf	(sprintf@val+2)& (0+255),b
  3148  0019B8  6FD6               	movwf	(sprintf@val+3)& (0+255),b
  3149                           
  3150                           ; BSR set to: 0
  3151  0019BA  0E02               	movlw	2
  3152  0019BC  0100               	movlb	0	; () banked
  3153  0019BE  27C9               	addwf	sprintf@ap& (0+255),f,b
  3154  0019C0  0E00               	movlw	0
  3155  0019C2  23CA               	addwfc	(sprintf@ap+1)& (0+255),f,b
  3156                           
  3157                           ; BSR set to: 0
  3158                           ;doprnt.c: 1261: if((long)val < 0) {
  3159  0019C4  0100               	movlb	0	; () banked
  3160  0019C6  AFD6               	btfss	(sprintf@val+3)& (0+255),7,b
  3161  0019C8  D00C               	goto	l5573
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;doprnt.c: 1262: flag |= 0x03;
  3165  0019CA  0E03               	movlw	3
  3166  0019CC  0100               	movlb	0	; () banked
  3167  0019CE  13CB               	iorwf	sprintf@flag& (0+255),f,b
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;doprnt.c: 1263: val = -val;
  3171  0019D0  0100               	movlb	0	; () banked
  3172  0019D2  1FD6               	comf	(sprintf@val+3)& (0+255),f,b
  3173  0019D4  1FD5               	comf	(sprintf@val+2)& (0+255),f,b
  3174  0019D6  1FD4               	comf	(sprintf@val+1)& (0+255),f,b
  3175  0019D8  6DD3               	negf	sprintf@val& (0+255),b
  3176  0019DA  0E00               	movlw	0
  3177  0019DC  23D4               	addwfc	(sprintf@val+1)& (0+255),f,b
  3178  0019DE  23D5               	addwfc	(sprintf@val+2)& (0+255),f,b
  3179  0019E0  23D6               	addwfc	(sprintf@val+3)& (0+255),f,b
  3180  0019E2                     l5573:
  3181                           
  3182                           ; BSR set to: 0
  3183                           ;doprnt.c: 1264: }
  3184                           ;doprnt.c: 1266: }
  3185                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3186  0019E2  0100               	movlb	0	; () banked
  3187  0019E4  51DD               	movf	sprintf@prec& (0+255),w,b
  3188  0019E6  0100               	movlb	0	; () banked
  3189  0019E8  11DE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3190  0019EA  A4D8               	btfss	status,2,c
  3191  0019EC  D00D               	goto	l5579
  3192                           
  3193                           ; BSR set to: 0
  3194  0019EE  0100               	movlb	0	; () banked
  3195  0019F0  51D3               	movf	sprintf@val& (0+255),w,b
  3196  0019F2  0100               	movlb	0	; () banked
  3197  0019F4  11D4               	iorwf	(sprintf@val+1)& (0+255),w,b
  3198  0019F6  0100               	movlb	0	; () banked
  3199  0019F8  11D5               	iorwf	(sprintf@val+2)& (0+255),w,b
  3200  0019FA  0100               	movlb	0	; () banked
  3201  0019FC  11D6               	iorwf	(sprintf@val+3)& (0+255),w,b
  3202  0019FE  A4D8               	btfss	status,2,c
  3203  001A00  D003               	goto	l5579
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;doprnt.c: 1291: prec++;
  3207  001A02  0100               	movlb	0	; () banked
  3208  001A04  4BDD               	infsnz	sprintf@prec& (0+255),f,b
  3209  001A06  2BDE               	incf	(sprintf@prec+1)& (0+255),f,b
  3210  001A08                     l5579:
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3214  001A08  0E01               	movlw	1
  3215  001A0A  0100               	movlb	0	; () banked
  3216  001A0C  6FDF               	movwf	sprintf@c& (0+255),b
  3217  001A0E                     l5581:
  3218                           
  3219                           ; BSR set to: 0
  3220  001A0E  0E0A               	movlw	10
  3221  001A10  0100               	movlb	0	; () banked
  3222  001A12  19DF               	xorwf	sprintf@c& (0+255),w,b
  3223  001A14  B4D8               	btfsc	status,2,c
  3224  001A16  D01E               	goto	l5593
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;doprnt.c: 1306: if(val < dpowers[c])
  3228                           
  3229                           ; BSR set to: 0
  3230                           
  3231                           ; BSR set to: 0
  3232  001A18  0100               	movlb	0	; () banked
  3233  001A1A  51DF               	movf	sprintf@c& (0+255),w,b
  3234  001A1C  0D04               	mullw	4
  3235  001A1E  0E69               	movlw	low _dpowers
  3236  001A20  24F3               	addwf	prodl,w,c
  3237  001A22  6EF6               	movwf	tblptrl,c
  3238  001A24  0E10               	movlw	high _dpowers
  3239  001A26  20F4               	addwfc	prodh,w,c
  3240  001A28  6EF7               	movwf	tblptrh,c
  3241  001A2A                     	if	0	;There are less than 3 active tblptr bytes
  3242  001A2A                     	endif
  3243  001A2A  0009               	tblrd		*+
  3244  001A2C  50F5               	movf	tablat,w,c
  3245  001A2E  0100               	movlb	0	; () banked
  3246  001A30  5DD3               	subwf	sprintf@val& (0+255),w,b
  3247  001A32  0009               	tblrd		*+
  3248  001A34  50F5               	movf	tablat,w,c
  3249  001A36  0100               	movlb	0	; () banked
  3250  001A38  59D4               	subwfb	(sprintf@val+1)& (0+255),w,b
  3251  001A3A  0009               	tblrd		*+
  3252  001A3C  50F5               	movf	tablat,w,c
  3253  001A3E  0100               	movlb	0	; () banked
  3254  001A40  59D5               	subwfb	(sprintf@val+2)& (0+255),w,b
  3255  001A42  0009               	tblrd		*+
  3256  001A44  50F5               	movf	tablat,w,c
  3257  001A46  0100               	movlb	0	; () banked
  3258  001A48  59D6               	subwfb	(sprintf@val+3)& (0+255),w,b
  3259  001A4A  A0D8               	btfss	status,0,c
  3260  001A4C  D003               	goto	l5593
  3261                           
  3262                           ; BSR set to: 0
  3263                           
  3264                           ; BSR set to: 0
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;doprnt.c: 1307: break;
  3268  001A4E  0100               	movlb	0	; () banked
  3269  001A50  2BDF               	incf	sprintf@c& (0+255),f,b
  3270  001A52  D7DD               	goto	l5581
  3271  001A54                     l5593:
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;doprnt.c: 1339: if(c < prec)
  3275  001A54  0E80               	movlw	128
  3276  001A56  0100               	movlb	0	; () banked
  3277  001A58  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3278  001A5A  0E7F               	movlw	127
  3279  001A5C  0100               	movlb	0	; () banked
  3280  001A5E  6FC1               	movwf	??_sprintf& (0+255),b
  3281  001A60  0100               	movlb	0	; () banked
  3282  001A62  51DD               	movf	sprintf@prec& (0+255),w,b
  3283  001A64  0100               	movlb	0	; () banked
  3284  001A66  5DDF               	subwf	sprintf@c& (0+255),w,b
  3285  001A68  0100               	movlb	0	; () banked
  3286  001A6A  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3287  001A6C  0A80               	xorlw	128
  3288  001A6E  0100               	movlb	0	; () banked
  3289  001A70  59C1               	subwfb	??_sprintf& (0+255),w,b
  3290  001A72  B0D8               	btfsc	status,0,c
  3291  001A74  D003               	goto	l5597
  3292                           
  3293                           ; BSR set to: 0
  3294                           ;doprnt.c: 1340: c = prec;
  3295  001A76  C0DD  F0DF         	movff	sprintf@prec,sprintf@c
  3296  001A7A  D018               	goto	l5601
  3297  001A7C                     l5597:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;doprnt.c: 1341: else if(prec < c)
  3301  001A7C  0100               	movlb	0	; () banked
  3302  001A7E  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3303  001A80  0A80               	xorlw	128
  3304  001A82  0100               	movlb	0	; () banked
  3305  001A84  6FC1               	movwf	??_sprintf& (0+255),b
  3306  001A86  0100               	movlb	0	; () banked
  3307  001A88  51DF               	movf	sprintf@c& (0+255),w,b
  3308  001A8A  0100               	movlb	0	; () banked
  3309  001A8C  5DDD               	subwf	sprintf@prec& (0+255),w,b
  3310  001A8E  0E80               	movlw	128
  3311  001A90  0100               	movlb	0	; () banked
  3312  001A92  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3313  001A94  0E7F               	movlw	127
  3314  001A96  0100               	movlb	0	; () banked
  3315  001A98  59C1               	subwfb	??_sprintf& (0+255),w,b
  3316  001A9A  B0D8               	btfsc	status,0,c
  3317  001A9C  D007               	goto	l5601
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;doprnt.c: 1342: prec = c;
  3321  001A9E  0100               	movlb	0	; () banked
  3322  001AA0  51DF               	movf	sprintf@c& (0+255),w,b
  3323  001AA2  0100               	movlb	0	; () banked
  3324  001AA4  6FDD               	movwf	sprintf@prec& (0+255),b
  3325  001AA6  6BDE               	clrf	(sprintf@prec+1)& (0+255),b
  3326  001AA8  BFDD               	btfsc	sprintf@prec& (0+255),7,b
  3327  001AAA  07DE               	decf	(sprintf@prec+1)& (0+255),f,b
  3328  001AAC                     l5601:
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3332  001AAC  0100               	movlb	0	; () banked
  3333  001AAE  51CD               	movf	sprintf@width& (0+255),w,b
  3334  001AB0  0100               	movlb	0	; () banked
  3335  001AB2  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3336  001AB4  B4D8               	btfsc	status,2,c
  3337  001AB6  D014               	goto	l5607
  3338                           
  3339                           ; BSR set to: 0
  3340  001AB8  0E03               	movlw	3
  3341  001ABA  0100               	movlb	0	; () banked
  3342  001ABC  15CB               	andwf	sprintf@flag& (0+255),w,b
  3343  001ABE  0100               	movlb	0	; () banked
  3344  001AC0  6FC1               	movwf	??_sprintf& (0+255),b
  3345  001AC2  0E00               	movlw	0
  3346  001AC4  0100               	movlb	0	; () banked
  3347  001AC6  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3348  001AC8  0100               	movlb	0	; () banked
  3349  001ACA  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  3350  001ACC  0100               	movlb	0	; () banked
  3351  001ACE  51C1               	movf	??_sprintf& (0+255),w,b
  3352  001AD0  0100               	movlb	0	; () banked
  3353  001AD2  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3354  001AD4  B4D8               	btfsc	status,2,c
  3355  001AD6  D004               	goto	l5607
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;doprnt.c: 1346: width--;
  3359  001AD8  0100               	movlb	0	; () banked
  3360  001ADA  07CD               	decf	sprintf@width& (0+255),f,b
  3361  001ADC  A0D8               	btfss	status,0,c
  3362  001ADE  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  3363  001AE0                     l5607:
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3367  001AE0  0100               	movlb	0	; () banked
  3368  001AE2  ADCC               	btfss	(sprintf@flag+1)& (0+255),6,b
  3369  001AE4  D01E               	goto	l5615
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;doprnt.c: 1349: if(width > prec)
  3373  001AE6  0100               	movlb	0	; () banked
  3374  001AE8  51CD               	movf	sprintf@width& (0+255),w,b
  3375  001AEA  0100               	movlb	0	; () banked
  3376  001AEC  5DDD               	subwf	sprintf@prec& (0+255),w,b
  3377  001AEE  0100               	movlb	0	; () banked
  3378  001AF0  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3379  001AF2  0A80               	xorlw	128
  3380  001AF4  0100               	movlb	0	; () banked
  3381  001AF6  6FC1               	movwf	??_sprintf& (0+255),b
  3382  001AF8  0100               	movlb	0	; () banked
  3383  001AFA  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  3384  001AFC  0A80               	xorlw	128
  3385  001AFE  0100               	movlb	0	; () banked
  3386  001B00  59C1               	subwfb	??_sprintf& (0+255),w,b
  3387  001B02  B0D8               	btfsc	status,0,c
  3388  001B04  D009               	goto	l5613
  3389                           
  3390                           ; BSR set to: 0
  3391                           ;doprnt.c: 1350: width -= prec;
  3392  001B06  0100               	movlb	0	; () banked
  3393  001B08  51DD               	movf	sprintf@prec& (0+255),w,b
  3394  001B0A  0100               	movlb	0	; () banked
  3395  001B0C  5FCD               	subwf	sprintf@width& (0+255),f,b
  3396  001B0E  0100               	movlb	0	; () banked
  3397  001B10  51DE               	movf	(sprintf@prec+1)& (0+255),w,b
  3398  001B12  0100               	movlb	0	; () banked
  3399  001B14  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3400  001B16  D005               	goto	l5615
  3401  001B18                     l5613:
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;doprnt.c: 1351: else
  3405                           ;doprnt.c: 1352: width = 0;
  3406  001B18  0E00               	movlw	0
  3407  001B1A  0100               	movlb	0	; () banked
  3408  001B1C  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3409  001B1E  0E00               	movlw	0
  3410  001B20  6FCD               	movwf	sprintf@width& (0+255),b
  3411  001B22                     l5615:
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;doprnt.c: 1353: }
  3415                           ;doprnt.c: 1381: if(width > c)
  3416  001B22  0E80               	movlw	128
  3417  001B24  0100               	movlb	0	; () banked
  3418  001B26  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3419  001B28  0E7F               	movlw	127
  3420  001B2A  0100               	movlb	0	; () banked
  3421  001B2C  6FC1               	movwf	??_sprintf& (0+255),b
  3422  001B2E  0100               	movlb	0	; () banked
  3423  001B30  51CD               	movf	sprintf@width& (0+255),w,b
  3424  001B32  0100               	movlb	0	; () banked
  3425  001B34  5DDF               	subwf	sprintf@c& (0+255),w,b
  3426  001B36  0100               	movlb	0	; () banked
  3427  001B38  51CE               	movf	(sprintf@width+1)& (0+255),w,b
  3428  001B3A  0A80               	xorlw	128
  3429  001B3C  0100               	movlb	0	; () banked
  3430  001B3E  59C1               	subwfb	??_sprintf& (0+255),w,b
  3431  001B40  B0D8               	btfsc	status,0,c
  3432  001B42  D00B               	goto	l5619
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;doprnt.c: 1382: width -= c;
  3436  001B44  0100               	movlb	0	; () banked
  3437  001B46  51DF               	movf	sprintf@c& (0+255),w,b
  3438  001B48  0100               	movlb	0	; () banked
  3439  001B4A  5FCD               	subwf	sprintf@width& (0+255),f,b
  3440  001B4C  0E00               	movlw	0
  3441  001B4E  0100               	movlb	0	; () banked
  3442  001B50  BFDF               	btfsc	sprintf@c& (0+255),7,b
  3443  001B52  0EFF               	movlw	255
  3444  001B54  0100               	movlb	0	; () banked
  3445  001B56  5BCE               	subwfb	(sprintf@width+1)& (0+255),f,b
  3446  001B58  D005               	goto	l5621
  3447  001B5A                     l5619:
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;doprnt.c: 1383: else
  3451                           ;doprnt.c: 1384: width = 0;
  3452  001B5A  0E00               	movlw	0
  3453  001B5C  0100               	movlb	0	; () banked
  3454  001B5E  6FCE               	movwf	(sprintf@width+1)& (0+255),b
  3455  001B60  0E00               	movlw	0
  3456  001B62  6FCD               	movwf	sprintf@width& (0+255),b
  3457  001B64                     l5621:
  3458                           
  3459                           ; BSR set to: 0
  3460                           ;doprnt.c: 1422: {
  3461                           ;doprnt.c: 1424: if(width
  3462                           ;doprnt.c: 1428: )
  3463  001B64  0100               	movlb	0	; () banked
  3464  001B66  51CD               	movf	sprintf@width& (0+255),w,b
  3465  001B68  0100               	movlb	0	; () banked
  3466  001B6A  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3467  001B6C  B4D8               	btfsc	status,2,c
  3468  001B6E  D013               	goto	l5629
  3469  001B70                     l5623:
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3473  001B70  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3474  001B74  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3475  001B78  0E20               	movlw	32
  3476  001B7A  6EDF               	movwf	indf2,c
  3477                           
  3478                           ; BSR set to: 0
  3479  001B7C  0100               	movlb	0	; () banked
  3480  001B7E  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3481  001B80  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3482                           
  3483                           ; BSR set to: 0
  3484                           ;doprnt.c: 1431: while(--width);
  3485  001B82  0100               	movlb	0	; () banked
  3486  001B84  07CD               	decf	sprintf@width& (0+255),f,b
  3487  001B86  A0D8               	btfss	status,0,c
  3488  001B88  07CE               	decf	(sprintf@width+1)& (0+255),f,b
  3489  001B8A  0100               	movlb	0	; () banked
  3490  001B8C  51CD               	movf	sprintf@width& (0+255),w,b
  3491  001B8E  0100               	movlb	0	; () banked
  3492  001B90  11CE               	iorwf	(sprintf@width+1)& (0+255),w,b
  3493  001B92  A4D8               	btfss	status,2,c
  3494  001B94  D7ED               	goto	l5623
  3495  001B96                     l5629:
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;doprnt.c: 1438: if(flag & 0x03)
  3499  001B96  0E03               	movlw	3
  3500  001B98  0100               	movlb	0	; () banked
  3501  001B9A  15CB               	andwf	sprintf@flag& (0+255),w,b
  3502  001B9C  0100               	movlb	0	; () banked
  3503  001B9E  6FC1               	movwf	??_sprintf& (0+255),b
  3504  001BA0  0E00               	movlw	0
  3505  001BA2  0100               	movlb	0	; () banked
  3506  001BA4  15CC               	andwf	(sprintf@flag+1)& (0+255),w,b
  3507  001BA6  0100               	movlb	0	; () banked
  3508  001BA8  6FC2               	movwf	(??_sprintf+1)& (0+255),b
  3509  001BAA  0100               	movlb	0	; () banked
  3510  001BAC  51C1               	movf	??_sprintf& (0+255),w,b
  3511  001BAE  0100               	movlb	0	; () banked
  3512  001BB0  11C2               	iorwf	(??_sprintf+1)& (0+255),w,b
  3513  001BB2  B4D8               	btfsc	status,2,c
  3514  001BB4  D04F               	goto	l5641
  3515                           
  3516                           ; BSR set to: 0
  3517                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3518  001BB6  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3519  001BBA  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3520  001BBE  0E2D               	movlw	45
  3521  001BC0  6EDF               	movwf	indf2,c
  3522  001BC2  D045               	goto	l5639
  3523  001BC4                     l5635:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;doprnt.c: 1478: {
  3527                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3528  001BC4  C0DD  F0C1         	movff	sprintf@prec,??_sprintf
  3529  001BC8  C0DE  F0C2         	movff	sprintf@prec+1,??_sprintf+1
  3530  001BCC  0100               	movlb	0	; () banked
  3531  001BCE  90D8               	bcf	status,0,c
  3532  001BD0  37C1               	rlcf	??_sprintf& (0+255),f,b
  3533  001BD2  37C2               	rlcf	(??_sprintf+1)& (0+255),f,b
  3534  001BD4  0100               	movlb	0	; () banked
  3535  001BD6  90D8               	bcf	status,0,c
  3536  001BD8  37C1               	rlcf	??_sprintf& (0+255),f,b
  3537  001BDA  37C2               	rlcf	(??_sprintf+1)& (0+255),f,b
  3538  001BDC  0E69               	movlw	low _dpowers
  3539  001BDE  0100               	movlb	0	; () banked
  3540  001BE0  25C1               	addwf	??_sprintf& (0+255),w,b
  3541  001BE2  6EF6               	movwf	tblptrl,c
  3542  001BE4  0E10               	movlw	high _dpowers
  3543  001BE6  21C2               	addwfc	(??_sprintf+1)& (0+255),w,b
  3544  001BE8  6EF7               	movwf	tblptrh,c
  3545  001BEA                     	if	0	;There are less than 3 active tblptr bytes
  3546  001BEA                     	endif
  3547  001BEA  0009               	tblrd		*+
  3548  001BEC  CFF5 F01C          	movff	tablat,___lldiv@divisor
  3549  001BF0  0009               	tblrd		*+
  3550  001BF2  CFF5 F01D          	movff	tablat,___lldiv@divisor+1
  3551  001BF6  0009               	tblrd		*+
  3552  001BF8  CFF5 F01E          	movff	tablat,___lldiv@divisor+2
  3553  001BFC  000A               	tblrd		*-
  3554  001BFE  CFF5 F01F          	movff	tablat,___lldiv@divisor+3
  3555  001C02  C0D3  F018         	movff	sprintf@val,___lldiv@dividend
  3556  001C06  C0D4  F019         	movff	sprintf@val+1,___lldiv@dividend+1
  3557  001C0A  C0D5  F01A         	movff	sprintf@val+2,___lldiv@dividend+2
  3558  001C0E  C0D6  F01B         	movff	sprintf@val+3,___lldiv@dividend+3
  3559  001C12  EC5A  F01E         	call	___lldiv	;wreg free
  3560  001C16  C018  F025         	movff	?___lldiv,___llmod@dividend
  3561  001C1A  C019  F026         	movff	?___lldiv+1,___llmod@dividend+1
  3562  001C1E  C01A  F027         	movff	?___lldiv+2,___llmod@dividend+2
  3563  001C22  C01B  F028         	movff	?___lldiv+3,___llmod@dividend+3
  3564  001C26  0E0A               	movlw	10
  3565  001C28  6E29               	movwf	___llmod@divisor,c
  3566  001C2A  0E00               	movlw	0
  3567  001C2C  6E2A               	movwf	___llmod@divisor+1,c
  3568  001C2E  0E00               	movlw	0
  3569  001C30  6E2B               	movwf	___llmod@divisor+2,c
  3570  001C32  0E00               	movlw	0
  3571  001C34  6E2C               	movwf	___llmod@divisor+3,c
  3572  001C36  EC87  F01F         	call	___llmod	;wreg free
  3573  001C3A  5025               	movf	?___llmod,w,c
  3574  001C3C  0F30               	addlw	48
  3575  001C3E  0100               	movlb	0	; () banked
  3576  001C40  6FDF               	movwf	sprintf@c& (0+255),b
  3577                           
  3578                           ; BSR set to: 0
  3579                           ;doprnt.c: 1523: }
  3580                           ;doprnt.c: 1524: ((*sp++ = (c)));
  3581  001C42  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3582  001C46  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3583  001C4A  C0DF  FFDF         	movff	sprintf@c,indf2
  3584  001C4E                     l5639:
  3585                           
  3586                           ; BSR set to: 0
  3587  001C4E  0100               	movlb	0	; () banked
  3588  001C50  4BB7               	infsnz	sprintf@sp& (0+255),f,b
  3589  001C52  2BB8               	incf	(sprintf@sp+1)& (0+255),f,b
  3590  001C54                     l5641:
  3591                           
  3592                           ; BSR set to: 0
  3593  001C54  0100               	movlb	0	; () banked
  3594  001C56  07DD               	decf	sprintf@prec& (0+255),f,b
  3595  001C58  A0D8               	btfss	status,0,c
  3596  001C5A  07DE               	decf	(sprintf@prec+1)& (0+255),f,b
  3597  001C5C  0100               	movlb	0	; () banked
  3598  001C5E  29DD               	incf	sprintf@prec& (0+255),w,b
  3599  001C60  E1B1               	bnz	l5635
  3600  001C62  0100               	movlb	0	; () banked
  3601  001C64  29DE               	incf	(sprintf@prec+1)& (0+255),w,b
  3602  001C66  A4D8               	btfss	status,2,c
  3603  001C68  D7AD               	goto	l5635
  3604  001C6A                     l5643:
  3605                           
  3606                           ; BSR set to: 0
  3607  001C6A  C0B9  FFF6         	movff	sprintf@f,tblptrl
  3608  001C6E  C0BA  FFF7         	movff	sprintf@f+1,tblptrh
  3609  001C72  0100               	movlb	0	; () banked
  3610  001C74  4BB9               	infsnz	sprintf@f& (0+255),f,b
  3611  001C76  2BBA               	incf	(sprintf@f+1)& (0+255),f,b
  3612  001C78                     	if	0	;tblptru may be non-zero
  3613  001C78                     	endif
  3614  001C78                     	if	0	;tblptru may be non-zero
  3615  001C78                     	endif
  3616  001C78  0008               	tblrd		*
  3617  001C7A  CFF5 F0DF          	movff	tablat,sprintf@c
  3618  001C7E  0100               	movlb	0	; () banked
  3619  001C80  51DF               	movf	sprintf@c& (0+255),w,b
  3620  001C82  A4D8               	btfss	status,2,c
  3621  001C84  EF7C  F008         	goto	l5357
  3622  001C88                     l5645:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;doprnt.c: 1538: *sp = 0;
  3626  001C88  C0B7  FFD9         	movff	sprintf@sp,fsr2l
  3627  001C8C  C0B8  FFDA         	movff	sprintf@sp+1,fsr2h
  3628  001C90  0E00               	movlw	0
  3629  001C92  6EDF               	movwf	indf2,c
  3630  001C94  0012               	return	
  3631  001C96                     __end_of_sprintf:
  3632                           	opt stack 0
  3633                           tblptru	equ	0xFF8
  3634                           tblptrh	equ	0xFF7
  3635                           tblptrl	equ	0xFF6
  3636                           tablat	equ	0xFF5
  3637                           prodh	equ	0xFF4
  3638                           prodl	equ	0xFF3
  3639                           postinc0	equ	0xFEE
  3640                           wreg	equ	0xFE8
  3641                           postdec1	equ	0xFE5
  3642                           fsr1l	equ	0xFE1
  3643                           indf2	equ	0xFDF
  3644                           postinc2	equ	0xFDE
  3645                           postdec2	equ	0xFDD
  3646                           fsr2h	equ	0xFDA
  3647                           fsr2l	equ	0xFD9
  3648                           status	equ	0xFD8
  3649                           
  3650 ;; *************** function _scale *****************
  3651 ;; Defined at:
  3652 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  3653 ;; Parameters:    Size  Location     Type
  3654 ;;  scl             1    wreg     char 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  scl             1   80[COMRAM] char 
  3657 ;; Return value:  Size  Location     Type
  3658 ;;                  4   72[COMRAM] char 
  3659 ;; Registers used:
  3660 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3661 ;; Tracked objects:
  3662 ;;		On entry : 0/0
  3663 ;;		On exit  : 0/0
  3664 ;;		Unchanged: 0/0
  3665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3666 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;Total ram usage:        9 bytes
  3671 ;; Hardware stack levels used:    1
  3672 ;; Hardware stack levels required when called:    4
  3673 ;; This function calls:
  3674 ;;		___awdiv
  3675 ;;		___awmod
  3676 ;;		___flmul
  3677 ;; This function is called by:
  3678 ;;		_sprintf
  3679 ;; This function uses a non-reentrant model
  3680 ;;
  3681                           
  3682                           	psect	text2
  3683  0025C8                     __ptext2:
  3684                           	opt stack 0
  3685  0025C8                     _scale:
  3686                           	opt stack 25
  3687                           
  3688                           ; BSR set to: 0
  3689                           ;incstack = 0
  3690                           ;scale@scl stored from wreg
  3691  0025C8  6E51               	movwf	scale@scl,c
  3692                           
  3693                           ;doprnt.c: 428: if(scl < 0) {
  3694  0025CA  AE51               	btfss	scale@scl,7,c
  3695  0025CC  D105               	goto	l5139
  3696                           
  3697                           ;doprnt.c: 429: scl = -scl;
  3698  0025CE  6C51               	negf	scale@scl,c
  3699                           
  3700                           ;doprnt.c: 430: if(scl>=110)
  3701  0025D0  5051               	movf	scale@scl,w,c
  3702  0025D2  0A80               	xorlw	128
  3703  0025D4  0F12               	addlw	-238
  3704  0025D6  A0D8               	btfss	status,0,c
  3705  0025D8  D098               	goto	l5129
  3706                           
  3707                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3708  0025DA  0E00               	movlw	0
  3709  0025DC  6E1B               	movwf	___awdiv@divisor+1,c
  3710  0025DE  0E0A               	movlw	10
  3711  0025E0  6E1A               	movwf	___awdiv@divisor,c
  3712  0025E2  0E00               	movlw	0
  3713  0025E4  6E46               	movwf	___awmod@divisor+1,c
  3714  0025E6  0E64               	movlw	100
  3715  0025E8  6E45               	movwf	___awmod@divisor,c
  3716  0025EA  5051               	movf	scale@scl,w,c
  3717  0025EC  6E43               	movwf	___awmod@dividend,c
  3718  0025EE  6A44               	clrf	___awmod@dividend+1,c
  3719  0025F0  BE43               	btfsc	___awmod@dividend,7,c
  3720  0025F2  0644               	decf	___awmod@dividend+1,f,c
  3721  0025F4  EC17  F01F         	call	___awmod	;wreg free
  3722  0025F8  C043  F018         	movff	?___awmod,___awdiv@dividend
  3723  0025FC  C044  F019         	movff	?___awmod+1,___awdiv@dividend+1
  3724  002600  EC18  F01E         	call	___awdiv	;wreg free
  3725  002604  90D8               	bcf	status,0,c
  3726  002606  3618               	rlcf	?___awdiv,f,c
  3727  002608  3619               	rlcf	?___awdiv+1,f,c
  3728  00260A  90D8               	bcf	status,0,c
  3729  00260C  3618               	rlcf	?___awdiv,f,c
  3730  00260E  3619               	rlcf	?___awdiv+1,f,c
  3731  002610  0E24               	movlw	36
  3732  002612  2618               	addwf	?___awdiv,f,c
  3733  002614  0E00               	movlw	0
  3734  002616  2219               	addwfc	?___awdiv+1,f,c
  3735  002618  0E01               	movlw	low __npowers_
  3736  00261A  2418               	addwf	?___awdiv,w,c
  3737  00261C  6EF6               	movwf	tblptrl,c
  3738  00261E  0E10               	movlw	high __npowers_
  3739  002620  2019               	addwfc	?___awdiv+1,w,c
  3740  002622  6EF7               	movwf	tblptrh,c
  3741  002624                     	if	0	;There are less than 3 active tblptr bytes
  3742  002624                     	endif
  3743  002624  0009               	tblrd		*+
  3744  002626  CFF5 F024          	movff	tablat,___flmul@a
  3745  00262A  0009               	tblrd		*+
  3746  00262C  CFF5 F025          	movff	tablat,___flmul@a+1
  3747  002630  0009               	tblrd		*+
  3748  002632  CFF5 F026          	movff	tablat,___flmul@a+2
  3749  002636  000A               	tblrd		*-
  3750  002638  CFF5 F027          	movff	tablat,___flmul@a+3
  3751  00263C  0E00               	movlw	0
  3752  00263E  6E1B               	movwf	___awdiv@divisor+1,c
  3753  002640  0E64               	movlw	100
  3754  002642  6E1A               	movwf	___awdiv@divisor,c
  3755  002644  5051               	movf	scale@scl,w,c
  3756  002646  6E18               	movwf	___awdiv@dividend,c
  3757  002648  6A19               	clrf	___awdiv@dividend+1,c
  3758  00264A  BE18               	btfsc	___awdiv@dividend,7,c
  3759  00264C  0619               	decf	___awdiv@dividend+1,f,c
  3760  00264E  EC18  F01E         	call	___awdiv	;wreg free
  3761  002652  90D8               	bcf	status,0,c
  3762  002654  3618               	rlcf	?___awdiv,f,c
  3763  002656  3619               	rlcf	?___awdiv+1,f,c
  3764  002658  90D8               	bcf	status,0,c
  3765  00265A  3618               	rlcf	?___awdiv,f,c
  3766  00265C  3619               	rlcf	?___awdiv+1,f,c
  3767  00265E  0E48               	movlw	72
  3768  002660  2618               	addwf	?___awdiv,f,c
  3769  002662  0E00               	movlw	0
  3770  002664  2219               	addwfc	?___awdiv+1,f,c
  3771  002666  0E01               	movlw	low __npowers_
  3772  002668  2418               	addwf	?___awdiv,w,c
  3773  00266A  6EF6               	movwf	tblptrl,c
  3774  00266C  0E10               	movlw	high __npowers_
  3775  00266E  2019               	addwfc	?___awdiv+1,w,c
  3776  002670  6EF7               	movwf	tblptrh,c
  3777  002672                     	if	0	;There are less than 3 active tblptr bytes
  3778  002672                     	endif
  3779  002672  0009               	tblrd		*+
  3780  002674  CFF5 F020          	movff	tablat,___flmul@b
  3781  002678  0009               	tblrd		*+
  3782  00267A  CFF5 F021          	movff	tablat,___flmul@b+1
  3783  00267E  0009               	tblrd		*+
  3784  002680  CFF5 F022          	movff	tablat,___flmul@b+2
  3785  002684  000A               	tblrd		*-
  3786  002686  CFF5 F023          	movff	tablat,___flmul@b+3
  3787  00268A  ECD0  F016         	call	___flmul	;wreg free
  3788  00268E  C020  F04D         	movff	?___flmul,_scale$2070
  3789  002692  C021  F04E         	movff	?___flmul+1,_scale$2070+1
  3790  002696  C022  F04F         	movff	?___flmul+2,_scale$2070+2
  3791  00269A  C023  F050         	movff	?___flmul+3,_scale$2070+3
  3792                           
  3793                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3794  00269E  C04D  F020         	movff	_scale$2070,___flmul@b
  3795  0026A2  C04E  F021         	movff	_scale$2070+1,___flmul@b+1
  3796  0026A6  C04F  F022         	movff	_scale$2070+2,___flmul@b+2
  3797  0026AA  C050  F023         	movff	_scale$2070+3,___flmul@b+3
  3798  0026AE  0E00               	movlw	0
  3799  0026B0  6E46               	movwf	___awmod@divisor+1,c
  3800  0026B2  0E0A               	movlw	10
  3801  0026B4  6E45               	movwf	___awmod@divisor,c
  3802  0026B6  5051               	movf	scale@scl,w,c
  3803  0026B8  6E43               	movwf	___awmod@dividend,c
  3804  0026BA  6A44               	clrf	___awmod@dividend+1,c
  3805  0026BC  BE43               	btfsc	___awmod@dividend,7,c
  3806  0026BE  0644               	decf	___awmod@dividend+1,f,c
  3807  0026C0  EC17  F01F         	call	___awmod	;wreg free
  3808  0026C4  90D8               	bcf	status,0,c
  3809  0026C6  3643               	rlcf	?___awmod,f,c
  3810  0026C8  3644               	rlcf	?___awmod+1,f,c
  3811  0026CA  90D8               	bcf	status,0,c
  3812  0026CC  3643               	rlcf	?___awmod,f,c
  3813  0026CE  3644               	rlcf	?___awmod+1,f,c
  3814  0026D0  0E01               	movlw	low __npowers_
  3815  0026D2  2443               	addwf	?___awmod,w,c
  3816  0026D4  6EF6               	movwf	tblptrl,c
  3817  0026D6  0E10               	movlw	high __npowers_
  3818  0026D8  2044               	addwfc	?___awmod+1,w,c
  3819  0026DA  6EF7               	movwf	tblptrh,c
  3820  0026DC                     	if	0	;There are less than 3 active tblptr bytes
  3821  0026DC                     	endif
  3822  0026DC  0009               	tblrd		*+
  3823  0026DE  CFF5 F024          	movff	tablat,___flmul@a
  3824  0026E2  0009               	tblrd		*+
  3825  0026E4  CFF5 F025          	movff	tablat,___flmul@a+1
  3826  0026E8  0009               	tblrd		*+
  3827  0026EA  CFF5 F026          	movff	tablat,___flmul@a+2
  3828  0026EE  000A               	tblrd		*-
  3829  0026F0  CFF5 F027          	movff	tablat,___flmul@a+3
  3830  0026F4  ECD0  F016         	call	___flmul	;wreg free
  3831  0026F8  C020  F049         	movff	?___flmul,?_scale
  3832  0026FC  C021  F04A         	movff	?___flmul+1,?_scale+1
  3833  002700  C022  F04B         	movff	?___flmul+2,?_scale+2
  3834  002704  C023  F04C         	movff	?___flmul+3,?_scale+3
  3835  002708  0012               	return	
  3836  00270A                     l5129:
  3837                           
  3838                           ;doprnt.c: 432: else if(scl > 10)
  3839  00270A  5051               	movf	scale@scl,w,c
  3840  00270C  0A80               	xorlw	128
  3841  00270E  0F75               	addlw	-139
  3842  002710  A0D8               	btfss	status,0,c
  3843  002712  D04D               	goto	l5135
  3844                           
  3845                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  3846  002714  0E00               	movlw	0
  3847  002716  6E1B               	movwf	___awdiv@divisor+1,c
  3848  002718  0E0A               	movlw	10
  3849  00271A  6E1A               	movwf	___awdiv@divisor,c
  3850  00271C  5051               	movf	scale@scl,w,c
  3851  00271E  6E18               	movwf	___awdiv@dividend,c
  3852  002720  6A19               	clrf	___awdiv@dividend+1,c
  3853  002722  BE18               	btfsc	___awdiv@dividend,7,c
  3854  002724  0619               	decf	___awdiv@dividend+1,f,c
  3855  002726  EC18  F01E         	call	___awdiv	;wreg free
  3856  00272A  90D8               	bcf	status,0,c
  3857  00272C  3618               	rlcf	?___awdiv,f,c
  3858  00272E  3619               	rlcf	?___awdiv+1,f,c
  3859  002730  90D8               	bcf	status,0,c
  3860  002732  3618               	rlcf	?___awdiv,f,c
  3861  002734  3619               	rlcf	?___awdiv+1,f,c
  3862  002736  0E24               	movlw	36
  3863  002738  2618               	addwf	?___awdiv,f,c
  3864  00273A  0E00               	movlw	0
  3865  00273C  2219               	addwfc	?___awdiv+1,f,c
  3866  00273E  0E01               	movlw	low __npowers_
  3867  002740  2418               	addwf	?___awdiv,w,c
  3868  002742  6EF6               	movwf	tblptrl,c
  3869  002744  0E10               	movlw	high __npowers_
  3870  002746  2019               	addwfc	?___awdiv+1,w,c
  3871  002748  6EF7               	movwf	tblptrh,c
  3872  00274A                     	if	0	;There are less than 3 active tblptr bytes
  3873  00274A                     	endif
  3874  00274A  0009               	tblrd		*+
  3875  00274C  CFF5 F020          	movff	tablat,___flmul@b
  3876  002750  0009               	tblrd		*+
  3877  002752  CFF5 F021          	movff	tablat,___flmul@b+1
  3878  002756  0009               	tblrd		*+
  3879  002758  CFF5 F022          	movff	tablat,___flmul@b+2
  3880  00275C  000A               	tblrd		*-
  3881  00275E  CFF5 F023          	movff	tablat,___flmul@b+3
  3882  002762  0E00               	movlw	0
  3883  002764  6E46               	movwf	___awmod@divisor+1,c
  3884  002766  0E0A               	movlw	10
  3885  002768  6E45               	movwf	___awmod@divisor,c
  3886  00276A  5051               	movf	scale@scl,w,c
  3887  00276C  6E43               	movwf	___awmod@dividend,c
  3888  00276E  6A44               	clrf	___awmod@dividend+1,c
  3889  002770  BE43               	btfsc	___awmod@dividend,7,c
  3890  002772  0644               	decf	___awmod@dividend+1,f,c
  3891  002774  EC17  F01F         	call	___awmod	;wreg free
  3892  002778  90D8               	bcf	status,0,c
  3893  00277A  3643               	rlcf	?___awmod,f,c
  3894  00277C  3644               	rlcf	?___awmod+1,f,c
  3895  00277E  90D8               	bcf	status,0,c
  3896  002780  3643               	rlcf	?___awmod,f,c
  3897  002782  3644               	rlcf	?___awmod+1,f,c
  3898  002784  0E01               	movlw	low __npowers_
  3899  002786  2443               	addwf	?___awmod,w,c
  3900  002788  6EF6               	movwf	tblptrl,c
  3901  00278A  0E10               	movlw	high __npowers_
  3902  00278C  2044               	addwfc	?___awmod+1,w,c
  3903  00278E  6EF7               	movwf	tblptrh,c
  3904  002790                     	if	0	;There are less than 3 active tblptr bytes
  3905  002790                     	endif
  3906  002790  0009               	tblrd		*+
  3907  002792  CFF5 F024          	movff	tablat,___flmul@a
  3908  002796  0009               	tblrd		*+
  3909  002798  CFF5 F025          	movff	tablat,___flmul@a+1
  3910  00279C  0009               	tblrd		*+
  3911  00279E  CFF5 F026          	movff	tablat,___flmul@a+2
  3912  0027A2  000A               	tblrd		*-
  3913  0027A4  CFF5 F027          	movff	tablat,___flmul@a+3
  3914  0027A8  ECD0  F016         	call	___flmul	;wreg free
  3915  0027AC  D7A5               	goto	L4
  3916  0027AE                     l5135:
  3917                           
  3918                           ;doprnt.c: 434: return _npowers_[scl];
  3919  0027AE  5051               	movf	scale@scl,w,c
  3920  0027B0  0D04               	mullw	4
  3921  0027B2  0E01               	movlw	low __npowers_
  3922  0027B4  24F3               	addwf	prodl,w,c
  3923  0027B6  6EF6               	movwf	tblptrl,c
  3924  0027B8  0E10               	movlw	high __npowers_
  3925  0027BA  20F4               	addwfc	prodh,w,c
  3926  0027BC  6EF7               	movwf	tblptrh,c
  3927  0027BE                     	if	0	;There are less than 3 active tblptr bytes
  3928  0027BE                     	endif
  3929  0027BE  0009               	tblrd		*+
  3930  0027C0  CFF5 F049          	movff	tablat,?_scale
  3931  0027C4  0009               	tblrd		*+
  3932  0027C6  CFF5 F04A          	movff	tablat,?_scale+1
  3933  0027CA  0009               	tblrd		*+
  3934  0027CC  CFF5 F04B          	movff	tablat,?_scale+2
  3935  0027D0  000A               	tblrd		*-
  3936  0027D2  CFF5 F04C          	movff	tablat,?_scale+3
  3937  0027D6  0012               	return	
  3938  0027D8                     l5139:
  3939                           
  3940                           ;doprnt.c: 435: }
  3941                           ;doprnt.c: 436: if(scl>=110)
  3942  0027D8  5051               	movf	scale@scl,w,c
  3943  0027DA  0A80               	xorlw	128
  3944  0027DC  0F12               	addlw	-238
  3945  0027DE  A0D8               	btfss	status,0,c
  3946  0027E0  D098               	goto	l5147
  3947                           
  3948                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3949  0027E2  0E00               	movlw	0
  3950  0027E4  6E1B               	movwf	___awdiv@divisor+1,c
  3951  0027E6  0E0A               	movlw	10
  3952  0027E8  6E1A               	movwf	___awdiv@divisor,c
  3953  0027EA  0E00               	movlw	0
  3954  0027EC  6E46               	movwf	___awmod@divisor+1,c
  3955  0027EE  0E64               	movlw	100
  3956  0027F0  6E45               	movwf	___awmod@divisor,c
  3957  0027F2  5051               	movf	scale@scl,w,c
  3958  0027F4  6E43               	movwf	___awmod@dividend,c
  3959  0027F6  6A44               	clrf	___awmod@dividend+1,c
  3960  0027F8  BE43               	btfsc	___awmod@dividend,7,c
  3961  0027FA  0644               	decf	___awmod@dividend+1,f,c
  3962  0027FC  EC17  F01F         	call	___awmod	;wreg free
  3963  002800  C043  F018         	movff	?___awmod,___awdiv@dividend
  3964  002804  C044  F019         	movff	?___awmod+1,___awdiv@dividend+1
  3965  002808  EC18  F01E         	call	___awdiv	;wreg free
  3966  00280C  90D8               	bcf	status,0,c
  3967  00280E  3618               	rlcf	?___awdiv,f,c
  3968  002810  3619               	rlcf	?___awdiv+1,f,c
  3969  002812  90D8               	bcf	status,0,c
  3970  002814  3618               	rlcf	?___awdiv,f,c
  3971  002816  3619               	rlcf	?___awdiv+1,f,c
  3972  002818  0E24               	movlw	36
  3973  00281A  2618               	addwf	?___awdiv,f,c
  3974  00281C  0E00               	movlw	0
  3975  00281E  2219               	addwfc	?___awdiv+1,f,c
  3976  002820  0E35               	movlw	low __powers_
  3977  002822  2418               	addwf	?___awdiv,w,c
  3978  002824  6EF6               	movwf	tblptrl,c
  3979  002826  0E10               	movlw	high __powers_
  3980  002828  2019               	addwfc	?___awdiv+1,w,c
  3981  00282A  6EF7               	movwf	tblptrh,c
  3982  00282C                     	if	0	;There are less than 3 active tblptr bytes
  3983  00282C                     	endif
  3984  00282C  0009               	tblrd		*+
  3985  00282E  CFF5 F024          	movff	tablat,___flmul@a
  3986  002832  0009               	tblrd		*+
  3987  002834  CFF5 F025          	movff	tablat,___flmul@a+1
  3988  002838  0009               	tblrd		*+
  3989  00283A  CFF5 F026          	movff	tablat,___flmul@a+2
  3990  00283E  000A               	tblrd		*-
  3991  002840  CFF5 F027          	movff	tablat,___flmul@a+3
  3992  002844  0E00               	movlw	0
  3993  002846  6E1B               	movwf	___awdiv@divisor+1,c
  3994  002848  0E64               	movlw	100
  3995  00284A  6E1A               	movwf	___awdiv@divisor,c
  3996  00284C  5051               	movf	scale@scl,w,c
  3997  00284E  6E18               	movwf	___awdiv@dividend,c
  3998  002850  6A19               	clrf	___awdiv@dividend+1,c
  3999  002852  BE18               	btfsc	___awdiv@dividend,7,c
  4000  002854  0619               	decf	___awdiv@dividend+1,f,c
  4001  002856  EC18  F01E         	call	___awdiv	;wreg free
  4002  00285A  90D8               	bcf	status,0,c
  4003  00285C  3618               	rlcf	?___awdiv,f,c
  4004  00285E  3619               	rlcf	?___awdiv+1,f,c
  4005  002860  90D8               	bcf	status,0,c
  4006  002862  3618               	rlcf	?___awdiv,f,c
  4007  002864  3619               	rlcf	?___awdiv+1,f,c
  4008  002866  0E48               	movlw	72
  4009  002868  2618               	addwf	?___awdiv,f,c
  4010  00286A  0E00               	movlw	0
  4011  00286C  2219               	addwfc	?___awdiv+1,f,c
  4012  00286E  0E35               	movlw	low __powers_
  4013  002870  2418               	addwf	?___awdiv,w,c
  4014  002872  6EF6               	movwf	tblptrl,c
  4015  002874  0E10               	movlw	high __powers_
  4016  002876  2019               	addwfc	?___awdiv+1,w,c
  4017  002878  6EF7               	movwf	tblptrh,c
  4018  00287A                     	if	0	;There are less than 3 active tblptr bytes
  4019  00287A                     	endif
  4020  00287A  0009               	tblrd		*+
  4021  00287C  CFF5 F020          	movff	tablat,___flmul@b
  4022  002880  0009               	tblrd		*+
  4023  002882  CFF5 F021          	movff	tablat,___flmul@b+1
  4024  002886  0009               	tblrd		*+
  4025  002888  CFF5 F022          	movff	tablat,___flmul@b+2
  4026  00288C  000A               	tblrd		*-
  4027  00288E  CFF5 F023          	movff	tablat,___flmul@b+3
  4028  002892  ECD0  F016         	call	___flmul	;wreg free
  4029  002896  C020  F04D         	movff	?___flmul,_scale$2070
  4030  00289A  C021  F04E         	movff	?___flmul+1,_scale$2070+1
  4031  00289E  C022  F04F         	movff	?___flmul+2,_scale$2070+2
  4032  0028A2  C023  F050         	movff	?___flmul+3,_scale$2070+3
  4033                           
  4034                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4035  0028A6  C04D  F020         	movff	_scale$2070,___flmul@b
  4036  0028AA  C04E  F021         	movff	_scale$2070+1,___flmul@b+1
  4037  0028AE  C04F  F022         	movff	_scale$2070+2,___flmul@b+2
  4038  0028B2  C050  F023         	movff	_scale$2070+3,___flmul@b+3
  4039  0028B6  0E00               	movlw	0
  4040  0028B8  6E46               	movwf	___awmod@divisor+1,c
  4041  0028BA  0E0A               	movlw	10
  4042  0028BC  6E45               	movwf	___awmod@divisor,c
  4043  0028BE  5051               	movf	scale@scl,w,c
  4044  0028C0  6E43               	movwf	___awmod@dividend,c
  4045  0028C2  6A44               	clrf	___awmod@dividend+1,c
  4046  0028C4  BE43               	btfsc	___awmod@dividend,7,c
  4047  0028C6  0644               	decf	___awmod@dividend+1,f,c
  4048  0028C8  EC17  F01F         	call	___awmod	;wreg free
  4049  0028CC  90D8               	bcf	status,0,c
  4050  0028CE  3643               	rlcf	?___awmod,f,c
  4051  0028D0  3644               	rlcf	?___awmod+1,f,c
  4052  0028D2  90D8               	bcf	status,0,c
  4053  0028D4  3643               	rlcf	?___awmod,f,c
  4054  0028D6  3644               	rlcf	?___awmod+1,f,c
  4055  0028D8  0E35               	movlw	low __powers_
  4056  0028DA  2443               	addwf	?___awmod,w,c
  4057  0028DC  6EF6               	movwf	tblptrl,c
  4058  0028DE  0E10               	movlw	high __powers_
  4059  0028E0  2044               	addwfc	?___awmod+1,w,c
  4060  0028E2  6EF7               	movwf	tblptrh,c
  4061  0028E4                     	if	0	;There are less than 3 active tblptr bytes
  4062  0028E4                     	endif
  4063  0028E4  0009               	tblrd		*+
  4064  0028E6  CFF5 F024          	movff	tablat,___flmul@a
  4065  0028EA  0009               	tblrd		*+
  4066  0028EC  CFF5 F025          	movff	tablat,___flmul@a+1
  4067  0028F0  0009               	tblrd		*+
  4068  0028F2  CFF5 F026          	movff	tablat,___flmul@a+2
  4069  0028F6  000A               	tblrd		*-
  4070  0028F8  CFF5 F027          	movff	tablat,___flmul@a+3
  4071  0028FC  ECD0  F016         	call	___flmul	;wreg free
  4072  002900  C020  F049         	movff	?___flmul,?_scale
  4073  002904  C021  F04A         	movff	?___flmul+1,?_scale+1
  4074  002908  C022  F04B         	movff	?___flmul+2,?_scale+2
  4075  00290C  C023  F04C         	movff	?___flmul+3,?_scale+3
  4076  002910  0012               	return	
  4077  002912                     l5147:
  4078                           
  4079                           ;doprnt.c: 438: else if(scl > 10)
  4080  002912  5051               	movf	scale@scl,w,c
  4081  002914  0A80               	xorlw	128
  4082  002916  0F75               	addlw	-139
  4083  002918  A0D8               	btfss	status,0,c
  4084  00291A  D04D               	goto	l5153
  4085                           
  4086                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4087  00291C  0E00               	movlw	0
  4088  00291E  6E1B               	movwf	___awdiv@divisor+1,c
  4089  002920  0E0A               	movlw	10
  4090  002922  6E1A               	movwf	___awdiv@divisor,c
  4091  002924  5051               	movf	scale@scl,w,c
  4092  002926  6E18               	movwf	___awdiv@dividend,c
  4093  002928  6A19               	clrf	___awdiv@dividend+1,c
  4094  00292A  BE18               	btfsc	___awdiv@dividend,7,c
  4095  00292C  0619               	decf	___awdiv@dividend+1,f,c
  4096  00292E  EC18  F01E         	call	___awdiv	;wreg free
  4097  002932  90D8               	bcf	status,0,c
  4098  002934  3618               	rlcf	?___awdiv,f,c
  4099  002936  3619               	rlcf	?___awdiv+1,f,c
  4100  002938  90D8               	bcf	status,0,c
  4101  00293A  3618               	rlcf	?___awdiv,f,c
  4102  00293C  3619               	rlcf	?___awdiv+1,f,c
  4103  00293E  0E24               	movlw	36
  4104  002940  2618               	addwf	?___awdiv,f,c
  4105  002942  0E00               	movlw	0
  4106  002944  2219               	addwfc	?___awdiv+1,f,c
  4107  002946  0E35               	movlw	low __powers_
  4108  002948  2418               	addwf	?___awdiv,w,c
  4109  00294A  6EF6               	movwf	tblptrl,c
  4110  00294C  0E10               	movlw	high __powers_
  4111  00294E  2019               	addwfc	?___awdiv+1,w,c
  4112  002950  6EF7               	movwf	tblptrh,c
  4113  002952                     	if	0	;There are less than 3 active tblptr bytes
  4114  002952                     	endif
  4115  002952  0009               	tblrd		*+
  4116  002954  CFF5 F020          	movff	tablat,___flmul@b
  4117  002958  0009               	tblrd		*+
  4118  00295A  CFF5 F021          	movff	tablat,___flmul@b+1
  4119  00295E  0009               	tblrd		*+
  4120  002960  CFF5 F022          	movff	tablat,___flmul@b+2
  4121  002964  000A               	tblrd		*-
  4122  002966  CFF5 F023          	movff	tablat,___flmul@b+3
  4123  00296A  0E00               	movlw	0
  4124  00296C  6E46               	movwf	___awmod@divisor+1,c
  4125  00296E  0E0A               	movlw	10
  4126  002970  6E45               	movwf	___awmod@divisor,c
  4127  002972  5051               	movf	scale@scl,w,c
  4128  002974  6E43               	movwf	___awmod@dividend,c
  4129  002976  6A44               	clrf	___awmod@dividend+1,c
  4130  002978  BE43               	btfsc	___awmod@dividend,7,c
  4131  00297A  0644               	decf	___awmod@dividend+1,f,c
  4132  00297C  EC17  F01F         	call	___awmod	;wreg free
  4133  002980  90D8               	bcf	status,0,c
  4134  002982  3643               	rlcf	?___awmod,f,c
  4135  002984  3644               	rlcf	?___awmod+1,f,c
  4136  002986  90D8               	bcf	status,0,c
  4137  002988  3643               	rlcf	?___awmod,f,c
  4138  00298A  3644               	rlcf	?___awmod+1,f,c
  4139  00298C  0E35               	movlw	low __powers_
  4140  00298E  2443               	addwf	?___awmod,w,c
  4141  002990  6EF6               	movwf	tblptrl,c
  4142  002992  0E10               	movlw	high __powers_
  4143  002994  2044               	addwfc	?___awmod+1,w,c
  4144  002996  6EF7               	movwf	tblptrh,c
  4145  002998                     	if	0	;There are less than 3 active tblptr bytes
  4146  002998                     	endif
  4147  002998  0009               	tblrd		*+
  4148  00299A  CFF5 F024          	movff	tablat,___flmul@a
  4149  00299E  0009               	tblrd		*+
  4150  0029A0  CFF5 F025          	movff	tablat,___flmul@a+1
  4151  0029A4  0009               	tblrd		*+
  4152  0029A6  CFF5 F026          	movff	tablat,___flmul@a+2
  4153  0029AA  000A               	tblrd		*-
  4154  0029AC  CFF5 F027          	movff	tablat,___flmul@a+3
  4155  0029B0  ECD0  F016         	call	___flmul	;wreg free
  4156  0029B4  D7A5               	goto	L5
  4157  0029B6                     l5153:
  4158                           
  4159                           ;doprnt.c: 440: return _powers_[scl];
  4160  0029B6  5051               	movf	scale@scl,w,c
  4161  0029B8  0D04               	mullw	4
  4162  0029BA  0E35               	movlw	low __powers_
  4163  0029BC  24F3               	addwf	prodl,w,c
  4164  0029BE  6EF6               	movwf	tblptrl,c
  4165  0029C0  0E10               	movlw	high __powers_
  4166  0029C2  20F4               	addwfc	prodh,w,c
  4167  0029C4  6EF7               	movwf	tblptrh,c
  4168  0029C6                     	if	0	;There are less than 3 active tblptr bytes
  4169  0029C6                     	endif
  4170  0029C6  0009               	tblrd		*+
  4171  0029C8  CFF5 F049          	movff	tablat,?_scale
  4172  0029CC  0009               	tblrd		*+
  4173  0029CE  CFF5 F04A          	movff	tablat,?_scale+1
  4174  0029D2  0009               	tblrd		*+
  4175  0029D4  CFF5 F04B          	movff	tablat,?_scale+2
  4176  0029D8  000A               	tblrd		*-
  4177  0029DA  CFF5 F04C          	movff	tablat,?_scale+3
  4178  0029DE  0012               	return	
  4179  0029E0                     __end_of_scale:
  4180                           	opt stack 0
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           prodh	equ	0xFF4
  4186                           prodl	equ	0xFF3
  4187                           postinc0	equ	0xFEE
  4188                           wreg	equ	0xFE8
  4189                           postdec1	equ	0xFE5
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           postinc2	equ	0xFDE
  4193                           postdec2	equ	0xFDD
  4194                           fsr2h	equ	0xFDA
  4195                           fsr2l	equ	0xFD9
  4196                           status	equ	0xFD8
  4197                           
  4198 ;; *************** function _isdigit *****************
  4199 ;; Defined at:
  4200 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
  4201 ;; Parameters:    Size  Location     Type
  4202 ;;  c               1    wreg     unsigned char 
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  c               1   25[COMRAM] unsigned char 
  4205 ;; Return value:  Size  Location     Type
  4206 ;;		None               void
  4207 ;; Registers used:
  4208 ;;		wreg, status,2, status,0
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;Total ram usage:        3 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    3
  4221 ;; This function calls:
  4222 ;;		Nothing
  4223 ;; This function is called by:
  4224 ;;		_sprintf
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text3
  4229  004428                     __ptext3:
  4230                           	opt stack 0
  4231  004428                     _isdigit:
  4232                           	opt stack 26
  4233                           
  4234                           ;incstack = 0
  4235                           ;isdigit@c stored from wreg
  4236  004428  6E1A               	movwf	isdigit@c,c
  4237  00442A  0E00               	movlw	0
  4238  00442C  6E19               	movwf	_isdigit$1714,c
  4239  00442E  0E3A               	movlw	58
  4240  004430  601A               	cpfslt	isdigit@c,c
  4241  004432  D005               	goto	l3505
  4242  004434  0E2F               	movlw	47
  4243  004436  641A               	cpfsgt	isdigit@c,c
  4244  004438  D002               	goto	l3505
  4245  00443A  0E01               	movlw	1
  4246  00443C  6E19               	movwf	_isdigit$1714,c
  4247  00443E                     l3505:
  4248  00443E  C019  F018         	movff	_isdigit$1714,??_isdigit
  4249  004442  3018               	rrcf	??_isdigit,w,c
  4250  004444  0012               	return	
  4251  004446                     __end_of_isdigit:
  4252                           	opt stack 0
  4253                           tblptru	equ	0xFF8
  4254                           tblptrh	equ	0xFF7
  4255                           tblptrl	equ	0xFF6
  4256                           tablat	equ	0xFF5
  4257                           prodh	equ	0xFF4
  4258                           prodl	equ	0xFF3
  4259                           postinc0	equ	0xFEE
  4260                           wreg	equ	0xFE8
  4261                           postdec1	equ	0xFE5
  4262                           fsr1l	equ	0xFE1
  4263                           indf2	equ	0xFDF
  4264                           postinc2	equ	0xFDE
  4265                           postdec2	equ	0xFDD
  4266                           fsr2h	equ	0xFDA
  4267                           fsr2l	equ	0xFD9
  4268                           status	equ	0xFD8
  4269                           
  4270 ;; *************** function _fround *****************
  4271 ;; Defined at:
  4272 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
  4273 ;; Parameters:    Size  Location     Type
  4274 ;;  prec            1    wreg     unsigned char 
  4275 ;; Auto vars:     Size  Location     Type
  4276 ;;  prec            1    8[BANK0 ] unsigned char 
  4277 ;; Return value:  Size  Location     Type
  4278 ;;                  4   72[COMRAM] unsigned char 
  4279 ;; Registers used:
  4280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4281 ;; Tracked objects:
  4282 ;;		On entry : 0/0
  4283 ;;		On exit  : 0/0
  4284 ;;		Unchanged: 0/0
  4285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4286 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4287 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;Total ram usage:       13 bytes
  4291 ;; Hardware stack levels used:    1
  4292 ;; Hardware stack levels required when called:    4
  4293 ;; This function calls:
  4294 ;;		___awdiv
  4295 ;;		___awmod
  4296 ;;		___flmul
  4297 ;; This function is called by:
  4298 ;;		_sprintf
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text4
  4303  0030F0                     __ptext4:
  4304                           	opt stack 0
  4305  0030F0                     _fround:
  4306                           	opt stack 25
  4307                           
  4308                           ;incstack = 0
  4309                           ;fround@prec stored from wreg
  4310  0030F0  0100               	movlb	0	; () banked
  4311  0030F2  6F88               	movwf	fround@prec& (0+255),b
  4312                           
  4313                           ;doprnt.c: 413: if(prec>=110)
  4314  0030F4  0E6D               	movlw	109
  4315  0030F6  0100               	movlb	0	; () banked
  4316  0030F8  6588               	cpfsgt	fround@prec& (0+255),b
  4317  0030FA  D0AC               	goto	l5107
  4318                           
  4319                           ; BSR set to: 0
  4320                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4321  0030FC  0E00               	movlw	0
  4322  0030FE  6E1B               	movwf	___awdiv@divisor+1,c
  4323  003100  0E0A               	movlw	10
  4324  003102  6E1A               	movwf	___awdiv@divisor,c
  4325  003104  0E00               	movlw	0
  4326  003106  6E46               	movwf	___awmod@divisor+1,c
  4327  003108  0E64               	movlw	100
  4328  00310A  6E45               	movwf	___awmod@divisor,c
  4329  00310C  C088  F043         	movff	fround@prec,___awmod@dividend
  4330  003110  6A44               	clrf	___awmod@dividend+1,c
  4331  003112  EC17  F01F         	call	___awmod	;wreg free
  4332  003116  C043  F018         	movff	?___awmod,___awdiv@dividend
  4333  00311A  C044  F019         	movff	?___awmod+1,___awdiv@dividend+1
  4334  00311E  EC18  F01E         	call	___awdiv	;wreg free
  4335  003122  90D8               	bcf	status,0,c
  4336  003124  3618               	rlcf	?___awdiv,f,c
  4337  003126  3619               	rlcf	?___awdiv+1,f,c
  4338  003128  90D8               	bcf	status,0,c
  4339  00312A  3618               	rlcf	?___awdiv,f,c
  4340  00312C  3619               	rlcf	?___awdiv+1,f,c
  4341  00312E  0E24               	movlw	36
  4342  003130  2618               	addwf	?___awdiv,f,c
  4343  003132  0E00               	movlw	0
  4344  003134  2219               	addwfc	?___awdiv+1,f,c
  4345  003136  0E01               	movlw	low __npowers_
  4346  003138  2418               	addwf	?___awdiv,w,c
  4347  00313A  6EF6               	movwf	tblptrl,c
  4348  00313C  0E10               	movlw	high __npowers_
  4349  00313E  2019               	addwfc	?___awdiv+1,w,c
  4350  003140  6EF7               	movwf	tblptrh,c
  4351  003142                     	if	0	;There are less than 3 active tblptr bytes
  4352  003142                     	endif
  4353  003142  0009               	tblrd		*+
  4354  003144  CFF5 F024          	movff	tablat,___flmul@a
  4355  003148  0009               	tblrd		*+
  4356  00314A  CFF5 F025          	movff	tablat,___flmul@a+1
  4357  00314E  0009               	tblrd		*+
  4358  003150  CFF5 F026          	movff	tablat,___flmul@a+2
  4359  003154  000A               	tblrd		*-
  4360  003156  CFF5 F027          	movff	tablat,___flmul@a+3
  4361  00315A  0E00               	movlw	0
  4362  00315C  6E1B               	movwf	___awdiv@divisor+1,c
  4363  00315E  0E64               	movlw	100
  4364  003160  6E1A               	movwf	___awdiv@divisor,c
  4365  003162  C088  F018         	movff	fround@prec,___awdiv@dividend
  4366  003166  6A19               	clrf	___awdiv@dividend+1,c
  4367  003168  EC18  F01E         	call	___awdiv	;wreg free
  4368  00316C  90D8               	bcf	status,0,c
  4369  00316E  3618               	rlcf	?___awdiv,f,c
  4370  003170  3619               	rlcf	?___awdiv+1,f,c
  4371  003172  90D8               	bcf	status,0,c
  4372  003174  3618               	rlcf	?___awdiv,f,c
  4373  003176  3619               	rlcf	?___awdiv+1,f,c
  4374  003178  0E48               	movlw	72
  4375  00317A  2618               	addwf	?___awdiv,f,c
  4376  00317C  0E00               	movlw	0
  4377  00317E  2219               	addwfc	?___awdiv+1,f,c
  4378  003180  0E01               	movlw	low __npowers_
  4379  003182  2418               	addwf	?___awdiv,w,c
  4380  003184  6EF6               	movwf	tblptrl,c
  4381  003186  0E10               	movlw	high __npowers_
  4382  003188  2019               	addwfc	?___awdiv+1,w,c
  4383  00318A  6EF7               	movwf	tblptrh,c
  4384  00318C                     	if	0	;There are less than 3 active tblptr bytes
  4385  00318C                     	endif
  4386  00318C  0009               	tblrd		*+
  4387  00318E  CFF5 F020          	movff	tablat,___flmul@b
  4388  003192  0009               	tblrd		*+
  4389  003194  CFF5 F021          	movff	tablat,___flmul@b+1
  4390  003198  0009               	tblrd		*+
  4391  00319A  CFF5 F022          	movff	tablat,___flmul@b+2
  4392  00319E  000A               	tblrd		*-
  4393  0031A0  CFF5 F023          	movff	tablat,___flmul@b+3
  4394  0031A4  ECD0  F016         	call	___flmul	;wreg free
  4395  0031A8  C020  F084         	movff	?___flmul,_fround$2068
  4396  0031AC  C021  F085         	movff	?___flmul+1,_fround$2068+1
  4397  0031B0  C022  F086         	movff	?___flmul+2,_fround$2068+2
  4398  0031B4  C023  F087         	movff	?___flmul+3,_fround$2068+3
  4399                           
  4400                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4401  0031B8  0E00               	movlw	0
  4402  0031BA  6E46               	movwf	___awmod@divisor+1,c
  4403  0031BC  0E0A               	movlw	10
  4404  0031BE  6E45               	movwf	___awmod@divisor,c
  4405  0031C0  C088  F043         	movff	fround@prec,___awmod@dividend
  4406  0031C4  6A44               	clrf	___awmod@dividend+1,c
  4407  0031C6  EC17  F01F         	call	___awmod	;wreg free
  4408  0031CA  90D8               	bcf	status,0,c
  4409  0031CC  3643               	rlcf	?___awmod,f,c
  4410  0031CE  3644               	rlcf	?___awmod+1,f,c
  4411  0031D0  90D8               	bcf	status,0,c
  4412  0031D2  3643               	rlcf	?___awmod,f,c
  4413  0031D4  3644               	rlcf	?___awmod+1,f,c
  4414  0031D6  0E01               	movlw	low __npowers_
  4415  0031D8  2443               	addwf	?___awmod,w,c
  4416  0031DA  6EF6               	movwf	tblptrl,c
  4417  0031DC  0E10               	movlw	high __npowers_
  4418  0031DE  2044               	addwfc	?___awmod+1,w,c
  4419  0031E0  6EF7               	movwf	tblptrh,c
  4420  0031E2                     	if	0	;There are less than 3 active tblptr bytes
  4421  0031E2                     	endif
  4422  0031E2  0009               	tblrd		*+
  4423  0031E4  CFF5 F024          	movff	tablat,___flmul@a
  4424  0031E8  0009               	tblrd		*+
  4425  0031EA  CFF5 F025          	movff	tablat,___flmul@a+1
  4426  0031EE  0009               	tblrd		*+
  4427  0031F0  CFF5 F026          	movff	tablat,___flmul@a+2
  4428  0031F4  000A               	tblrd		*-
  4429  0031F6  CFF5 F027          	movff	tablat,___flmul@a+3
  4430  0031FA  C084  F020         	movff	_fround$2068,___flmul@b
  4431  0031FE  C085  F021         	movff	_fround$2068+1,___flmul@b+1
  4432  003202  C086  F022         	movff	_fround$2068+2,___flmul@b+2
  4433  003206  C087  F023         	movff	_fround$2068+3,___flmul@b+3
  4434  00320A  ECD0  F016         	call	___flmul	;wreg free
  4435  00320E  C020  F080         	movff	?___flmul,_fround$2069
  4436  003212  C021  F081         	movff	?___flmul+1,_fround$2069+1
  4437  003216  C022  F082         	movff	?___flmul+2,_fround$2069+2
  4438  00321A  C023  F083         	movff	?___flmul+3,_fround$2069+3
  4439                           
  4440                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4441  00321E  C080  F020         	movff	_fround$2069,___flmul@b
  4442  003222  C081  F021         	movff	_fround$2069+1,___flmul@b+1
  4443  003226  C082  F022         	movff	_fround$2069+2,___flmul@b+2
  4444  00322A  C083  F023         	movff	_fround$2069+3,___flmul@b+3
  4445  00322E  0E00               	movlw	0
  4446  003230  6E24               	movwf	___flmul@a,c
  4447  003232  0E00               	movlw	0
  4448  003234  6E25               	movwf	___flmul@a+1,c
  4449  003236  0E00               	movlw	0
  4450  003238  6E26               	movwf	___flmul@a+2,c
  4451  00323A  0E3F               	movlw	63
  4452  00323C  6E27               	movwf	___flmul@a+3,c
  4453  00323E  ECD0  F016         	call	___flmul	;wreg free
  4454  003242  C020  F049         	movff	?___flmul,?_fround
  4455  003246  C021  F04A         	movff	?___flmul+1,?_fround+1
  4456  00324A  C022  F04B         	movff	?___flmul+2,?_fround+2
  4457  00324E  C023  F04C         	movff	?___flmul+3,?_fround+3
  4458  003252  0012               	return	
  4459  003254                     l5107:
  4460                           
  4461                           ;doprnt.c: 415: else if(prec > 10)
  4462  003254  0E0A               	movlw	10
  4463  003256  0100               	movlb	0	; () banked
  4464  003258  6588               	cpfsgt	fround@prec& (0+255),b
  4465  00325A  D063               	goto	l5115
  4466                           
  4467                           ; BSR set to: 0
  4468                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4469  00325C  0E00               	movlw	0
  4470  00325E  6E46               	movwf	___awmod@divisor+1,c
  4471  003260  0E0A               	movlw	10
  4472  003262  6E45               	movwf	___awmod@divisor,c
  4473  003264  C088  F043         	movff	fround@prec,___awmod@dividend
  4474  003268  6A44               	clrf	___awmod@dividend+1,c
  4475  00326A  EC17  F01F         	call	___awmod	;wreg free
  4476  00326E  90D8               	bcf	status,0,c
  4477  003270  3643               	rlcf	?___awmod,f,c
  4478  003272  3644               	rlcf	?___awmod+1,f,c
  4479  003274  90D8               	bcf	status,0,c
  4480  003276  3643               	rlcf	?___awmod,f,c
  4481  003278  3644               	rlcf	?___awmod+1,f,c
  4482  00327A  0E01               	movlw	low __npowers_
  4483  00327C  2443               	addwf	?___awmod,w,c
  4484  00327E  6EF6               	movwf	tblptrl,c
  4485  003280  0E10               	movlw	high __npowers_
  4486  003282  2044               	addwfc	?___awmod+1,w,c
  4487  003284  6EF7               	movwf	tblptrh,c
  4488  003286                     	if	0	;There are less than 3 active tblptr bytes
  4489  003286                     	endif
  4490  003286  0009               	tblrd		*+
  4491  003288  CFF5 F024          	movff	tablat,___flmul@a
  4492  00328C  0009               	tblrd		*+
  4493  00328E  CFF5 F025          	movff	tablat,___flmul@a+1
  4494  003292  0009               	tblrd		*+
  4495  003294  CFF5 F026          	movff	tablat,___flmul@a+2
  4496  003298  000A               	tblrd		*-
  4497  00329A  CFF5 F027          	movff	tablat,___flmul@a+3
  4498  00329E  0E00               	movlw	0
  4499  0032A0  6E1B               	movwf	___awdiv@divisor+1,c
  4500  0032A2  0E0A               	movlw	10
  4501  0032A4  6E1A               	movwf	___awdiv@divisor,c
  4502  0032A6  C088  F018         	movff	fround@prec,___awdiv@dividend
  4503  0032AA  6A19               	clrf	___awdiv@dividend+1,c
  4504  0032AC  EC18  F01E         	call	___awdiv	;wreg free
  4505  0032B0  90D8               	bcf	status,0,c
  4506  0032B2  3618               	rlcf	?___awdiv,f,c
  4507  0032B4  3619               	rlcf	?___awdiv+1,f,c
  4508  0032B6  90D8               	bcf	status,0,c
  4509  0032B8  3618               	rlcf	?___awdiv,f,c
  4510  0032BA  3619               	rlcf	?___awdiv+1,f,c
  4511  0032BC  0E24               	movlw	36
  4512  0032BE  2618               	addwf	?___awdiv,f,c
  4513  0032C0  0E00               	movlw	0
  4514  0032C2  2219               	addwfc	?___awdiv+1,f,c
  4515  0032C4  0E01               	movlw	low __npowers_
  4516  0032C6  2418               	addwf	?___awdiv,w,c
  4517  0032C8  6EF6               	movwf	tblptrl,c
  4518  0032CA  0E10               	movlw	high __npowers_
  4519  0032CC  2019               	addwfc	?___awdiv+1,w,c
  4520  0032CE  6EF7               	movwf	tblptrh,c
  4521  0032D0                     	if	0	;There are less than 3 active tblptr bytes
  4522  0032D0                     	endif
  4523  0032D0  0009               	tblrd		*+
  4524  0032D2  CFF5 F020          	movff	tablat,___flmul@b
  4525  0032D6  0009               	tblrd		*+
  4526  0032D8  CFF5 F021          	movff	tablat,___flmul@b+1
  4527  0032DC  0009               	tblrd		*+
  4528  0032DE  CFF5 F022          	movff	tablat,___flmul@b+2
  4529  0032E2  000A               	tblrd		*-
  4530  0032E4  CFF5 F023          	movff	tablat,___flmul@b+3
  4531  0032E8  ECD0  F016         	call	___flmul	;wreg free
  4532  0032EC  C020  F084         	movff	?___flmul,_fround$2068
  4533  0032F0  C021  F085         	movff	?___flmul+1,_fround$2068+1
  4534  0032F4  C022  F086         	movff	?___flmul+2,_fround$2068+2
  4535  0032F8  C023  F087         	movff	?___flmul+3,_fround$2068+3
  4536                           
  4537                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4538  0032FC  C084  F020         	movff	_fround$2068,___flmul@b
  4539  003300  C085  F021         	movff	_fround$2068+1,___flmul@b+1
  4540  003304  C086  F022         	movff	_fround$2068+2,___flmul@b+2
  4541  003308  C087  F023         	movff	_fround$2068+3,___flmul@b+3
  4542  00330C  0E00               	movlw	0
  4543  00330E  6E24               	movwf	___flmul@a,c
  4544  003310  0E00               	movlw	0
  4545  003312  6E25               	movwf	___flmul@a+1,c
  4546  003314  0E00               	movlw	0
  4547  003316  6E26               	movwf	___flmul@a+2,c
  4548  003318  0E3F               	movlw	63
  4549  00331A  6E27               	movwf	___flmul@a+3,c
  4550  00331C  ECD0  F016         	call	___flmul	;wreg free
  4551  003320  D790               	goto	L6
  4552  003322                     l5115:
  4553                           
  4554                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4555  003322  0100               	movlb	0	; () banked
  4556  003324  5188               	movf	fround@prec& (0+255),w,b
  4557  003326  0D04               	mullw	4
  4558  003328  0E01               	movlw	low __npowers_
  4559  00332A  24F3               	addwf	prodl,w,c
  4560  00332C  6EF6               	movwf	tblptrl,c
  4561  00332E  0E10               	movlw	high __npowers_
  4562  003330  20F4               	addwfc	prodh,w,c
  4563  003332  6EF7               	movwf	tblptrh,c
  4564  003334                     	if	0	;There are less than 3 active tblptr bytes
  4565  003334                     	endif
  4566  003334  0009               	tblrd		*+
  4567  003336  CFF5 F020          	movff	tablat,___flmul@b
  4568  00333A  0009               	tblrd		*+
  4569  00333C  CFF5 F021          	movff	tablat,___flmul@b+1
  4570  003340  0009               	tblrd		*+
  4571  003342  CFF5 F022          	movff	tablat,___flmul@b+2
  4572  003346  000A               	tblrd		*-
  4573  003348  CFF5 F023          	movff	tablat,___flmul@b+3
  4574  00334C  0E00               	movlw	0
  4575  00334E  6E24               	movwf	___flmul@a,c
  4576  003350  0E00               	movlw	0
  4577  003352  6E25               	movwf	___flmul@a+1,c
  4578  003354  0E00               	movlw	0
  4579  003356  6E26               	movwf	___flmul@a+2,c
  4580  003358  0E3F               	movlw	63
  4581  00335A  6E27               	movwf	___flmul@a+3,c
  4582  00335C  ECD0  F016         	call	___flmul	;wreg free
  4583  003360  C020  F049         	movff	?___flmul,?_fround
  4584  003364  C021  F04A         	movff	?___flmul+1,?_fround+1
  4585  003368  C022  F04B         	movff	?___flmul+2,?_fround+2
  4586  00336C  C023  F04C         	movff	?___flmul+3,?_fround+3
  4587  003370  0012               	return	
  4588  003372                     __end_of_fround:
  4589                           	opt stack 0
  4590                           tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           postinc0	equ	0xFEE
  4597                           wreg	equ	0xFE8
  4598                           postdec1	equ	0xFE5
  4599                           fsr1l	equ	0xFE1
  4600                           indf2	equ	0xFDF
  4601                           postinc2	equ	0xFDE
  4602                           postdec2	equ	0xFDD
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function ___flmul *****************
  4608 ;; Defined at:
  4609 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcmul.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  b               4   31[COMRAM] unsigned char 
  4612 ;;  a               4   35[COMRAM] unsigned char 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;  prod            4   50[COMRAM] struct .
  4615 ;;  grs             4   45[COMRAM] unsigned long 
  4616 ;;  temp            2   54[COMRAM] struct .
  4617 ;;  bexp            1   49[COMRAM] unsigned char 
  4618 ;;  aexp            1   44[COMRAM] unsigned char 
  4619 ;;  sign            1   43[COMRAM] unsigned char 
  4620 ;; Return value:  Size  Location     Type
  4621 ;;                  4   31[COMRAM] unsigned char 
  4622 ;; Registers used:
  4623 ;;		wreg, status,2, status,0, prodl, prodh
  4624 ;; Tracked objects:
  4625 ;;		On entry : 0/0
  4626 ;;		On exit  : 0/0
  4627 ;;		Unchanged: 0/0
  4628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4629 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4630 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;Total ram usage:       25 bytes
  4634 ;; Hardware stack levels used:    1
  4635 ;; Hardware stack levels required when called:    3
  4636 ;; This function calls:
  4637 ;;		Nothing
  4638 ;; This function is called by:
  4639 ;;		_main
  4640 ;;		_fround
  4641 ;;		_scale
  4642 ;;		_sprintf
  4643 ;;		_set_pwm1_percent
  4644 ;;		_set_pwm1_voltage
  4645 ;;		_set_pwm1_general
  4646 ;; This function uses a non-reentrant model
  4647 ;;
  4648                           
  4649                           	psect	text5
  4650  002DA0                     __ptext5:
  4651                           	opt stack 0
  4652  002DA0                     ___flmul:
  4653                           	opt stack 25
  4654                           
  4655                           ;incstack = 0
  4656  002DA0  5023               	movf	___flmul@b+3,w,c
  4657  002DA2  0B80               	andlw	128
  4658  002DA4  6E2C               	movwf	___flmul@sign,c
  4659  002DA6  5023               	movf	___flmul@b+3,w,c
  4660  002DA8  2423               	addwf	___flmul@b+3,w,c
  4661  002DAA  6E32               	movwf	___flmul@bexp,c
  4662  002DAC  BE22               	btfsc	___flmul@b+2,7,c
  4663  002DAE  8032               	bsf	___flmul@bexp,0,c
  4664  002DB0  5032               	movf	___flmul@bexp,w,c
  4665  002DB2  B4D8               	btfsc	status,2,c
  4666  002DB4  D00D               	goto	l4891
  4667  002DB6  2832               	incf	___flmul@bexp,w,c
  4668  002DB8  A4D8               	btfss	status,2,c
  4669  002DBA  D008               	goto	l4889
  4670  002DBC  0E00               	movlw	0
  4671  002DBE  6E20               	movwf	___flmul@b,c
  4672  002DC0  0E00               	movlw	0
  4673  002DC2  6E21               	movwf	___flmul@b+1,c
  4674  002DC4  0E00               	movlw	0
  4675  002DC6  6E22               	movwf	___flmul@b+2,c
  4676  002DC8  0E00               	movlw	0
  4677  002DCA  6E23               	movwf	___flmul@b+3,c
  4678  002DCC                     l4889:
  4679  002DCC  8E22               	bsf	___flmul@b+2,7,c
  4680  002DCE  D008               	goto	l4893
  4681  002DD0                     l4891:
  4682  002DD0  0E00               	movlw	0
  4683  002DD2  6E20               	movwf	___flmul@b,c
  4684  002DD4  0E00               	movlw	0
  4685  002DD6  6E21               	movwf	___flmul@b+1,c
  4686  002DD8  0E00               	movlw	0
  4687  002DDA  6E22               	movwf	___flmul@b+2,c
  4688  002DDC  0E00               	movlw	0
  4689  002DDE  6E23               	movwf	___flmul@b+3,c
  4690  002DE0                     l4893:
  4691  002DE0  5027               	movf	___flmul@a+3,w,c
  4692  002DE2  0B80               	andlw	128
  4693  002DE4  1A2C               	xorwf	___flmul@sign,f,c
  4694  002DE6  5027               	movf	___flmul@a+3,w,c
  4695  002DE8  2427               	addwf	___flmul@a+3,w,c
  4696  002DEA  6E2D               	movwf	___flmul@aexp,c
  4697  002DEC  BE26               	btfsc	___flmul@a+2,7,c
  4698  002DEE  802D               	bsf	___flmul@aexp,0,c
  4699  002DF0  502D               	movf	___flmul@aexp,w,c
  4700  002DF2  B4D8               	btfsc	status,2,c
  4701  002DF4  D00D               	goto	l4909
  4702  002DF6  282D               	incf	___flmul@aexp,w,c
  4703  002DF8  A4D8               	btfss	status,2,c
  4704  002DFA  D008               	goto	l4907
  4705  002DFC  0E00               	movlw	0
  4706  002DFE  6E24               	movwf	___flmul@a,c
  4707  002E00  0E00               	movlw	0
  4708  002E02  6E25               	movwf	___flmul@a+1,c
  4709  002E04  0E00               	movlw	0
  4710  002E06  6E26               	movwf	___flmul@a+2,c
  4711  002E08  0E00               	movlw	0
  4712  002E0A  6E27               	movwf	___flmul@a+3,c
  4713  002E0C                     l4907:
  4714  002E0C  8E26               	bsf	___flmul@a+2,7,c
  4715  002E0E  D008               	goto	l1081
  4716  002E10                     l4909:
  4717  002E10  0E00               	movlw	0
  4718  002E12  6E24               	movwf	___flmul@a,c
  4719  002E14  0E00               	movlw	0
  4720  002E16  6E25               	movwf	___flmul@a+1,c
  4721  002E18  0E00               	movlw	0
  4722  002E1A  6E26               	movwf	___flmul@a+2,c
  4723  002E1C  0E00               	movlw	0
  4724  002E1E  6E27               	movwf	___flmul@a+3,c
  4725  002E20                     l1081:
  4726  002E20  502D               	movf	___flmul@aexp,w,c
  4727  002E22  B4D8               	btfsc	status,2,c
  4728  002E24  D003               	goto	l4913
  4729  002E26  5032               	movf	___flmul@bexp,w,c
  4730  002E28  A4D8               	btfss	status,2,c
  4731  002E2A  D009               	goto	l4917
  4732  002E2C                     l4913:
  4733  002E2C  0E00               	movlw	0
  4734  002E2E  6E20               	movwf	?___flmul,c
  4735  002E30  0E00               	movlw	0
  4736  002E32  6E21               	movwf	?___flmul+1,c
  4737  002E34  0E00               	movlw	0
  4738  002E36  6E22               	movwf	?___flmul+2,c
  4739  002E38  0E00               	movlw	0
  4740  002E3A  6E23               	movwf	?___flmul+3,c
  4741  002E3C  0012               	return	
  4742  002E3E                     l4917:
  4743  002E3E  5026               	movf	___flmul@a+2,w,c
  4744  002E40  0220               	mulwf	___flmul@b,c
  4745  002E42  CFF3 F037          	movff	prodl,___flmul@temp
  4746  002E46  CFF4 F038          	movff	prodh,___flmul@temp+1
  4747  002E4A  5037               	movf	___flmul@temp,w,c
  4748  002E4C  6E2E               	movwf	___flmul@grs,c
  4749  002E4E  6A2F               	clrf	___flmul@grs+1,c
  4750  002E50  6A30               	clrf	___flmul@grs+2,c
  4751  002E52  6A31               	clrf	___flmul@grs+3,c
  4752  002E54  5038               	movf	___flmul@temp+1,w,c
  4753  002E56  6E33               	movwf	___flmul@prod,c
  4754  002E58  6A34               	clrf	___flmul@prod+1,c
  4755  002E5A  6A35               	clrf	___flmul@prod+2,c
  4756  002E5C  6A36               	clrf	___flmul@prod+3,c
  4757  002E5E  5025               	movf	___flmul@a+1,w,c
  4758  002E60  0221               	mulwf	___flmul@b+1,c
  4759  002E62  CFF3 F037          	movff	prodl,___flmul@temp
  4760  002E66  CFF4 F038          	movff	prodh,___flmul@temp+1
  4761  002E6A  5037               	movf	___flmul@temp,w,c
  4762  002E6C  262E               	addwf	___flmul@grs,f,c
  4763  002E6E  0E00               	movlw	0
  4764  002E70  222F               	addwfc	___flmul@grs+1,f,c
  4765  002E72  2230               	addwfc	___flmul@grs+2,f,c
  4766  002E74  2231               	addwfc	___flmul@grs+3,f,c
  4767  002E76  5038               	movf	___flmul@temp+1,w,c
  4768  002E78  2633               	addwf	___flmul@prod,f,c
  4769  002E7A  0E00               	movlw	0
  4770  002E7C  2234               	addwfc	___flmul@prod+1,f,c
  4771  002E7E  2235               	addwfc	___flmul@prod+2,f,c
  4772  002E80  2236               	addwfc	___flmul@prod+3,f,c
  4773  002E82  5024               	movf	___flmul@a,w,c
  4774  002E84  0222               	mulwf	___flmul@b+2,c
  4775  002E86  CFF3 F037          	movff	prodl,___flmul@temp
  4776  002E8A  CFF4 F038          	movff	prodh,___flmul@temp+1
  4777  002E8E  5037               	movf	___flmul@temp,w,c
  4778  002E90  262E               	addwf	___flmul@grs,f,c
  4779  002E92  0E00               	movlw	0
  4780  002E94  222F               	addwfc	___flmul@grs+1,f,c
  4781  002E96  2230               	addwfc	___flmul@grs+2,f,c
  4782  002E98  2231               	addwfc	___flmul@grs+3,f,c
  4783  002E9A  5038               	movf	___flmul@temp+1,w,c
  4784  002E9C  2633               	addwf	___flmul@prod,f,c
  4785  002E9E  0E00               	movlw	0
  4786  002EA0  2234               	addwfc	___flmul@prod+1,f,c
  4787  002EA2  2235               	addwfc	___flmul@prod+2,f,c
  4788  002EA4  2236               	addwfc	___flmul@prod+3,f,c
  4789  002EA6  C030  F031         	movff	___flmul@grs+2,___flmul@grs+3
  4790  002EAA  C02F  F030         	movff	___flmul@grs+1,___flmul@grs+2
  4791  002EAE  C02E  F02F         	movff	___flmul@grs,___flmul@grs+1
  4792  002EB2  6A2E               	clrf	___flmul@grs,c
  4793  002EB4  5024               	movf	___flmul@a,w,c
  4794  002EB6  0221               	mulwf	___flmul@b+1,c
  4795  002EB8  CFF3 F037          	movff	prodl,___flmul@temp
  4796  002EBC  CFF4 F038          	movff	prodh,___flmul@temp+1
  4797  002EC0  5037               	movf	___flmul@temp,w,c
  4798  002EC2  262E               	addwf	___flmul@grs,f,c
  4799  002EC4  5038               	movf	___flmul@temp+1,w,c
  4800  002EC6  222F               	addwfc	___flmul@grs+1,f,c
  4801  002EC8  0E00               	movlw	0
  4802  002ECA  2230               	addwfc	___flmul@grs+2,f,c
  4803  002ECC  0E00               	movlw	0
  4804  002ECE  2231               	addwfc	___flmul@grs+3,f,c
  4805  002ED0  5025               	movf	___flmul@a+1,w,c
  4806  002ED2  0220               	mulwf	___flmul@b,c
  4807  002ED4  CFF3 F037          	movff	prodl,___flmul@temp
  4808  002ED8  CFF4 F038          	movff	prodh,___flmul@temp+1
  4809  002EDC  5037               	movf	___flmul@temp,w,c
  4810  002EDE  262E               	addwf	___flmul@grs,f,c
  4811  002EE0  5038               	movf	___flmul@temp+1,w,c
  4812  002EE2  222F               	addwfc	___flmul@grs+1,f,c
  4813  002EE4  0E00               	movlw	0
  4814  002EE6  2230               	addwfc	___flmul@grs+2,f,c
  4815  002EE8  0E00               	movlw	0
  4816  002EEA  2231               	addwfc	___flmul@grs+3,f,c
  4817  002EEC  C030  F031         	movff	___flmul@grs+2,___flmul@grs+3
  4818  002EF0  C02F  F030         	movff	___flmul@grs+1,___flmul@grs+2
  4819  002EF4  C02E  F02F         	movff	___flmul@grs,___flmul@grs+1
  4820  002EF8  6A2E               	clrf	___flmul@grs,c
  4821  002EFA  5024               	movf	___flmul@a,w,c
  4822  002EFC  0220               	mulwf	___flmul@b,c
  4823  002EFE  CFF3 F037          	movff	prodl,___flmul@temp
  4824  002F02  CFF4 F038          	movff	prodh,___flmul@temp+1
  4825  002F06  5037               	movf	___flmul@temp,w,c
  4826  002F08  262E               	addwf	___flmul@grs,f,c
  4827  002F0A  5038               	movf	___flmul@temp+1,w,c
  4828  002F0C  222F               	addwfc	___flmul@grs+1,f,c
  4829  002F0E  0E00               	movlw	0
  4830  002F10  2230               	addwfc	___flmul@grs+2,f,c
  4831  002F12  0E00               	movlw	0
  4832  002F14  2231               	addwfc	___flmul@grs+3,f,c
  4833  002F16  5026               	movf	___flmul@a+2,w,c
  4834  002F18  0221               	mulwf	___flmul@b+1,c
  4835  002F1A  CFF3 F037          	movff	prodl,___flmul@temp
  4836  002F1E  CFF4 F038          	movff	prodh,___flmul@temp+1
  4837  002F22  5037               	movf	___flmul@temp,w,c
  4838  002F24  2633               	addwf	___flmul@prod,f,c
  4839  002F26  5038               	movf	___flmul@temp+1,w,c
  4840  002F28  2234               	addwfc	___flmul@prod+1,f,c
  4841  002F2A  0E00               	movlw	0
  4842  002F2C  2235               	addwfc	___flmul@prod+2,f,c
  4843  002F2E  0E00               	movlw	0
  4844  002F30  2236               	addwfc	___flmul@prod+3,f,c
  4845  002F32  5025               	movf	___flmul@a+1,w,c
  4846  002F34  0222               	mulwf	___flmul@b+2,c
  4847  002F36  CFF3 F037          	movff	prodl,___flmul@temp
  4848  002F3A  CFF4 F038          	movff	prodh,___flmul@temp+1
  4849  002F3E  5037               	movf	___flmul@temp,w,c
  4850  002F40  2633               	addwf	___flmul@prod,f,c
  4851  002F42  5038               	movf	___flmul@temp+1,w,c
  4852  002F44  2234               	addwfc	___flmul@prod+1,f,c
  4853  002F46  0E00               	movlw	0
  4854  002F48  2235               	addwfc	___flmul@prod+2,f,c
  4855  002F4A  0E00               	movlw	0
  4856  002F4C  2236               	addwfc	___flmul@prod+3,f,c
  4857  002F4E  5026               	movf	___flmul@a+2,w,c
  4858  002F50  0222               	mulwf	___flmul@b+2,c
  4859  002F52  CFF3 F037          	movff	prodl,___flmul@temp
  4860  002F56  CFF4 F038          	movff	prodh,___flmul@temp+1
  4861  002F5A  5037               	movf	___flmul@temp,w,c
  4862  002F5C  6E28               	movwf	??___flmul& (0+255),c
  4863  002F5E  5038               	movf	___flmul@temp+1,w,c
  4864  002F60  6E29               	movwf	(??___flmul+1)& (0+255),c
  4865  002F62  6A2A               	clrf	(??___flmul+2)& (0+255),c
  4866  002F64  6A2B               	clrf	(??___flmul+3)& (0+255),c
  4867  002F66  C02A  F02B         	movff	??___flmul+2,??___flmul+3
  4868  002F6A  C029  F02A         	movff	??___flmul+1,??___flmul+2
  4869  002F6E  C028  F029         	movff	??___flmul,??___flmul+1
  4870  002F72  6A28               	clrf	??___flmul,c
  4871  002F74  5028               	movf	??___flmul,w,c
  4872  002F76  2633               	addwf	___flmul@prod,f,c
  4873  002F78  5029               	movf	??___flmul+1,w,c
  4874  002F7A  2234               	addwfc	___flmul@prod+1,f,c
  4875  002F7C  502A               	movf	??___flmul+2,w,c
  4876  002F7E  2235               	addwfc	___flmul@prod+2,f,c
  4877  002F80  502B               	movf	??___flmul+3,w,c
  4878  002F82  2236               	addwfc	___flmul@prod+3,f,c
  4879  002F84  C02E  F028         	movff	___flmul@grs,??___flmul
  4880  002F88  C02F  F029         	movff	___flmul@grs+1,??___flmul+1
  4881  002F8C  C030  F02A         	movff	___flmul@grs+2,??___flmul+2
  4882  002F90  C031  F02B         	movff	___flmul@grs+3,??___flmul+3
  4883  002F94  0E19               	movlw	25
  4884  002F96  D005               	goto	u5510
  4885  002F98                     u5515:
  4886  002F98  90D8               	bcf	status,0,c
  4887  002F9A  322B               	rrcf	??___flmul+3,f,c
  4888  002F9C  322A               	rrcf	??___flmul+2,f,c
  4889  002F9E  3229               	rrcf	??___flmul+1,f,c
  4890  002FA0  3228               	rrcf	??___flmul,f,c
  4891  002FA2                     u5510:
  4892  002FA2  2EE8               	decfsz	wreg,f,c
  4893  002FA4  D7F9               	goto	u5515
  4894  002FA6  5028               	movf	??___flmul,w,c
  4895  002FA8  2633               	addwf	___flmul@prod,f,c
  4896  002FAA  5029               	movf	??___flmul+1,w,c
  4897  002FAC  2234               	addwfc	___flmul@prod+1,f,c
  4898  002FAE  502A               	movf	??___flmul+2,w,c
  4899  002FB0  2235               	addwfc	___flmul@prod+2,f,c
  4900  002FB2  502B               	movf	??___flmul+3,w,c
  4901  002FB4  2236               	addwfc	___flmul@prod+3,f,c
  4902  002FB6  C030  F031         	movff	___flmul@grs+2,___flmul@grs+3
  4903  002FBA  C02F  F030         	movff	___flmul@grs+1,___flmul@grs+2
  4904  002FBE  C02E  F02F         	movff	___flmul@grs,___flmul@grs+1
  4905  002FC2  6A2E               	clrf	___flmul@grs,c
  4906  002FC4  502D               	movf	___flmul@aexp,w,c
  4907  002FC6  C032  F028         	movff	___flmul@bexp,??___flmul
  4908  002FCA  6A29               	clrf	(??___flmul+1)& (0+255),c
  4909  002FCC  2628               	addwf	??___flmul,f,c
  4910  002FCE  0E00               	movlw	0
  4911  002FD0  2229               	addwfc	??___flmul+1,f,c
  4912  002FD2  0E82               	movlw	130
  4913  002FD4  2428               	addwf	??___flmul,w,c
  4914  002FD6  6E37               	movwf	___flmul@temp,c
  4915  002FD8  0EFF               	movlw	255
  4916  002FDA  2029               	addwfc	??___flmul+1,w,c
  4917  002FDC  6E38               	movwf	___flmul@temp+1,c
  4918  002FDE  D00F               	goto	l4965
  4919  002FE0                     l4959:
  4920  002FE0  90D8               	bcf	status,0,c
  4921  002FE2  3633               	rlcf	___flmul@prod,f,c
  4922  002FE4  3634               	rlcf	___flmul@prod+1,f,c
  4923  002FE6  3635               	rlcf	___flmul@prod+2,f,c
  4924  002FE8  3636               	rlcf	___flmul@prod+3,f,c
  4925  002FEA  BE31               	btfsc	___flmul@grs+3,7,c
  4926  002FEC  8033               	bsf	___flmul@prod,0,c
  4927  002FEE  90D8               	bcf	status,0,c
  4928  002FF0  362E               	rlcf	___flmul@grs,f,c
  4929  002FF2  362F               	rlcf	___flmul@grs+1,f,c
  4930  002FF4  3630               	rlcf	___flmul@grs+2,f,c
  4931  002FF6  3631               	rlcf	___flmul@grs+3,f,c
  4932  002FF8  0637               	decf	___flmul@temp,f,c
  4933  002FFA  A0D8               	btfss	status,0,c
  4934  002FFC  0638               	decf	___flmul@temp+1,f,c
  4935  002FFE                     l4965:
  4936  002FFE  AE35               	btfss	___flmul@prod+2,7,c
  4937  003000  D7EF               	goto	l4959
  4938  003002  0E00               	movlw	0
  4939  003004  6E2D               	movwf	___flmul@aexp,c
  4940  003006  AE31               	btfss	___flmul@grs+3,7,c
  4941  003008  D016               	goto	l1090
  4942  00300A  0EFF               	movlw	255
  4943  00300C  142E               	andwf	___flmul@grs,w,c
  4944  00300E  6E28               	movwf	??___flmul& (0+255),c
  4945  003010  0EFF               	movlw	255
  4946  003012  142F               	andwf	___flmul@grs+1,w,c
  4947  003014  6E29               	movwf	(??___flmul+1)& (0+255),c
  4948  003016  0EFF               	movlw	255
  4949  003018  1430               	andwf	___flmul@grs+2,w,c
  4950  00301A  6E2A               	movwf	(??___flmul+2)& (0+255),c
  4951  00301C  0E7F               	movlw	127
  4952  00301E  1431               	andwf	___flmul@grs+3,w,c
  4953  003020  6E2B               	movwf	(??___flmul+3)& (0+255),c
  4954  003022  5028               	movf	??___flmul,w,c
  4955  003024  1029               	iorwf	??___flmul+1,w,c
  4956  003026  102A               	iorwf	??___flmul+2,w,c
  4957  003028  102B               	iorwf	??___flmul+3,w,c
  4958  00302A  A4D8               	btfss	status,2,c
  4959  00302C  D002               	goto	l4975
  4960  00302E  A033               	btfss	___flmul@prod,0,c
  4961  003030  D002               	goto	l1090
  4962  003032                     l4975:
  4963  003032  0E01               	movlw	1
  4964  003034  6E2D               	movwf	___flmul@aexp,c
  4965  003036                     l1090:
  4966  003036  502D               	movf	___flmul@aexp,w,c
  4967  003038  B4D8               	btfsc	status,2,c
  4968  00303A  D01F               	goto	l4985
  4969  00303C  0E01               	movlw	1
  4970  00303E  2633               	addwf	___flmul@prod,f,c
  4971  003040  0E00               	movlw	0
  4972  003042  2234               	addwfc	___flmul@prod+1,f,c
  4973  003044  2235               	addwfc	___flmul@prod+2,f,c
  4974  003046  2236               	addwfc	___flmul@prod+3,f,c
  4975  003048  A036               	btfss	___flmul@prod+3,0,c
  4976  00304A  D017               	goto	l4985
  4977  00304C  C033  F028         	movff	___flmul@prod,??___flmul
  4978  003050  C034  F029         	movff	___flmul@prod+1,??___flmul+1
  4979  003054  C035  F02A         	movff	___flmul@prod+2,??___flmul+2
  4980  003058  C036  F02B         	movff	___flmul@prod+3,??___flmul+3
  4981  00305C  342B               	rlcf	??___flmul+3,w,c
  4982  00305E  322B               	rrcf	??___flmul+3,f,c
  4983  003060  322A               	rrcf	??___flmul+2,f,c
  4984  003062  3229               	rrcf	??___flmul+1,f,c
  4985  003064  3228               	rrcf	??___flmul,f,c
  4986  003066  C028  F033         	movff	??___flmul,___flmul@prod
  4987  00306A  C029  F034         	movff	??___flmul+1,___flmul@prod+1
  4988  00306E  C02A  F035         	movff	??___flmul+2,___flmul@prod+2
  4989  003072  C02B  F036         	movff	??___flmul+3,___flmul@prod+3
  4990  003076  4A37               	infsnz	___flmul@temp,f,c
  4991  003078  2A38               	incf	___flmul@temp+1,f,c
  4992  00307A                     l4985:
  4993  00307A  BE38               	btfsc	___flmul@temp+1,7,c
  4994  00307C  D00D               	goto	l4989
  4995  00307E  5038               	movf	___flmul@temp+1,w,c
  4996  003080  E103               	bnz	u5590
  4997  003082  2837               	incf	___flmul@temp,w,c
  4998  003084  A0D8               	btfss	status,0,c
  4999  003086  D008               	goto	l4989
  5000  003088                     u5590:
  5001  003088  0E00               	movlw	0
  5002  00308A  6E33               	movwf	___flmul@prod,c
  5003  00308C  0E00               	movlw	0
  5004  00308E  6E34               	movwf	___flmul@prod+1,c
  5005  003090  0E80               	movlw	128
  5006  003092  6E35               	movwf	___flmul@prod+2,c
  5007  003094  0E7F               	movlw	127
  5008  003096  D020               	goto	L7
  5009  003098                     l4989:
  5010  003098  BE38               	btfsc	___flmul@temp+1,7,c
  5011  00309A  D005               	goto	l4991
  5012  00309C  5038               	movf	___flmul@temp+1,w,c
  5013  00309E  E10E               	bnz	l1098
  5014  0030A0  0437               	decf	___flmul@temp,w,c
  5015  0030A2  B0D8               	btfsc	status,0,c
  5016  0030A4  D00B               	goto	l1098
  5017  0030A6                     l4991:
  5018  0030A6  0E00               	movlw	0
  5019  0030A8  6E33               	movwf	___flmul@prod,c
  5020  0030AA  0E00               	movlw	0
  5021  0030AC  6E34               	movwf	___flmul@prod+1,c
  5022  0030AE  0E00               	movlw	0
  5023  0030B0  6E35               	movwf	___flmul@prod+2,c
  5024  0030B2  0E00               	movlw	0
  5025  0030B4  6E36               	movwf	___flmul@prod+3,c
  5026  0030B6  0E00               	movlw	0
  5027  0030B8  6E2C               	movwf	___flmul@sign,c
  5028  0030BA  D00F               	goto	l5001
  5029  0030BC                     l1098:
  5030  0030BC  C037  F032         	movff	___flmul@temp,___flmul@bexp
  5031  0030C0  0EFF               	movlw	255
  5032  0030C2  1633               	andwf	___flmul@prod,f,c
  5033  0030C4  0EFF               	movlw	255
  5034  0030C6  1634               	andwf	___flmul@prod+1,f,c
  5035  0030C8  0E7F               	movlw	127
  5036  0030CA  1635               	andwf	___flmul@prod+2,f,c
  5037  0030CC  0E00               	movlw	0
  5038  0030CE  1636               	andwf	___flmul@prod+3,f,c
  5039  0030D0  B032               	btfsc	___flmul@bexp,0,c
  5040  0030D2  8E35               	bsf	___flmul@prod+2,7,c
  5041  0030D4  90D8               	bcf	status,0,c
  5042  0030D6  3032               	rrcf	___flmul@bexp,w,c
  5043  0030D8                     L7:
  5044  0030D8  6E36               	movwf	___flmul@prod+3,c
  5045  0030DA                     l5001:
  5046  0030DA  502C               	movf	___flmul@sign,w,c
  5047  0030DC  1236               	iorwf	___flmul@prod+3,f,c
  5048  0030DE  C033  F020         	movff	___flmul@prod,?___flmul
  5049  0030E2  C034  F021         	movff	___flmul@prod+1,?___flmul+1
  5050  0030E6  C035  F022         	movff	___flmul@prod+2,?___flmul+2
  5051  0030EA  C036  F023         	movff	___flmul@prod+3,?___flmul+3
  5052  0030EE  0012               	return	
  5053  0030F0                     __end_of___flmul:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           postinc0	equ	0xFEE
  5062                           wreg	equ	0xFE8
  5063                           postdec1	equ	0xFE5
  5064                           fsr1l	equ	0xFE1
  5065                           indf2	equ	0xFDF
  5066                           postinc2	equ	0xFDE
  5067                           postdec2	equ	0xFDD
  5068                           fsr2h	equ	0xFDA
  5069                           fsr2l	equ	0xFD9
  5070                           status	equ	0xFD8
  5071                           
  5072 ;; *************** function ___awmod *****************
  5073 ;; Defined at:
  5074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awmod.c"
  5075 ;; Parameters:    Size  Location     Type
  5076 ;;  dividend        2   66[COMRAM] int 
  5077 ;;  divisor         2   68[COMRAM] int 
  5078 ;; Auto vars:     Size  Location     Type
  5079 ;;  sign            1   71[COMRAM] unsigned char 
  5080 ;;  counter         1   70[COMRAM] unsigned char 
  5081 ;; Return value:  Size  Location     Type
  5082 ;;                  2   66[COMRAM] int 
  5083 ;; Registers used:
  5084 ;;		wreg, status,2, status,0
  5085 ;; Tracked objects:
  5086 ;;		On entry : 0/0
  5087 ;;		On exit  : 0/0
  5088 ;;		Unchanged: 0/0
  5089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5090 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5091 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;Total ram usage:        6 bytes
  5095 ;; Hardware stack levels used:    1
  5096 ;; Hardware stack levels required when called:    3
  5097 ;; This function calls:
  5098 ;;		Nothing
  5099 ;; This function is called by:
  5100 ;;		_main
  5101 ;;		_fround
  5102 ;;		_scale
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text6
  5107  003E2E                     __ptext6:
  5108                           	opt stack 0
  5109  003E2E                     ___awmod:
  5110                           	opt stack 25
  5111                           
  5112                           ;incstack = 0
  5113  003E2E  0E00               	movlw	0
  5114  003E30  6E48               	movwf	___awmod@sign,c
  5115  003E32  AE44               	btfss	___awmod@dividend+1,7,c
  5116  003E34  D006               	goto	l5059
  5117  003E36  6C43               	negf	___awmod@dividend,c
  5118  003E38  1E44               	comf	___awmod@dividend+1,f,c
  5119  003E3A  B0D8               	btfsc	status,0,c
  5120  003E3C  2A44               	incf	___awmod@dividend+1,f,c
  5121  003E3E  0E01               	movlw	1
  5122  003E40  6E48               	movwf	___awmod@sign,c
  5123  003E42                     l5059:
  5124  003E42  AE46               	btfss	___awmod@divisor+1,7,c
  5125  003E44  D004               	goto	l5063
  5126  003E46  6C45               	negf	___awmod@divisor,c
  5127  003E48  1E46               	comf	___awmod@divisor+1,f,c
  5128  003E4A  B0D8               	btfsc	status,0,c
  5129  003E4C  2A46               	incf	___awmod@divisor+1,f,c
  5130  003E4E                     l5063:
  5131  003E4E  5045               	movf	___awmod@divisor,w,c
  5132  003E50  1046               	iorwf	___awmod@divisor+1,w,c
  5133  003E52  B4D8               	btfsc	status,2,c
  5134  003E54  D018               	goto	l5079
  5135  003E56  0E01               	movlw	1
  5136  003E58  6E47               	movwf	___awmod@counter,c
  5137  003E5A  D004               	goto	l5069
  5138  003E5C                     l5067:
  5139  003E5C  90D8               	bcf	status,0,c
  5140  003E5E  3645               	rlcf	___awmod@divisor,f,c
  5141  003E60  3646               	rlcf	___awmod@divisor+1,f,c
  5142  003E62  2A47               	incf	___awmod@counter,f,c
  5143  003E64                     l5069:
  5144  003E64  AE46               	btfss	___awmod@divisor+1,7,c
  5145  003E66  D7FA               	goto	l5067
  5146  003E68                     l5071:
  5147  003E68  5045               	movf	___awmod@divisor,w,c
  5148  003E6A  5C43               	subwf	___awmod@dividend,w,c
  5149  003E6C  5046               	movf	___awmod@divisor+1,w,c
  5150  003E6E  5844               	subwfb	___awmod@dividend+1,w,c
  5151  003E70  A0D8               	btfss	status,0,c
  5152  003E72  D004               	goto	l5075
  5153  003E74  5045               	movf	___awmod@divisor,w,c
  5154  003E76  5E43               	subwf	___awmod@dividend,f,c
  5155  003E78  5046               	movf	___awmod@divisor+1,w,c
  5156  003E7A  5A44               	subwfb	___awmod@dividend+1,f,c
  5157  003E7C                     l5075:
  5158  003E7C  90D8               	bcf	status,0,c
  5159  003E7E  3246               	rrcf	___awmod@divisor+1,f,c
  5160  003E80  3245               	rrcf	___awmod@divisor,f,c
  5161  003E82  2E47               	decfsz	___awmod@counter,f,c
  5162  003E84  D7F1               	goto	l5071
  5163  003E86                     l5079:
  5164  003E86  5048               	movf	___awmod@sign,w,c
  5165  003E88  B4D8               	btfsc	status,2,c
  5166  003E8A  D004               	goto	l5083
  5167  003E8C  6C43               	negf	___awmod@dividend,c
  5168  003E8E  1E44               	comf	___awmod@dividend+1,f,c
  5169  003E90  B0D8               	btfsc	status,0,c
  5170  003E92  2A44               	incf	___awmod@dividend+1,f,c
  5171  003E94                     l5083:
  5172  003E94  C043  F043         	movff	___awmod@dividend,?___awmod
  5173  003E98  C044  F044         	movff	___awmod@dividend+1,?___awmod+1
  5174  003E9C  0012               	return	
  5175  003E9E                     __end_of___awmod:
  5176                           	opt stack 0
  5177                           tblptru	equ	0xFF8
  5178                           tblptrh	equ	0xFF7
  5179                           tblptrl	equ	0xFF6
  5180                           tablat	equ	0xFF5
  5181                           prodh	equ	0xFF4
  5182                           prodl	equ	0xFF3
  5183                           postinc0	equ	0xFEE
  5184                           wreg	equ	0xFE8
  5185                           postdec1	equ	0xFE5
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           postdec2	equ	0xFDD
  5190                           fsr2h	equ	0xFDA
  5191                           fsr2l	equ	0xFD9
  5192                           status	equ	0xFD8
  5193                           
  5194 ;; *************** function ___awdiv *****************
  5195 ;; Defined at:
  5196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
  5197 ;; Parameters:    Size  Location     Type
  5198 ;;  dividend        2   23[COMRAM] int 
  5199 ;;  divisor         2   25[COMRAM] int 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  quotient        2   29[COMRAM] int 
  5202 ;;  sign            1   28[COMRAM] unsigned char 
  5203 ;;  counter         1   27[COMRAM] unsigned char 
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  2   23[COMRAM] int 
  5206 ;; Registers used:
  5207 ;;		wreg, status,2, status,0
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5213 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;Total ram usage:        8 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    3
  5220 ;; This function calls:
  5221 ;;		Nothing
  5222 ;; This function is called by:
  5223 ;;		_fround
  5224 ;;		_scale
  5225 ;;		_sprintf
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text7
  5230  003C30                     __ptext7:
  5231                           	opt stack 0
  5232  003C30                     ___awdiv:
  5233                           	opt stack 25
  5234                           
  5235                           ;incstack = 0
  5236  003C30  0E00               	movlw	0
  5237  003C32  6E1D               	movwf	___awdiv@sign,c
  5238  003C34  AE1B               	btfss	___awdiv@divisor+1,7,c
  5239  003C36  D006               	goto	l5015
  5240  003C38  6C1A               	negf	___awdiv@divisor,c
  5241  003C3A  1E1B               	comf	___awdiv@divisor+1,f,c
  5242  003C3C  B0D8               	btfsc	status,0,c
  5243  003C3E  2A1B               	incf	___awdiv@divisor+1,f,c
  5244  003C40  0E01               	movlw	1
  5245  003C42  6E1D               	movwf	___awdiv@sign,c
  5246  003C44                     l5015:
  5247  003C44  AE19               	btfss	___awdiv@dividend+1,7,c
  5248  003C46  D006               	goto	l5021
  5249  003C48  6C18               	negf	___awdiv@dividend,c
  5250  003C4A  1E19               	comf	___awdiv@dividend+1,f,c
  5251  003C4C  B0D8               	btfsc	status,0,c
  5252  003C4E  2A19               	incf	___awdiv@dividend+1,f,c
  5253  003C50  0E01               	movlw	1
  5254  003C52  1A1D               	xorwf	___awdiv@sign,f,c
  5255  003C54                     l5021:
  5256  003C54  0E00               	movlw	0
  5257  003C56  6E1F               	movwf	___awdiv@quotient+1,c
  5258  003C58  0E00               	movlw	0
  5259  003C5A  6E1E               	movwf	___awdiv@quotient,c
  5260  003C5C  501A               	movf	___awdiv@divisor,w,c
  5261  003C5E  101B               	iorwf	___awdiv@divisor+1,w,c
  5262  003C60  B4D8               	btfsc	status,2,c
  5263  003C62  D01C               	goto	l5043
  5264  003C64  0E01               	movlw	1
  5265  003C66  6E1C               	movwf	___awdiv@counter,c
  5266  003C68  D004               	goto	l5029
  5267  003C6A                     l5027:
  5268  003C6A  90D8               	bcf	status,0,c
  5269  003C6C  361A               	rlcf	___awdiv@divisor,f,c
  5270  003C6E  361B               	rlcf	___awdiv@divisor+1,f,c
  5271  003C70  2A1C               	incf	___awdiv@counter,f,c
  5272  003C72                     l5029:
  5273  003C72  AE1B               	btfss	___awdiv@divisor+1,7,c
  5274  003C74  D7FA               	goto	l5027
  5275  003C76                     l5031:
  5276  003C76  90D8               	bcf	status,0,c
  5277  003C78  361E               	rlcf	___awdiv@quotient,f,c
  5278  003C7A  361F               	rlcf	___awdiv@quotient+1,f,c
  5279  003C7C  501A               	movf	___awdiv@divisor,w,c
  5280  003C7E  5C18               	subwf	___awdiv@dividend,w,c
  5281  003C80  501B               	movf	___awdiv@divisor+1,w,c
  5282  003C82  5819               	subwfb	___awdiv@dividend+1,w,c
  5283  003C84  A0D8               	btfss	status,0,c
  5284  003C86  D005               	goto	l5039
  5285  003C88  501A               	movf	___awdiv@divisor,w,c
  5286  003C8A  5E18               	subwf	___awdiv@dividend,f,c
  5287  003C8C  501B               	movf	___awdiv@divisor+1,w,c
  5288  003C8E  5A19               	subwfb	___awdiv@dividend+1,f,c
  5289  003C90  801E               	bsf	___awdiv@quotient,0,c
  5290  003C92                     l5039:
  5291  003C92  90D8               	bcf	status,0,c
  5292  003C94  321B               	rrcf	___awdiv@divisor+1,f,c
  5293  003C96  321A               	rrcf	___awdiv@divisor,f,c
  5294  003C98  2E1C               	decfsz	___awdiv@counter,f,c
  5295  003C9A  D7ED               	goto	l5031
  5296  003C9C                     l5043:
  5297  003C9C  501D               	movf	___awdiv@sign,w,c
  5298  003C9E  B4D8               	btfsc	status,2,c
  5299  003CA0  D004               	goto	l5047
  5300  003CA2  6C1E               	negf	___awdiv@quotient,c
  5301  003CA4  1E1F               	comf	___awdiv@quotient+1,f,c
  5302  003CA6  B0D8               	btfsc	status,0,c
  5303  003CA8  2A1F               	incf	___awdiv@quotient+1,f,c
  5304  003CAA                     l5047:
  5305  003CAA  C01E  F018         	movff	___awdiv@quotient,?___awdiv
  5306  003CAE  C01F  F019         	movff	___awdiv@quotient+1,?___awdiv+1
  5307  003CB2  0012               	return	
  5308  003CB4                     __end_of___awdiv:
  5309                           	opt stack 0
  5310                           tblptru	equ	0xFF8
  5311                           tblptrh	equ	0xFF7
  5312                           tblptrl	equ	0xFF6
  5313                           tablat	equ	0xFF5
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           postinc0	equ	0xFEE
  5317                           wreg	equ	0xFE8
  5318                           postdec1	equ	0xFE5
  5319                           fsr1l	equ	0xFE1
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function __tdiv_to_l_ *****************
  5328 ;; Defined at:
  5329 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdivl.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;  f1              4   23[COMRAM] float 
  5332 ;;  f2              4   27[COMRAM] float 
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;  quot            4   34[COMRAM] unsigned long 
  5335 ;;  exp1            1   39[COMRAM] unsigned char 
  5336 ;;  cntr            1   38[COMRAM] unsigned char 
  5337 ;; Return value:  Size  Location     Type
  5338 ;;                  4   23[COMRAM] unsigned long 
  5339 ;; Registers used:
  5340 ;;		wreg, status,2, status,0
  5341 ;; Tracked objects:
  5342 ;;		On entry : 0/0
  5343 ;;		On exit  : 0/0
  5344 ;;		Unchanged: 0/0
  5345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5346 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5349 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5350 ;;Total ram usage:       17 bytes
  5351 ;; Hardware stack levels used:    1
  5352 ;; Hardware stack levels required when called:    3
  5353 ;; This function calls:
  5354 ;;		Nothing
  5355 ;; This function is called by:
  5356 ;;		_sprintf
  5357 ;; This function uses a non-reentrant model
  5358 ;;
  5359                           
  5360                           	psect	text8
  5361  0034C2                     __ptext8:
  5362                           	opt stack 0
  5363  0034C2                     __tdiv_to_l_:
  5364                           	opt stack 26
  5365                           
  5366                           ;incstack = 0
  5367  0034C2  C01A  F020         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5368  0034C6  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5369  0034C8  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5370  0034CA  3419               	rlcf	__tdiv_to_l_@f1+1,w,c
  5371  0034CC  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5372  0034CE  E301               	bnc	u3391
  5373  0034D0  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5374  0034D2                     u3391:
  5375  0034D2  5020               	movf	??__tdiv_to_l_,w,c
  5376  0034D4  6E28               	movwf	__tdiv_to_l_@exp1,c
  5377  0034D6  5028               	movf	__tdiv_to_l_@exp1,w,c
  5378  0034D8  A4D8               	btfss	status,2,c
  5379  0034DA  D009               	goto	l3515
  5380  0034DC  0E00               	movlw	0
  5381  0034DE  6E18               	movwf	?__tdiv_to_l_,c
  5382  0034E0  0E00               	movlw	0
  5383  0034E2  6E19               	movwf	?__tdiv_to_l_+1,c
  5384  0034E4  0E00               	movlw	0
  5385  0034E6  6E1A               	movwf	?__tdiv_to_l_+2,c
  5386  0034E8  0E00               	movlw	0
  5387  0034EA  6E1B               	movwf	?__tdiv_to_l_+3,c
  5388  0034EC  0012               	return	
  5389  0034EE                     l3515:
  5390  0034EE  C01E  F020         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5391  0034F2  6A21               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5392  0034F4  6A22               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5393  0034F6  341D               	rlcf	__tdiv_to_l_@f2+1,w,c
  5394  0034F8  3620               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5395  0034FA  E301               	bnc	u3411
  5396  0034FC  8021               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5397  0034FE                     u3411:
  5398  0034FE  5020               	movf	??__tdiv_to_l_,w,c
  5399  003500  6E27               	movwf	__tdiv_to_l_@cntr,c
  5400  003502  5027               	movf	__tdiv_to_l_@cntr,w,c
  5401  003504  A4D8               	btfss	status,2,c
  5402  003506  D009               	goto	l3521
  5403  003508  0E00               	movlw	0
  5404  00350A  6E18               	movwf	?__tdiv_to_l_,c
  5405  00350C  0E00               	movlw	0
  5406  00350E  6E19               	movwf	?__tdiv_to_l_+1,c
  5407  003510  0E00               	movlw	0
  5408  003512  6E1A               	movwf	?__tdiv_to_l_+2,c
  5409  003514  0E00               	movlw	0
  5410  003516  6E1B               	movwf	?__tdiv_to_l_+3,c
  5411  003518  0012               	return	
  5412  00351A                     l3521:
  5413  00351A  8E19               	bsf	__tdiv_to_l_@f1+1,7,c
  5414  00351C  0EFF               	movlw	255
  5415  00351E  1618               	andwf	__tdiv_to_l_@f1,f,c
  5416  003520  0EFF               	movlw	255
  5417  003522  1619               	andwf	__tdiv_to_l_@f1+1,f,c
  5418  003524  0E00               	movlw	0
  5419  003526  161A               	andwf	__tdiv_to_l_@f1+2,f,c
  5420  003528  8E1D               	bsf	__tdiv_to_l_@f2+1,7,c
  5421  00352A  0EFF               	movlw	255
  5422  00352C  161C               	andwf	__tdiv_to_l_@f2,f,c
  5423  00352E  0EFF               	movlw	255
  5424  003530  161D               	andwf	__tdiv_to_l_@f2+1,f,c
  5425  003532  0E00               	movlw	0
  5426  003534  161E               	andwf	__tdiv_to_l_@f2+2,f,c
  5427  003536  0E00               	movlw	0
  5428  003538  6E23               	movwf	__tdiv_to_l_@quot,c
  5429  00353A  0E00               	movlw	0
  5430  00353C  6E24               	movwf	__tdiv_to_l_@quot+1,c
  5431  00353E  0E00               	movlw	0
  5432  003540  6E25               	movwf	__tdiv_to_l_@quot+2,c
  5433  003542  0E00               	movlw	0
  5434  003544  6E26               	movwf	__tdiv_to_l_@quot+3,c
  5435  003546  0E7F               	movlw	127
  5436  003548  5E28               	subwf	__tdiv_to_l_@exp1,f,c
  5437  00354A  5027               	movf	__tdiv_to_l_@cntr,w,c
  5438  00354C  0F98               	addlw	152
  5439  00354E  5E28               	subwf	__tdiv_to_l_@exp1,f,c
  5440  003550  0E18               	movlw	24
  5441  003552  6E27               	movwf	__tdiv_to_l_@cntr,c
  5442  003554                     l819:
  5443  003554  90D8               	bcf	status,0,c
  5444  003556  3623               	rlcf	__tdiv_to_l_@quot,f,c
  5445  003558  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
  5446  00355A  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
  5447  00355C  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
  5448  00355E  501C               	movf	__tdiv_to_l_@f2,w,c
  5449  003560  5C18               	subwf	__tdiv_to_l_@f1,w,c
  5450  003562  501D               	movf	__tdiv_to_l_@f2+1,w,c
  5451  003564  5819               	subwfb	__tdiv_to_l_@f1+1,w,c
  5452  003566  501E               	movf	__tdiv_to_l_@f2+2,w,c
  5453  003568  581A               	subwfb	__tdiv_to_l_@f1+2,w,c
  5454  00356A  A0D8               	btfss	status,0,c
  5455  00356C  D007               	goto	l820
  5456  00356E  501C               	movf	__tdiv_to_l_@f2,w,c
  5457  003570  5E18               	subwf	__tdiv_to_l_@f1,f,c
  5458  003572  501D               	movf	__tdiv_to_l_@f2+1,w,c
  5459  003574  5A19               	subwfb	__tdiv_to_l_@f1+1,f,c
  5460  003576  501E               	movf	__tdiv_to_l_@f2+2,w,c
  5461  003578  5A1A               	subwfb	__tdiv_to_l_@f1+2,f,c
  5462  00357A  8023               	bsf	__tdiv_to_l_@quot,0,c
  5463  00357C                     l820:
  5464  00357C  90D8               	bcf	status,0,c
  5465  00357E  3618               	rlcf	__tdiv_to_l_@f1,f,c
  5466  003580  3619               	rlcf	__tdiv_to_l_@f1+1,f,c
  5467  003582  361A               	rlcf	__tdiv_to_l_@f1+2,f,c
  5468  003584  2E27               	decfsz	__tdiv_to_l_@cntr,f,c
  5469  003586  D7E6               	goto	l819
  5470  003588  AE28               	btfss	__tdiv_to_l_@exp1,7,c
  5471  00358A  D016               	goto	l3555
  5472  00358C  5028               	movf	__tdiv_to_l_@exp1,w,c
  5473  00358E  0A80               	xorlw	128
  5474  003590  0F97               	addlw	151
  5475  003592  B0D8               	btfsc	status,0,c
  5476  003594  D009               	goto	l3551
  5477  003596  0E00               	movlw	0
  5478  003598  6E18               	movwf	?__tdiv_to_l_,c
  5479  00359A  0E00               	movlw	0
  5480  00359C  6E19               	movwf	?__tdiv_to_l_+1,c
  5481  00359E  0E00               	movlw	0
  5482  0035A0  6E1A               	movwf	?__tdiv_to_l_+2,c
  5483  0035A2  0E00               	movlw	0
  5484  0035A4  6E1B               	movwf	?__tdiv_to_l_+3,c
  5485  0035A6  0012               	return	
  5486  0035A8                     l3551:
  5487  0035A8  90D8               	bcf	status,0,c
  5488  0035AA  3226               	rrcf	__tdiv_to_l_@quot+3,f,c
  5489  0035AC  3225               	rrcf	__tdiv_to_l_@quot+2,f,c
  5490  0035AE  3224               	rrcf	__tdiv_to_l_@quot+1,f,c
  5491  0035B0  3223               	rrcf	__tdiv_to_l_@quot,f,c
  5492  0035B2  3E28               	incfsz	__tdiv_to_l_@exp1,f,c
  5493  0035B4  D7F9               	goto	l3551
  5494  0035B6  D015               	goto	l826
  5495  0035B8                     l3555:
  5496  0035B8  0E17               	movlw	23
  5497  0035BA  6428               	cpfsgt	__tdiv_to_l_@exp1,c
  5498  0035BC  D00F               	goto	l3563
  5499  0035BE  0E00               	movlw	0
  5500  0035C0  6E18               	movwf	?__tdiv_to_l_,c
  5501  0035C2  0E00               	movlw	0
  5502  0035C4  6E19               	movwf	?__tdiv_to_l_+1,c
  5503  0035C6  0E00               	movlw	0
  5504  0035C8  6E1A               	movwf	?__tdiv_to_l_+2,c
  5505  0035CA  0E00               	movlw	0
  5506  0035CC  6E1B               	movwf	?__tdiv_to_l_+3,c
  5507  0035CE  0012               	return	
  5508  0035D0                     l3561:
  5509  0035D0  90D8               	bcf	status,0,c
  5510  0035D2  3623               	rlcf	__tdiv_to_l_@quot,f,c
  5511  0035D4  3624               	rlcf	__tdiv_to_l_@quot+1,f,c
  5512  0035D6  3625               	rlcf	__tdiv_to_l_@quot+2,f,c
  5513  0035D8  3626               	rlcf	__tdiv_to_l_@quot+3,f,c
  5514  0035DA  0628               	decf	__tdiv_to_l_@exp1,f,c
  5515  0035DC                     l3563:
  5516  0035DC  5028               	movf	__tdiv_to_l_@exp1,w,c
  5517  0035DE  A4D8               	btfss	status,2,c
  5518  0035E0  D7F7               	goto	l3561
  5519  0035E2                     l826:
  5520  0035E2  C023  F018         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5521  0035E6  C024  F019         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5522  0035EA  C025  F01A         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5523  0035EE  C026  F01B         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5524  0035F2  0012               	return		;funcret
  5525  0035F4                     __end_of__tdiv_to_l_:
  5526                           	opt stack 0
  5527                           tblptru	equ	0xFF8
  5528                           tblptrh	equ	0xFF7
  5529                           tblptrl	equ	0xFF6
  5530                           tablat	equ	0xFF5
  5531                           prodh	equ	0xFF4
  5532                           prodl	equ	0xFF3
  5533                           postinc0	equ	0xFEE
  5534                           wreg	equ	0xFE8
  5535                           postdec1	equ	0xFE5
  5536                           fsr1l	equ	0xFE1
  5537                           indf2	equ	0xFDF
  5538                           postinc2	equ	0xFDE
  5539                           postdec2	equ	0xFDD
  5540                           fsr2h	equ	0xFDA
  5541                           fsr2l	equ	0xFD9
  5542                           status	equ	0xFD8
  5543                           
  5544 ;; *************** function __div_to_l_ *****************
  5545 ;; Defined at:
  5546 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fldivl.c"
  5547 ;; Parameters:    Size  Location     Type
  5548 ;;  f1              4   23[COMRAM] unsigned long 
  5549 ;;  f2              4   27[COMRAM] unsigned long 
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  quot            4   31[COMRAM] unsigned long 
  5552 ;;  exp1            1   36[COMRAM] unsigned char 
  5553 ;;  cntr            1   35[COMRAM] unsigned char 
  5554 ;; Return value:  Size  Location     Type
  5555 ;;                  4   23[COMRAM] unsigned long 
  5556 ;; Registers used:
  5557 ;;		wreg, status,2, status,0
  5558 ;; Tracked objects:
  5559 ;;		On entry : 0/0
  5560 ;;		On exit  : 0/0
  5561 ;;		Unchanged: 0/0
  5562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5563 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5564 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;Total ram usage:       14 bytes
  5568 ;; Hardware stack levels used:    1
  5569 ;; Hardware stack levels required when called:    3
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_sprintf
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           	psect	text9
  5578  0035F4                     __ptext9:
  5579                           	opt stack 0
  5580  0035F4                     __div_to_l_:
  5581                           	opt stack 26
  5582                           
  5583                           ;incstack = 0
  5584  0035F4  341A               	rlcf	__div_to_l_@f1+2,w,c
  5585  0035F6  341B               	rlcf	__div_to_l_@f1+3,w,c
  5586  0035F8  6E25               	movwf	__div_to_l_@exp1,c
  5587  0035FA  5025               	movf	__div_to_l_@exp1,w,c
  5588  0035FC  A4D8               	btfss	status,2,c
  5589  0035FE  D009               	goto	l3571
  5590  003600  0E00               	movlw	0
  5591  003602  6E18               	movwf	?__div_to_l_,c
  5592  003604  0E00               	movlw	0
  5593  003606  6E19               	movwf	?__div_to_l_+1,c
  5594  003608  0E00               	movlw	0
  5595  00360A  6E1A               	movwf	?__div_to_l_+2,c
  5596  00360C  0E00               	movlw	0
  5597  00360E  6E1B               	movwf	?__div_to_l_+3,c
  5598  003610  0012               	return	
  5599  003612                     l3571:
  5600  003612  341E               	rlcf	__div_to_l_@f2+2,w,c
  5601  003614  341F               	rlcf	__div_to_l_@f2+3,w,c
  5602  003616  6E24               	movwf	__div_to_l_@cntr,c
  5603  003618  5024               	movf	__div_to_l_@cntr,w,c
  5604  00361A  A4D8               	btfss	status,2,c
  5605  00361C  D009               	goto	l3577
  5606  00361E  0E00               	movlw	0
  5607  003620  6E18               	movwf	?__div_to_l_,c
  5608  003622  0E00               	movlw	0
  5609  003624  6E19               	movwf	?__div_to_l_+1,c
  5610  003626  0E00               	movlw	0
  5611  003628  6E1A               	movwf	?__div_to_l_+2,c
  5612  00362A  0E00               	movlw	0
  5613  00362C  6E1B               	movwf	?__div_to_l_+3,c
  5614  00362E  0012               	return	
  5615  003630                     l3577:
  5616  003630  8E1A               	bsf	__div_to_l_@f1+2,7,c
  5617  003632  0EFF               	movlw	255
  5618  003634  1618               	andwf	__div_to_l_@f1,f,c
  5619  003636  0EFF               	movlw	255
  5620  003638  1619               	andwf	__div_to_l_@f1+1,f,c
  5621  00363A  0EFF               	movlw	255
  5622  00363C  161A               	andwf	__div_to_l_@f1+2,f,c
  5623  00363E  0E00               	movlw	0
  5624  003640  161B               	andwf	__div_to_l_@f1+3,f,c
  5625  003642  8E1E               	bsf	__div_to_l_@f2+2,7,c
  5626  003644  0EFF               	movlw	255
  5627  003646  161C               	andwf	__div_to_l_@f2,f,c
  5628  003648  0EFF               	movlw	255
  5629  00364A  161D               	andwf	__div_to_l_@f2+1,f,c
  5630  00364C  0EFF               	movlw	255
  5631  00364E  161E               	andwf	__div_to_l_@f2+2,f,c
  5632  003650  0E00               	movlw	0
  5633  003652  161F               	andwf	__div_to_l_@f2+3,f,c
  5634  003654  0E00               	movlw	0
  5635  003656  6E20               	movwf	__div_to_l_@quot,c
  5636  003658  0E00               	movlw	0
  5637  00365A  6E21               	movwf	__div_to_l_@quot+1,c
  5638  00365C  0E00               	movlw	0
  5639  00365E  6E22               	movwf	__div_to_l_@quot+2,c
  5640  003660  0E00               	movlw	0
  5641  003662  6E23               	movwf	__div_to_l_@quot+3,c
  5642  003664  0E7F               	movlw	127
  5643  003666  5E25               	subwf	__div_to_l_@exp1,f,c
  5644  003668  5024               	movf	__div_to_l_@cntr,w,c
  5645  00366A  0FA0               	addlw	160
  5646  00366C  5E25               	subwf	__div_to_l_@exp1,f,c
  5647  00366E  0E20               	movlw	32
  5648  003670  6E24               	movwf	__div_to_l_@cntr,c
  5649  003672                     l3591:
  5650  003672  90D8               	bcf	status,0,c
  5651  003674  3620               	rlcf	__div_to_l_@quot,f,c
  5652  003676  3621               	rlcf	__div_to_l_@quot+1,f,c
  5653  003678  3622               	rlcf	__div_to_l_@quot+2,f,c
  5654  00367A  3623               	rlcf	__div_to_l_@quot+3,f,c
  5655  00367C  501C               	movf	__div_to_l_@f2,w,c
  5656  00367E  5C18               	subwf	__div_to_l_@f1,w,c
  5657  003680  501D               	movf	__div_to_l_@f2+1,w,c
  5658  003682  5819               	subwfb	__div_to_l_@f1+1,w,c
  5659  003684  501E               	movf	__div_to_l_@f2+2,w,c
  5660  003686  581A               	subwfb	__div_to_l_@f1+2,w,c
  5661  003688  501F               	movf	__div_to_l_@f2+3,w,c
  5662  00368A  581B               	subwfb	__div_to_l_@f1+3,w,c
  5663  00368C  A0D8               	btfss	status,0,c
  5664  00368E  D009               	goto	l3599
  5665  003690  501C               	movf	__div_to_l_@f2,w,c
  5666  003692  5E18               	subwf	__div_to_l_@f1,f,c
  5667  003694  501D               	movf	__div_to_l_@f2+1,w,c
  5668  003696  5A19               	subwfb	__div_to_l_@f1+1,f,c
  5669  003698  501E               	movf	__div_to_l_@f2+2,w,c
  5670  00369A  5A1A               	subwfb	__div_to_l_@f1+2,f,c
  5671  00369C  501F               	movf	__div_to_l_@f2+3,w,c
  5672  00369E  5A1B               	subwfb	__div_to_l_@f1+3,f,c
  5673  0036A0  8020               	bsf	__div_to_l_@quot,0,c
  5674  0036A2                     l3599:
  5675  0036A2  90D8               	bcf	status,0,c
  5676  0036A4  3618               	rlcf	__div_to_l_@f1,f,c
  5677  0036A6  3619               	rlcf	__div_to_l_@f1+1,f,c
  5678  0036A8  361A               	rlcf	__div_to_l_@f1+2,f,c
  5679  0036AA  361B               	rlcf	__div_to_l_@f1+3,f,c
  5680  0036AC  2E24               	decfsz	__div_to_l_@cntr,f,c
  5681  0036AE  D7E1               	goto	l3591
  5682  0036B0  AE25               	btfss	__div_to_l_@exp1,7,c
  5683  0036B2  D016               	goto	l3615
  5684  0036B4  5025               	movf	__div_to_l_@exp1,w,c
  5685  0036B6  0A80               	xorlw	128
  5686  0036B8  0F9F               	addlw	159
  5687  0036BA  B0D8               	btfsc	status,0,c
  5688  0036BC  D009               	goto	l3611
  5689  0036BE  0E00               	movlw	0
  5690  0036C0  6E18               	movwf	?__div_to_l_,c
  5691  0036C2  0E00               	movlw	0
  5692  0036C4  6E19               	movwf	?__div_to_l_+1,c
  5693  0036C6  0E00               	movlw	0
  5694  0036C8  6E1A               	movwf	?__div_to_l_+2,c
  5695  0036CA  0E00               	movlw	0
  5696  0036CC  6E1B               	movwf	?__div_to_l_+3,c
  5697  0036CE  0012               	return	
  5698  0036D0                     l3611:
  5699  0036D0  90D8               	bcf	status,0,c
  5700  0036D2  3223               	rrcf	__div_to_l_@quot+3,f,c
  5701  0036D4  3222               	rrcf	__div_to_l_@quot+2,f,c
  5702  0036D6  3221               	rrcf	__div_to_l_@quot+1,f,c
  5703  0036D8  3220               	rrcf	__div_to_l_@quot,f,c
  5704  0036DA  3E25               	incfsz	__div_to_l_@exp1,f,c
  5705  0036DC  D7F9               	goto	l3611
  5706  0036DE  D015               	goto	l697
  5707  0036E0                     l3615:
  5708  0036E0  0E1F               	movlw	31
  5709  0036E2  6425               	cpfsgt	__div_to_l_@exp1,c
  5710  0036E4  D00F               	goto	l3623
  5711  0036E6  0E00               	movlw	0
  5712  0036E8  6E18               	movwf	?__div_to_l_,c
  5713  0036EA  0E00               	movlw	0
  5714  0036EC  6E19               	movwf	?__div_to_l_+1,c
  5715  0036EE  0E00               	movlw	0
  5716  0036F0  6E1A               	movwf	?__div_to_l_+2,c
  5717  0036F2  0E00               	movlw	0
  5718  0036F4  6E1B               	movwf	?__div_to_l_+3,c
  5719  0036F6  0012               	return	
  5720  0036F8                     l3621:
  5721  0036F8  90D8               	bcf	status,0,c
  5722  0036FA  3620               	rlcf	__div_to_l_@quot,f,c
  5723  0036FC  3621               	rlcf	__div_to_l_@quot+1,f,c
  5724  0036FE  3622               	rlcf	__div_to_l_@quot+2,f,c
  5725  003700  3623               	rlcf	__div_to_l_@quot+3,f,c
  5726  003702  0625               	decf	__div_to_l_@exp1,f,c
  5727  003704                     l3623:
  5728  003704  5025               	movf	__div_to_l_@exp1,w,c
  5729  003706  A4D8               	btfss	status,2,c
  5730  003708  D7F7               	goto	l3621
  5731  00370A                     l697:
  5732  00370A  C020  F018         	movff	__div_to_l_@quot,?__div_to_l_
  5733  00370E  C021  F019         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  5734  003712  C022  F01A         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  5735  003716  C023  F01B         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  5736  00371A  0012               	return		;funcret
  5737  00371C                     __end_of__div_to_l_:
  5738                           	opt stack 0
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           postdec1	equ	0xFE5
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function ___llmod *****************
  5757 ;; Defined at:
  5758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\llmod.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;  dividend        4   36[COMRAM] unsigned long 
  5761 ;;  divisor         4   40[COMRAM] unsigned long 
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;  counter         1   44[COMRAM] unsigned char 
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  4   36[COMRAM] unsigned long 
  5766 ;; Registers used:
  5767 ;;		wreg, status,2, status,0
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5773 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5777 ;;Total ram usage:        9 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    3
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_sprintf
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           	psect	text10
  5788  003F0E                     __ptext10:
  5789                           	opt stack 0
  5790  003F0E                     ___llmod:
  5791                           	opt stack 26
  5792                           
  5793                           ;incstack = 0
  5794  003F0E  5029               	movf	___llmod@divisor,w,c
  5795  003F10  102A               	iorwf	___llmod@divisor+1,w,c
  5796  003F12  102B               	iorwf	___llmod@divisor+2,w,c
  5797  003F14  102C               	iorwf	___llmod@divisor+3,w,c
  5798  003F16  B4D8               	btfsc	status,2,c
  5799  003F18  D024               	goto	l911
  5800  003F1A  0E01               	movlw	1
  5801  003F1C  6E2D               	movwf	___llmod@counter,c
  5802  003F1E  D006               	goto	l3891
  5803  003F20                     l3889:
  5804  003F20  90D8               	bcf	status,0,c
  5805  003F22  3629               	rlcf	___llmod@divisor,f,c
  5806  003F24  362A               	rlcf	___llmod@divisor+1,f,c
  5807  003F26  362B               	rlcf	___llmod@divisor+2,f,c
  5808  003F28  362C               	rlcf	___llmod@divisor+3,f,c
  5809  003F2A  2A2D               	incf	___llmod@counter,f,c
  5810  003F2C                     l3891:
  5811  003F2C  AE2C               	btfss	___llmod@divisor+3,7,c
  5812  003F2E  D7F8               	goto	l3889
  5813  003F30                     l3893:
  5814  003F30  5029               	movf	___llmod@divisor,w,c
  5815  003F32  5C25               	subwf	___llmod@dividend,w,c
  5816  003F34  502A               	movf	___llmod@divisor+1,w,c
  5817  003F36  5826               	subwfb	___llmod@dividend+1,w,c
  5818  003F38  502B               	movf	___llmod@divisor+2,w,c
  5819  003F3A  5827               	subwfb	___llmod@dividend+2,w,c
  5820  003F3C  502C               	movf	___llmod@divisor+3,w,c
  5821  003F3E  5828               	subwfb	___llmod@dividend+3,w,c
  5822  003F40  A0D8               	btfss	status,0,c
  5823  003F42  D008               	goto	l3897
  5824  003F44  5029               	movf	___llmod@divisor,w,c
  5825  003F46  5E25               	subwf	___llmod@dividend,f,c
  5826  003F48  502A               	movf	___llmod@divisor+1,w,c
  5827  003F4A  5A26               	subwfb	___llmod@dividend+1,f,c
  5828  003F4C  502B               	movf	___llmod@divisor+2,w,c
  5829  003F4E  5A27               	subwfb	___llmod@dividend+2,f,c
  5830  003F50  502C               	movf	___llmod@divisor+3,w,c
  5831  003F52  5A28               	subwfb	___llmod@dividend+3,f,c
  5832  003F54                     l3897:
  5833  003F54  90D8               	bcf	status,0,c
  5834  003F56  322C               	rrcf	___llmod@divisor+3,f,c
  5835  003F58  322B               	rrcf	___llmod@divisor+2,f,c
  5836  003F5A  322A               	rrcf	___llmod@divisor+1,f,c
  5837  003F5C  3229               	rrcf	___llmod@divisor,f,c
  5838  003F5E  2E2D               	decfsz	___llmod@counter,f,c
  5839  003F60  D7E7               	goto	l3893
  5840  003F62                     l911:
  5841  003F62  C025  F025         	movff	___llmod@dividend,?___llmod
  5842  003F66  C026  F026         	movff	___llmod@dividend+1,?___llmod+1
  5843  003F6A  C027  F027         	movff	___llmod@dividend+2,?___llmod+2
  5844  003F6E  C028  F028         	movff	___llmod@dividend+3,?___llmod+3
  5845  003F72  0012               	return		;funcret
  5846  003F74                     __end_of___llmod:
  5847                           	opt stack 0
  5848                           tblptru	equ	0xFF8
  5849                           tblptrh	equ	0xFF7
  5850                           tblptrl	equ	0xFF6
  5851                           tablat	equ	0xFF5
  5852                           prodh	equ	0xFF4
  5853                           prodl	equ	0xFF3
  5854                           postinc0	equ	0xFEE
  5855                           wreg	equ	0xFE8
  5856                           postdec1	equ	0xFE5
  5857                           fsr1l	equ	0xFE1
  5858                           indf2	equ	0xFDF
  5859                           postinc2	equ	0xFDE
  5860                           postdec2	equ	0xFDD
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function ___lldiv *****************
  5866 ;; Defined at:
  5867 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lldiv.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;  dividend        4   23[COMRAM] unsigned long 
  5870 ;;  divisor         4   27[COMRAM] unsigned long 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  quotient        4   31[COMRAM] unsigned long 
  5873 ;;  counter         1   35[COMRAM] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  4   23[COMRAM] unsigned long 
  5876 ;; Registers used:
  5877 ;;		wreg, status,2, status,0
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5883 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5886 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;Total ram usage:       13 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; Hardware stack levels required when called:    3
  5890 ;; This function calls:
  5891 ;;		Nothing
  5892 ;; This function is called by:
  5893 ;;		_sprintf
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text11
  5898  003CB4                     __ptext11:
  5899                           	opt stack 0
  5900  003CB4                     ___lldiv:
  5901                           	opt stack 26
  5902                           
  5903                           ;incstack = 0
  5904  003CB4  0E00               	movlw	0
  5905  003CB6  6E20               	movwf	___lldiv@quotient,c
  5906  003CB8  0E00               	movlw	0
  5907  003CBA  6E21               	movwf	___lldiv@quotient+1,c
  5908  003CBC  0E00               	movlw	0
  5909  003CBE  6E22               	movwf	___lldiv@quotient+2,c
  5910  003CC0  0E00               	movlw	0
  5911  003CC2  6E23               	movwf	___lldiv@quotient+3,c
  5912  003CC4  501C               	movf	___lldiv@divisor,w,c
  5913  003CC6  101D               	iorwf	___lldiv@divisor+1,w,c
  5914  003CC8  101E               	iorwf	___lldiv@divisor+2,w,c
  5915  003CCA  101F               	iorwf	___lldiv@divisor+3,w,c
  5916  003CCC  B4D8               	btfsc	status,2,c
  5917  003CCE  D02A               	goto	l901
  5918  003CD0  0E01               	movlw	1
  5919  003CD2  6E24               	movwf	___lldiv@counter,c
  5920  003CD4  D006               	goto	l3871
  5921  003CD6                     l3869:
  5922  003CD6  90D8               	bcf	status,0,c
  5923  003CD8  361C               	rlcf	___lldiv@divisor,f,c
  5924  003CDA  361D               	rlcf	___lldiv@divisor+1,f,c
  5925  003CDC  361E               	rlcf	___lldiv@divisor+2,f,c
  5926  003CDE  361F               	rlcf	___lldiv@divisor+3,f,c
  5927  003CE0  2A24               	incf	___lldiv@counter,f,c
  5928  003CE2                     l3871:
  5929  003CE2  AE1F               	btfss	___lldiv@divisor+3,7,c
  5930  003CE4  D7F8               	goto	l3869
  5931  003CE6                     l3873:
  5932  003CE6  90D8               	bcf	status,0,c
  5933  003CE8  3620               	rlcf	___lldiv@quotient,f,c
  5934  003CEA  3621               	rlcf	___lldiv@quotient+1,f,c
  5935  003CEC  3622               	rlcf	___lldiv@quotient+2,f,c
  5936  003CEE  3623               	rlcf	___lldiv@quotient+3,f,c
  5937  003CF0  501C               	movf	___lldiv@divisor,w,c
  5938  003CF2  5C18               	subwf	___lldiv@dividend,w,c
  5939  003CF4  501D               	movf	___lldiv@divisor+1,w,c
  5940  003CF6  5819               	subwfb	___lldiv@dividend+1,w,c
  5941  003CF8  501E               	movf	___lldiv@divisor+2,w,c
  5942  003CFA  581A               	subwfb	___lldiv@dividend+2,w,c
  5943  003CFC  501F               	movf	___lldiv@divisor+3,w,c
  5944  003CFE  581B               	subwfb	___lldiv@dividend+3,w,c
  5945  003D00  A0D8               	btfss	status,0,c
  5946  003D02  D009               	goto	l3881
  5947  003D04  501C               	movf	___lldiv@divisor,w,c
  5948  003D06  5E18               	subwf	___lldiv@dividend,f,c
  5949  003D08  501D               	movf	___lldiv@divisor+1,w,c
  5950  003D0A  5A19               	subwfb	___lldiv@dividend+1,f,c
  5951  003D0C  501E               	movf	___lldiv@divisor+2,w,c
  5952  003D0E  5A1A               	subwfb	___lldiv@dividend+2,f,c
  5953  003D10  501F               	movf	___lldiv@divisor+3,w,c
  5954  003D12  5A1B               	subwfb	___lldiv@dividend+3,f,c
  5955  003D14  8020               	bsf	___lldiv@quotient,0,c
  5956  003D16                     l3881:
  5957  003D16  90D8               	bcf	status,0,c
  5958  003D18  321F               	rrcf	___lldiv@divisor+3,f,c
  5959  003D1A  321E               	rrcf	___lldiv@divisor+2,f,c
  5960  003D1C  321D               	rrcf	___lldiv@divisor+1,f,c
  5961  003D1E  321C               	rrcf	___lldiv@divisor,f,c
  5962  003D20  2E24               	decfsz	___lldiv@counter,f,c
  5963  003D22  D7E1               	goto	l3873
  5964  003D24                     l901:
  5965  003D24  C020  F018         	movff	___lldiv@quotient,?___lldiv
  5966  003D28  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  5967  003D2C  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  5968  003D30  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  5969  003D34  0012               	return		;funcret
  5970  003D36                     __end_of___lldiv:
  5971                           	opt stack 0
  5972                           tblptru	equ	0xFF8
  5973                           tblptrh	equ	0xFF7
  5974                           tblptrl	equ	0xFF6
  5975                           tablat	equ	0xFF5
  5976                           prodh	equ	0xFF4
  5977                           prodl	equ	0xFF3
  5978                           postinc0	equ	0xFEE
  5979                           wreg	equ	0xFE8
  5980                           postdec1	equ	0xFE5
  5981                           fsr1l	equ	0xFE1
  5982                           indf2	equ	0xFDF
  5983                           postinc2	equ	0xFDE
  5984                           postdec2	equ	0xFDD
  5985                           fsr2h	equ	0xFDA
  5986                           fsr2l	equ	0xFD9
  5987                           status	equ	0xFD8
  5988                           
  5989 ;; *************** function ___flsub *****************
  5990 ;; Defined at:
  5991 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcadd.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;  b               4   45[BANK0 ] unsigned long 
  5994 ;;  a               4   49[BANK0 ] unsigned long 
  5995 ;; Auto vars:     Size  Location     Type
  5996 ;;		None
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  4   45[BANK0 ] unsigned long 
  5999 ;; Registers used:
  6000 ;;		wreg, status,2, status,0, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6006 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;Total ram usage:        8 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    4
  6013 ;; This function calls:
  6014 ;;		___fladd
  6015 ;; This function is called by:
  6016 ;;		_sprintf
  6017 ;; This function uses a non-reentrant model
  6018 ;;
  6019                           
  6020                           	psect	text12
  6021  0040EC                     __ptext12:
  6022                           	opt stack 0
  6023  0040EC                     ___flsub:
  6024                           	opt stack 25
  6025                           
  6026                           ;incstack = 0
  6027  0040EC  0E00               	movlw	0
  6028  0040EE  0100               	movlb	0	; () banked
  6029  0040F0  1BB1               	xorwf	___flsub@a& (0+255),f,b
  6030  0040F2  0E00               	movlw	0
  6031  0040F4  1BB2               	xorwf	(___flsub@a+1)& (0+255),f,b
  6032  0040F6  0E00               	movlw	0
  6033  0040F8  1BB3               	xorwf	(___flsub@a+2)& (0+255),f,b
  6034  0040FA  0E80               	movlw	128
  6035  0040FC  1BB4               	xorwf	(___flsub@a+3)& (0+255),f,b
  6036                           
  6037                           ; BSR set to: 0
  6038  0040FE  C0AD  F099         	movff	___flsub@b,___fladd@b
  6039  004102  C0AE  F09A         	movff	___flsub@b+1,___fladd@b+1
  6040  004106  C0AF  F09B         	movff	___flsub@b+2,___fladd@b+2
  6041  00410A  C0B0  F09C         	movff	___flsub@b+3,___fladd@b+3
  6042  00410E  C0B1  F09D         	movff	___flsub@a,___fladd@a
  6043  004112  C0B2  F09E         	movff	___flsub@a+1,___fladd@a+1
  6044  004116  C0B3  F09F         	movff	___flsub@a+2,___fladd@a+2
  6045  00411A  C0B4  F0A0         	movff	___flsub@a+3,___fladd@a+3
  6046  00411E  EC4B  F00E         	call	___fladd	;wreg free
  6047  004122  C099  F0AD         	movff	?___fladd,?___flsub
  6048  004126  C09A  F0AE         	movff	?___fladd+1,?___flsub+1
  6049  00412A  C09B  F0AF         	movff	?___fladd+2,?___flsub+2
  6050  00412E  C09C  F0B0         	movff	?___fladd+3,?___flsub+3
  6051  004132  0012               	return	
  6052  004134                     __end_of___flsub:
  6053                           	opt stack 0
  6054                           tblptru	equ	0xFF8
  6055                           tblptrh	equ	0xFF7
  6056                           tblptrl	equ	0xFF6
  6057                           tablat	equ	0xFF5
  6058                           prodh	equ	0xFF4
  6059                           prodl	equ	0xFF3
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1l	equ	0xFE1
  6064                           indf2	equ	0xFDF
  6065                           postinc2	equ	0xFDE
  6066                           postdec2	equ	0xFDD
  6067                           fsr2h	equ	0xFDA
  6068                           fsr2l	equ	0xFD9
  6069                           status	equ	0xFD8
  6070                           
  6071 ;; *************** function ___flneg *****************
  6072 ;; Defined at:
  6073 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\flneg.c"
  6074 ;; Parameters:    Size  Location     Type
  6075 ;;  f1              4   23[COMRAM] unsigned long 
  6076 ;; Auto vars:     Size  Location     Type
  6077 ;;		None
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  4   23[COMRAM] unsigned long 
  6080 ;; Registers used:
  6081 ;;		wreg, status,2, status,0
  6082 ;; Tracked objects:
  6083 ;;		On entry : 0/0
  6084 ;;		On exit  : 0/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;Total ram usage:        4 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    3
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_sprintf
  6098 ;;		_set_pwm1_general
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           	psect	text13
  6103  00426C                     __ptext13:
  6104                           	opt stack 0
  6105  00426C                     ___flneg:
  6106                           	opt stack 26
  6107                           
  6108                           ;incstack = 0
  6109  00426C  5018               	movf	___flneg@f1,w,c
  6110  00426E  1019               	iorwf	___flneg@f1+1,w,c
  6111  004270  101A               	iorwf	___flneg@f1+2,w,c
  6112  004272  101B               	iorwf	___flneg@f1+3,w,c
  6113  004274  B4D8               	btfsc	status,2,c
  6114  004276  D008               	goto	l3799
  6115  004278  0E00               	movlw	0
  6116  00427A  1A18               	xorwf	___flneg@f1,f,c
  6117  00427C  0E00               	movlw	0
  6118  00427E  1A19               	xorwf	___flneg@f1+1,f,c
  6119  004280  0E00               	movlw	0
  6120  004282  1A1A               	xorwf	___flneg@f1+2,f,c
  6121  004284  0E80               	movlw	128
  6122  004286  1A1B               	xorwf	___flneg@f1+3,f,c
  6123  004288                     l3799:
  6124  004288  C018  F018         	movff	___flneg@f1,?___flneg
  6125  00428C  C019  F019         	movff	___flneg@f1+1,?___flneg+1
  6126  004290  C01A  F01A         	movff	___flneg@f1+2,?___flneg+2
  6127  004294  C01B  F01B         	movff	___flneg@f1+3,?___flneg+3
  6128  004298  0012               	return	
  6129  00429A                     __end_of___flneg:
  6130                           	opt stack 0
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           postinc0	equ	0xFEE
  6138                           wreg	equ	0xFE8
  6139                           postdec1	equ	0xFE5
  6140                           fsr1l	equ	0xFE1
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _setupSerial *****************
  6149 ;; Defined at:
  6150 ;;		line 3 in file "my_ser.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;		None
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  dummy           1   23[COMRAM] unsigned char 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  1    wreg      void 
  6157 ;; Registers used:
  6158 ;;		wreg, status,2
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;Total ram usage:        1 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    3
  6171 ;; This function calls:
  6172 ;;		Nothing
  6173 ;; This function is called by:
  6174 ;;		_main
  6175 ;; This function uses a non-reentrant model
  6176 ;;
  6177                           
  6178                           	psect	text14
  6179  00439A                     __ptext14:
  6180                           	opt stack 0
  6181  00439A                     _setupSerial:
  6182                           	opt stack 27
  6183                           
  6184                           ;my_ser.c: 4: unsigned char dummy;
  6185                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
  6186                           
  6187                           ;incstack = 0
  6188  00439A  96B8               	bcf	4024,3,c	;volatile
  6189                           
  6190                           ;my_ser.c: 6: TXSTA = 0;
  6191  00439C  0E00               	movlw	0
  6192  00439E  6EAC               	movwf	4012,c	;volatile
  6193                           
  6194                           ;my_ser.c: 7: SPBRG = 25;
  6195  0043A0  0E19               	movlw	25
  6196  0043A2  6EAF               	movwf	4015,c	;volatile
  6197                           
  6198                           ;my_ser.c: 8: SPBRGH = 0;
  6199  0043A4  0E00               	movlw	0
  6200  0043A6  6EB0               	movwf	4016,c	;volatile
  6201                           
  6202                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  6203  0043A8  84AC               	bsf	4012,2,c	;volatile
  6204                           
  6205                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  6206  0043AA  8AAC               	bsf	4012,5,c	;volatile
  6207                           
  6208                           ;my_ser.c: 12: RCSTA = 0;
  6209  0043AC  0E00               	movlw	0
  6210  0043AE  6EAB               	movwf	4011,c	;volatile
  6211                           
  6212                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
  6213  0043B0  88AB               	bsf	4011,4,c	;volatile
  6214                           
  6215                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
  6216  0043B2  8EAB               	bsf	4011,7,c	;volatile
  6217                           
  6218                           ;my_ser.c: 15: ;
  6219                           ;my_ser.c: 16: dummy = RCREG;
  6220  0043B4  CFAE F018          	movff	4014,setupSerial@dummy	;volatile
  6221                           
  6222                           ;my_ser.c: 17: dummy = RCREG;
  6223  0043B8  CFAE F018          	movff	4014,setupSerial@dummy	;volatile
  6224  0043BC  0012               	return	
  6225  0043BE                     __end_of_setupSerial:
  6226                           	opt stack 0
  6227                           tblptru	equ	0xFF8
  6228                           tblptrh	equ	0xFF7
  6229                           tblptrl	equ	0xFF6
  6230                           tablat	equ	0xFF5
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           postinc0	equ	0xFEE
  6234                           wreg	equ	0xFE8
  6235                           postdec1	equ	0xFE5
  6236                           fsr1l	equ	0xFE1
  6237                           indf2	equ	0xFDF
  6238                           postinc2	equ	0xFDE
  6239                           postdec2	equ	0xFDD
  6240                           fsr2h	equ	0xFDA
  6241                           fsr2l	equ	0xFD9
  6242                           status	equ	0xFD8
  6243                           
  6244 ;; *************** function _setupPorts *****************
  6245 ;; Defined at:
  6246 ;;		line 88 in file "pwm_asl.c"
  6247 ;; Parameters:    Size  Location     Type
  6248 ;;		None
  6249 ;; Auto vars:     Size  Location     Type
  6250 ;;		None
  6251 ;; Return value:  Size  Location     Type
  6252 ;;                  1    wreg      void 
  6253 ;; Registers used:
  6254 ;;		wreg, status,2
  6255 ;; Tracked objects:
  6256 ;;		On entry : 0/0
  6257 ;;		On exit  : 0/0
  6258 ;;		Unchanged: 0/0
  6259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6264 ;;Total ram usage:        0 bytes
  6265 ;; Hardware stack levels used:    1
  6266 ;; Hardware stack levels required when called:    3
  6267 ;; This function calls:
  6268 ;;		Nothing
  6269 ;; This function is called by:
  6270 ;;		_main
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274                           	psect	text15
  6275  004446                     __ptext15:
  6276                           	opt stack 0
  6277  004446                     _setupPorts:
  6278                           	opt stack 27
  6279                           
  6280                           ;pwm_asl.c: 89: ADCON0 = 0;
  6281                           
  6282                           ;incstack = 0
  6283  004446  0E00               	movlw	0
  6284  004448  6EC2               	movwf	4034,c	;volatile
  6285                           
  6286                           ;pwm_asl.c: 90: ADCON1 = 0b00001100;
  6287  00444A  0E0C               	movlw	12
  6288  00444C  6EC1               	movwf	4033,c	;volatile
  6289                           
  6290                           ;pwm_asl.c: 91: TRISB = 0xF1;
  6291  00444E  0EF1               	movlw	241
  6292  004450  6E93               	movwf	3987,c	;volatile
  6293                           
  6294                           ;pwm_asl.c: 92: TRISC = 0x80;
  6295  004452  0E80               	movlw	128
  6296  004454  6E94               	movwf	3988,c	;volatile
  6297                           
  6298                           ;pwm_asl.c: 93: TRISA = 0xCF;
  6299  004456  0ECF               	movlw	207
  6300  004458  6E92               	movwf	3986,c	;volatile
  6301                           
  6302                           ;pwm_asl.c: 94: TRISD = 0x00;
  6303  00445A  0E00               	movlw	0
  6304  00445C  6E95               	movwf	3989,c	;volatile
  6305                           
  6306                           ;pwm_asl.c: 95: TRISE = 0x00;
  6307  00445E  0E00               	movlw	0
  6308  004460  6E96               	movwf	3990,c	;volatile
  6309  004462  0012               	return		;funcret
  6310  004464                     __end_of_setupPorts:
  6311                           	opt stack 0
  6312                           tblptru	equ	0xFF8
  6313                           tblptrh	equ	0xFF7
  6314                           tblptrl	equ	0xFF6
  6315                           tablat	equ	0xFF5
  6316                           prodh	equ	0xFF4
  6317                           prodl	equ	0xFF3
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           indf2	equ	0xFDF
  6323                           postinc2	equ	0xFDE
  6324                           postdec2	equ	0xFDD
  6325                           fsr2h	equ	0xFDA
  6326                           fsr2l	equ	0xFD9
  6327                           status	equ	0xFD8
  6328                           
  6329 ;; *************** function _set_pwm1_raw *****************
  6330 ;; Defined at:
  6331 ;;		line 14 in file "my_pwm.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  raw_value       2   23[COMRAM] unsigned int 
  6334 ;; Auto vars:     Size  Location     Type
  6335 ;;		None
  6336 ;; Return value:  Size  Location     Type
  6337 ;;                  1    wreg      void 
  6338 ;; Registers used:
  6339 ;;		wreg, status,2, status,0
  6340 ;; Tracked objects:
  6341 ;;		On entry : 0/0
  6342 ;;		On exit  : 0/0
  6343 ;;		Unchanged: 0/0
  6344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6347 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6348 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;Total ram usage:        4 bytes
  6350 ;; Hardware stack levels used:    1
  6351 ;; Hardware stack levels required when called:    3
  6352 ;; This function calls:
  6353 ;;		Nothing
  6354 ;; This function is called by:
  6355 ;;		_main
  6356 ;;		_set_pwm1_percent
  6357 ;;		_set_pwm1_voltage
  6358 ;;		_set_pwm1_general
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text16
  6363  00429A                     __ptext16:
  6364                           	opt stack 0
  6365  00429A                     _set_pwm1_raw:
  6366                           	opt stack 27
  6367                           
  6368                           ;my_pwm.c: 16: CCPR1L = (raw_value >> 2) & 0x00FF;
  6369                           
  6370                           ;incstack = 0
  6371  00429A  C018  F01A         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  6372  00429E  C019  F01B         	movff	set_pwm1_raw@raw_value+1,??_set_pwm1_raw+1
  6373  0042A2  90D8               	bcf	status,0,c
  6374  0042A4  321B               	rrcf	??_set_pwm1_raw+1,f,c
  6375  0042A6  321A               	rrcf	??_set_pwm1_raw,f,c
  6376  0042A8  90D8               	bcf	status,0,c
  6377  0042AA  321B               	rrcf	??_set_pwm1_raw+1,f,c
  6378  0042AC  321A               	rrcf	??_set_pwm1_raw,f,c
  6379  0042AE  501A               	movf	??_set_pwm1_raw,w,c
  6380  0042B0  6EBE               	movwf	4030,c	;volatile
  6381                           
  6382                           ;my_pwm.c: 17: CCP1CONbits.DC1B = raw_value & 0x0003;
  6383  0042B2  C018  F01A         	movff	set_pwm1_raw@raw_value,??_set_pwm1_raw
  6384  0042B6  0E03               	movlw	3
  6385  0042B8  161A               	andwf	??_set_pwm1_raw,f,c
  6386  0042BA  3A1A               	swapf	??_set_pwm1_raw,f,c
  6387  0042BC  50BD               	movf	4029,w,c	;volatile
  6388  0042BE  181A               	xorwf	??_set_pwm1_raw,w,c
  6389  0042C0  0BCF               	andlw	-49
  6390  0042C2  181A               	xorwf	??_set_pwm1_raw,w,c
  6391  0042C4  6EBD               	movwf	4029,c	;volatile
  6392  0042C6  0012               	return		;funcret
  6393  0042C8                     __end_of_set_pwm1_raw:
  6394                           	opt stack 0
  6395                           tblptru	equ	0xFF8
  6396                           tblptrh	equ	0xFF7
  6397                           tblptrl	equ	0xFF6
  6398                           tablat	equ	0xFF5
  6399                           prodh	equ	0xFF4
  6400                           prodl	equ	0xFF3
  6401                           postinc0	equ	0xFEE
  6402                           wreg	equ	0xFE8
  6403                           postdec1	equ	0xFE5
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           postinc2	equ	0xFDE
  6407                           postdec2	equ	0xFDD
  6408                           fsr2h	equ	0xFDA
  6409                           fsr2l	equ	0xFD9
  6410                           status	equ	0xFD8
  6411                           
  6412 ;; *************** function _send_string_no_lib *****************
  6413 ;; Defined at:
  6414 ;;		line 47 in file "my_ser.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;  p               2   24[COMRAM] PTR unsigned char 
  6417 ;;		 -> STR_6(9), 
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;		None
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  1    wreg      void 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6424 ;; Tracked objects:
  6425 ;;		On entry : 0/0
  6426 ;;		On exit  : 0/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6429 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;Total ram usage:        2 bytes
  6434 ;; Hardware stack levels used:    1
  6435 ;; Hardware stack levels required when called:    4
  6436 ;; This function calls:
  6437 ;;		_send_byte_no_lib
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           	psect	text17
  6444  004324                     __ptext17:
  6445                           	opt stack 0
  6446  004324                     _send_string_no_lib:
  6447                           	opt stack 26
  6448                           
  6449                           ;my_ser.c: 48: while (*p) {
  6450                           
  6451                           ;incstack = 0
  6452  004324  D00A               	goto	l4433
  6453  004326                     l4429:
  6454                           
  6455                           ;my_ser.c: 49: send_byte_no_lib(*p);
  6456  004326  C019  FFF6         	movff	send_string_no_lib@p,tblptrl
  6457  00432A  C01A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  6458  00432E                     	if	0	;tblptru may be non-zero
  6459  00432E                     	endif
  6460  00432E                     	if	0	;tblptru may be non-zero
  6461  00432E                     	endif
  6462  00432E  0008               	tblrd		*
  6463  004330  50F5               	movf	tablat,w,c
  6464  004332  EC3E  F022         	call	_send_byte_no_lib
  6465                           
  6466                           ;my_ser.c: 50: p++;
  6467  004336  4A19               	infsnz	send_string_no_lib@p,f,c
  6468  004338  2A1A               	incf	send_string_no_lib@p+1,f,c
  6469  00433A                     l4433:
  6470  00433A  C019  FFF6         	movff	send_string_no_lib@p,tblptrl
  6471  00433E  C01A  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  6472  004342                     	if	0	;tblptru may be non-zero
  6473  004342                     	endif
  6474  004342                     	if	0	;tblptru may be non-zero
  6475  004342                     	endif
  6476  004342  0008               	tblrd		*
  6477  004344  50F5               	movf	tablat,w,c
  6478  004346  0900               	iorlw	0
  6479  004348  B4D8               	btfsc	status,2,c
  6480  00434A  0012               	return	
  6481  00434C  D7EC               	goto	l4429
  6482  00434E                     __end_of_send_string_no_lib:
  6483                           	opt stack 0
  6484                           tblptru	equ	0xFF8
  6485                           tblptrh	equ	0xFF7
  6486                           tblptrl	equ	0xFF6
  6487                           tablat	equ	0xFF5
  6488                           prodh	equ	0xFF4
  6489                           prodl	equ	0xFF3
  6490                           postinc0	equ	0xFEE
  6491                           wreg	equ	0xFE8
  6492                           postdec1	equ	0xFE5
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _send_byte_no_lib *****************
  6502 ;; Defined at:
  6503 ;;		line 39 in file "my_ser.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  c               1    wreg     unsigned char 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  c               1   23[COMRAM] unsigned char 
  6508 ;; Return value:  Size  Location     Type
  6509 ;;                  1    wreg      void 
  6510 ;; Registers used:
  6511 ;;		wreg
  6512 ;; Tracked objects:
  6513 ;;		On entry : 0/0
  6514 ;;		On exit  : 0/0
  6515 ;;		Unchanged: 0/0
  6516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;Total ram usage:        1 bytes
  6522 ;; Hardware stack levels used:    1
  6523 ;; Hardware stack levels required when called:    3
  6524 ;; This function calls:
  6525 ;;		Nothing
  6526 ;; This function is called by:
  6527 ;;		_send_string_no_lib
  6528 ;; This function uses a non-reentrant model
  6529 ;;
  6530                           
  6531                           	psect	text18
  6532  00447C                     __ptext18:
  6533                           	opt stack 0
  6534  00447C                     _send_byte_no_lib:
  6535                           	opt stack 26
  6536                           
  6537                           ;incstack = 0
  6538                           ;send_byte_no_lib@c stored from wreg
  6539  00447C  6E18               	movwf	send_byte_no_lib@c,c
  6540                           
  6541                           ;my_ser.c: 40: while (!TXSTAbits.TRMT)
  6542  00447E  D001               	goto	l288
  6543  004480                     l289:
  6544  004480  0004               	clrwdt		;# 
  6545  004482                     l288:
  6546  004482  A2AC               	btfss	4012,1,c	;volatile
  6547  004484  D7FD               	goto	l289
  6548                           
  6549                           ;my_ser.c: 43: }
  6550                           ;my_ser.c: 44: TXREG = c;
  6551  004486  C018  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  6552  00448A  0012               	return		;funcret
  6553  00448C                     __end_of_send_byte_no_lib:
  6554                           	opt stack 0
  6555                           tblptru	equ	0xFF8
  6556                           tblptrh	equ	0xFF7
  6557                           tblptrl	equ	0xFF6
  6558                           tablat	equ	0xFF5
  6559                           prodh	equ	0xFF4
  6560                           prodl	equ	0xFF3
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           postdec1	equ	0xFE5
  6564                           fsr1l	equ	0xFE1
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572 ;; *************** function _read_byte_no_lib *****************
  6573 ;; Defined at:
  6574 ;;		line 33 in file "my_ser.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;		None
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  c               1   23[COMRAM] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      unsigned char 
  6581 ;; Registers used:
  6582 ;;		wreg, status,2
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;Total ram usage:        1 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    3
  6595 ;; This function calls:
  6596 ;;		Nothing
  6597 ;; This function is called by:
  6598 ;;		_main
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text19
  6603  0044BC                     __ptext19:
  6604                           	opt stack 0
  6605  0044BC                     _read_byte_no_lib:
  6606                           	opt stack 27
  6607                           
  6608                           ;my_ser.c: 34: unsigned char c;
  6609                           ;my_ser.c: 35: c = RCREG;
  6610                           
  6611                           ;incstack = 0
  6612  0044BC  CFAE F018          	movff	4014,read_byte_no_lib@c	;volatile
  6613                           
  6614                           ;my_ser.c: 36: return c;
  6615  0044C0  5018               	movf	read_byte_no_lib@c,w,c
  6616  0044C2  0012               	return	
  6617  0044C4                     __end_of_read_byte_no_lib:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           postinc0	equ	0xFEE
  6626                           wreg	equ	0xFE8
  6627                           postdec1	equ	0xFE5
  6628                           fsr1l	equ	0xFE1
  6629                           indf2	equ	0xFDF
  6630                           postinc2	equ	0xFDE
  6631                           postdec2	equ	0xFDD
  6632                           fsr2h	equ	0xFDA
  6633                           fsr2l	equ	0xFD9
  6634                           status	equ	0xFD8
  6635                           
  6636 ;; *************** function _read_adc_voltage *****************
  6637 ;; Defined at:
  6638 ;;		line 49 in file "my_adc.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;  channel         1    wreg     unsigned char 
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;  channel         1   33[BANK0 ] unsigned char 
  6643 ;;  voltage         4   29[BANK0 ] float 
  6644 ;;  raw_value       2   34[BANK0 ] int 
  6645 ;; Return value:  Size  Location     Type
  6646 ;;                  4   25[BANK0 ] float 
  6647 ;; Registers used:
  6648 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6649 ;; Tracked objects:
  6650 ;;		On entry : 0/0
  6651 ;;		On exit  : 0/0
  6652 ;;		Unchanged: 0/0
  6653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6654 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6655 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6657 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6658 ;;Total ram usage:       11 bytes
  6659 ;; Hardware stack levels used:    1
  6660 ;; Hardware stack levels required when called:    4
  6661 ;; This function calls:
  6662 ;;		___fldiv
  6663 ;;		___wmul
  6664 ;;		___xxtofl
  6665 ;;		_read_adc_raw_no_lib
  6666 ;; This function is called by:
  6667 ;;		_main
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           	psect	text20
  6672  003BA8                     __ptext20:
  6673                           	opt stack 0
  6674  003BA8                     _read_adc_voltage:
  6675                           	opt stack 26
  6676                           
  6677                           ;incstack = 0
  6678                           ;read_adc_voltage@channel stored from wreg
  6679  003BA8  0100               	movlb	0	; () banked
  6680  003BAA  6FA1               	movwf	read_adc_voltage@channel& (0+255),b
  6681                           
  6682                           ;my_adc.c: 50: int raw_value;
  6683                           ;my_adc.c: 51: float voltage;
  6684                           ;my_adc.c: 52: raw_value = read_adc_raw_no_lib(channel);
  6685  003BAC  0100               	movlb	0	; () banked
  6686  003BAE  51A1               	movf	read_adc_voltage@channel& (0+255),w,b
  6687  003BB0  EC00  F021         	call	_read_adc_raw_no_lib
  6688  003BB4  C018  F0A2         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  6689  003BB8  C019  F0A3         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  6690                           
  6691                           ;my_adc.c: 53: voltage = (raw_value * 5) / 1023.0;
  6692  003BBC  C0A2  F018         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  6693  003BC0  C0A3  F019         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  6694  003BC4  0E00               	movlw	0
  6695  003BC6  6E1B               	movwf	___wmul@multiplicand+1,c
  6696  003BC8  0E05               	movlw	5
  6697  003BCA  6E1A               	movwf	___wmul@multiplicand,c
  6698  003BCC  ECA7  F021         	call	___wmul	;wreg free
  6699  003BD0  C018  F043         	movff	?___wmul,___xxtofl@val
  6700  003BD4  C019  F044         	movff	?___wmul+1,___xxtofl@val+1
  6701  003BD8  0E00               	movlw	0
  6702  003BDA  BE44               	btfsc	___xxtofl@val+1,7,c
  6703  003BDC  0EFF               	movlw	-1
  6704  003BDE  6E45               	movwf	___xxtofl@val+2,c
  6705  003BE0  6E46               	movwf	___xxtofl@val+3,c
  6706  003BE2  0E01               	movlw	1
  6707  003BE4  ECB9  F019         	call	___xxtofl
  6708  003BE8  C043  F080         	movff	?___xxtofl,___fldiv@b
  6709  003BEC  C044  F081         	movff	?___xxtofl+1,___fldiv@b+1
  6710  003BF0  C045  F082         	movff	?___xxtofl+2,___fldiv@b+2
  6711  003BF4  C046  F083         	movff	?___xxtofl+3,___fldiv@b+3
  6712  003BF8  0E00               	movlw	0
  6713  003BFA  0100               	movlb	0	; () banked
  6714  003BFC  6F84               	movwf	___fldiv@a& (0+255),b
  6715  003BFE  0EC0               	movlw	192
  6716  003C00  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  6717  003C02  0E7F               	movlw	127
  6718  003C04  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  6719  003C06  0E44               	movlw	68
  6720  003C08  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  6721  003C0A  ECF0  F014         	call	___fldiv	;wreg free
  6722  003C0E  C080  F09D         	movff	?___fldiv,read_adc_voltage@voltage
  6723  003C12  C081  F09E         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  6724  003C16  C082  F09F         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  6725  003C1A  C083  F0A0         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  6726                           
  6727                           ;my_adc.c: 54: return voltage;
  6728  003C1E  C09D  F099         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  6729  003C22  C09E  F09A         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  6730  003C26  C09F  F09B         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  6731  003C2A  C0A0  F09C         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  6732  003C2E  0012               	return	
  6733  003C30                     __end_of_read_adc_voltage:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           postinc0	equ	0xFEE
  6742                           wreg	equ	0xFE8
  6743                           postdec1	equ	0xFE5
  6744                           fsr1l	equ	0xFE1
  6745                           indf2	equ	0xFDF
  6746                           postinc2	equ	0xFDE
  6747                           postdec2	equ	0xFDD
  6748                           fsr2h	equ	0xFDA
  6749                           fsr2l	equ	0xFD9
  6750                           status	equ	0xFD8
  6751                           
  6752 ;; *************** function _read_adc_temp *****************
  6753 ;; Defined at:
  6754 ;;		line 62 in file "my_adc.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  channel         1    wreg     unsigned char 
  6757 ;; Auto vars:     Size  Location     Type
  6758 ;;  channel         1   53[BANK0 ] unsigned char 
  6759 ;;  temp            4   49[BANK0 ] float 
  6760 ;;  raw_value       2   54[BANK0 ] int 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  4   45[BANK0 ] float 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:       11 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    4
  6777 ;; This function calls:
  6778 ;;		___fladd
  6779 ;;		___fldiv
  6780 ;;		___wmul
  6781 ;;		___xxtofl
  6782 ;;		_read_adc_raw_no_lib
  6783 ;; This function is called by:
  6784 ;;		_main
  6785 ;; This function uses a non-reentrant model
  6786 ;;
  6787                           
  6788                           	psect	text21
  6789  003AFA                     __ptext21:
  6790                           	opt stack 0
  6791  003AFA                     _read_adc_temp:
  6792                           	opt stack 26
  6793                           
  6794                           ;incstack = 0
  6795                           ;read_adc_temp@channel stored from wreg
  6796  003AFA  0100               	movlb	0	; () banked
  6797  003AFC  6FB5               	movwf	read_adc_temp@channel& (0+255),b
  6798                           
  6799                           ;my_adc.c: 63: int raw_value;
  6800                           ;my_adc.c: 64: raw_value = read_adc_raw_no_lib(channel);
  6801  003AFE  0100               	movlb	0	; () banked
  6802  003B00  51B5               	movf	read_adc_temp@channel& (0+255),w,b
  6803  003B02  EC00  F021         	call	_read_adc_raw_no_lib
  6804  003B06  C018  F0B6         	movff	?_read_adc_raw_no_lib,read_adc_temp@raw_value
  6805  003B0A  C019  F0B7         	movff	?_read_adc_raw_no_lib+1,read_adc_temp@raw_value+1
  6806                           
  6807                           ;my_adc.c: 67: float temp ;
  6808                           ;my_adc.c: 68: temp = (raw_value * ( -10 - (50)) /1023.0 + (50));
  6809  003B0E  0E00               	movlw	0
  6810  003B10  0100               	movlb	0	; () banked
  6811  003B12  6F84               	movwf	___fldiv@a& (0+255),b
  6812  003B14  0EC0               	movlw	192
  6813  003B16  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  6814  003B18  0E7F               	movlw	127
  6815  003B1A  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  6816  003B1C  0E44               	movlw	68
  6817  003B1E  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  6818  003B20  C0B6  F018         	movff	read_adc_temp@raw_value,___wmul@multiplier
  6819  003B24  C0B7  F019         	movff	read_adc_temp@raw_value+1,___wmul@multiplier+1
  6820  003B28  0EFF               	movlw	255
  6821  003B2A  6E1B               	movwf	___wmul@multiplicand+1,c
  6822  003B2C  0EC4               	movlw	196
  6823  003B2E  6E1A               	movwf	___wmul@multiplicand,c
  6824  003B30  ECA7  F021         	call	___wmul	;wreg free
  6825  003B34  C018  F043         	movff	?___wmul,___xxtofl@val
  6826  003B38  C019  F044         	movff	?___wmul+1,___xxtofl@val+1
  6827  003B3C  0E00               	movlw	0
  6828  003B3E  BE44               	btfsc	___xxtofl@val+1,7,c
  6829  003B40  0EFF               	movlw	-1
  6830  003B42  6E45               	movwf	___xxtofl@val+2,c
  6831  003B44  6E46               	movwf	___xxtofl@val+3,c
  6832  003B46  0E01               	movlw	1
  6833  003B48  ECB9  F019         	call	___xxtofl
  6834  003B4C  C043  F080         	movff	?___xxtofl,___fldiv@b
  6835  003B50  C044  F081         	movff	?___xxtofl+1,___fldiv@b+1
  6836  003B54  C045  F082         	movff	?___xxtofl+2,___fldiv@b+2
  6837  003B58  C046  F083         	movff	?___xxtofl+3,___fldiv@b+3
  6838  003B5C  ECF0  F014         	call	___fldiv	;wreg free
  6839  003B60  C080  F099         	movff	?___fldiv,___fladd@b
  6840  003B64  C081  F09A         	movff	?___fldiv+1,___fladd@b+1
  6841  003B68  C082  F09B         	movff	?___fldiv+2,___fladd@b+2
  6842  003B6C  C083  F09C         	movff	?___fldiv+3,___fladd@b+3
  6843  003B70  0E00               	movlw	0
  6844  003B72  0100               	movlb	0	; () banked
  6845  003B74  6F9D               	movwf	___fladd@a& (0+255),b
  6846  003B76  0E00               	movlw	0
  6847  003B78  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  6848  003B7A  0E48               	movlw	72
  6849  003B7C  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  6850  003B7E  0E42               	movlw	66
  6851  003B80  6FA0               	movwf	(___fladd@a+3)& (0+255),b
  6852  003B82  EC4B  F00E         	call	___fladd	;wreg free
  6853  003B86  C099  F0B1         	movff	?___fladd,read_adc_temp@temp
  6854  003B8A  C09A  F0B2         	movff	?___fladd+1,read_adc_temp@temp+1
  6855  003B8E  C09B  F0B3         	movff	?___fladd+2,read_adc_temp@temp+2
  6856  003B92  C09C  F0B4         	movff	?___fladd+3,read_adc_temp@temp+3
  6857                           
  6858                           ;my_adc.c: 69: return temp;
  6859  003B96  C0B1  F0AD         	movff	read_adc_temp@temp,?_read_adc_temp
  6860  003B9A  C0B2  F0AE         	movff	read_adc_temp@temp+1,?_read_adc_temp+1
  6861  003B9E  C0B3  F0AF         	movff	read_adc_temp@temp+2,?_read_adc_temp+2
  6862  003BA2  C0B4  F0B0         	movff	read_adc_temp@temp+3,?_read_adc_temp+3
  6863  003BA6  0012               	return	
  6864  003BA8                     __end_of_read_adc_temp:
  6865                           	opt stack 0
  6866                           tblptru	equ	0xFF8
  6867                           tblptrh	equ	0xFF7
  6868                           tblptrl	equ	0xFF6
  6869                           tablat	equ	0xFF5
  6870                           prodh	equ	0xFF4
  6871                           prodl	equ	0xFF3
  6872                           postinc0	equ	0xFEE
  6873                           wreg	equ	0xFE8
  6874                           postdec1	equ	0xFE5
  6875                           fsr1l	equ	0xFE1
  6876                           indf2	equ	0xFDF
  6877                           postinc2	equ	0xFDE
  6878                           postdec2	equ	0xFDD
  6879                           fsr2h	equ	0xFDA
  6880                           fsr2l	equ	0xFD9
  6881                           status	equ	0xFD8
  6882                           
  6883 ;; *************** function _read_adc_raw_no_lib *****************
  6884 ;; Defined at:
  6885 ;;		line 32 in file "my_adc.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  channel         1    wreg     unsigned char 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  channel         1   27[COMRAM] unsigned char 
  6890 ;;  raw_value       2   28[COMRAM] int 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  2   23[COMRAM] int 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6901 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;Total ram usage:        7 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    3
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_main
  6911 ;;		_read_adc_voltage
  6912 ;;		_read_adc_temp
  6913 ;; This function uses a non-reentrant model
  6914 ;;
  6915                           
  6916                           	psect	text22
  6917  004200                     __ptext22:
  6918                           	opt stack 0
  6919  004200                     _read_adc_raw_no_lib:
  6920                           	opt stack 26
  6921                           
  6922                           ;incstack = 0
  6923                           ;read_adc_raw_no_lib@channel stored from wreg
  6924  004200  6E1C               	movwf	read_adc_raw_no_lib@channel,c
  6925                           
  6926                           ;my_adc.c: 33: int raw_value;
  6927                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  6928  004202  C01C  F01A         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  6929  004206  461A               	rlncf	??_read_adc_raw_no_lib,f,c
  6930  004208  461A               	rlncf	??_read_adc_raw_no_lib,f,c
  6931  00420A  50C2               	movf	4034,w,c	;volatile
  6932  00420C  181A               	xorwf	??_read_adc_raw_no_lib,w,c
  6933  00420E  0BC3               	andlw	-61
  6934  004210  181A               	xorwf	??_read_adc_raw_no_lib,w,c
  6935  004212  6EC2               	movwf	4034,c	;volatile
  6936                           
  6937                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  6938  004214  82C2               	bsf	4034,1,c	;volatile
  6939  004216                     l210:
  6940  004216  B2C2               	btfsc	4034,1,c	;volatile
  6941  004218  D7FE               	goto	l210
  6942                           
  6943                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  6944  00421A  50C3               	movf	4035,w,c	;volatile
  6945  00421C  CFC4 F01A          	movff	4036,??_read_adc_raw_no_lib	;volatile
  6946  004220  6A1B               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  6947  004222  C01A  F01B         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  6948  004226  6A1A               	clrf	??_read_adc_raw_no_lib,c
  6949  004228  101A               	iorwf	??_read_adc_raw_no_lib,w,c
  6950  00422A  6E1D               	movwf	read_adc_raw_no_lib@raw_value,c
  6951  00422C  501B               	movf	??_read_adc_raw_no_lib+1,w,c
  6952  00422E  6E1E               	movwf	read_adc_raw_no_lib@raw_value+1,c
  6953                           
  6954                           ;my_adc.c: 45: return raw_value;
  6955  004230  C01D  F018         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  6956  004234  C01E  F019         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  6957  004238  0012               	return	
  6958  00423A                     __end_of_read_adc_raw_no_lib:
  6959                           	opt stack 0
  6960                           tblptru	equ	0xFF8
  6961                           tblptrh	equ	0xFF7
  6962                           tblptrl	equ	0xFF6
  6963                           tablat	equ	0xFF5
  6964                           prodh	equ	0xFF4
  6965                           prodl	equ	0xFF3
  6966                           postinc0	equ	0xFEE
  6967                           wreg	equ	0xFE8
  6968                           postdec1	equ	0xFE5
  6969                           fsr1l	equ	0xFE1
  6970                           indf2	equ	0xFDF
  6971                           postinc2	equ	0xFDE
  6972                           postdec2	equ	0xFDD
  6973                           fsr2h	equ	0xFDA
  6974                           fsr2l	equ	0xFD9
  6975                           status	equ	0xFD8
  6976                           
  6977 ;; *************** function ___wmul *****************
  6978 ;; Defined at:
  6979 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  6980 ;; Parameters:    Size  Location     Type
  6981 ;;  multiplier      2   23[COMRAM] unsigned int 
  6982 ;;  multiplicand    2   25[COMRAM] unsigned int 
  6983 ;; Auto vars:     Size  Location     Type
  6984 ;;  product         2   27[COMRAM] unsigned int 
  6985 ;; Return value:  Size  Location     Type
  6986 ;;                  2   23[COMRAM] unsigned int 
  6987 ;; Registers used:
  6988 ;;		wreg, status,2, status,0, prodl, prodh
  6989 ;; Tracked objects:
  6990 ;;		On entry : 0/0
  6991 ;;		On exit  : 0/0
  6992 ;;		Unchanged: 0/0
  6993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;Total ram usage:        6 bytes
  6999 ;; Hardware stack levels used:    1
  7000 ;; Hardware stack levels required when called:    3
  7001 ;; This function calls:
  7002 ;;		Nothing
  7003 ;; This function is called by:
  7004 ;;		_read_adc_voltage
  7005 ;;		_read_adc_temp
  7006 ;;		_sprintf
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text23
  7011  00434E                     __ptext23:
  7012                           	opt stack 0
  7013  00434E                     ___wmul:
  7014                           	opt stack 26
  7015                           
  7016                           ;incstack = 0
  7017  00434E  5018               	movf	___wmul@multiplier,w,c
  7018  004350  021A               	mulwf	___wmul@multiplicand,c
  7019  004352  CFF3 F01C          	movff	prodl,___wmul@product
  7020  004356  CFF4 F01D          	movff	prodh,___wmul@product+1
  7021  00435A  5018               	movf	___wmul@multiplier,w,c
  7022  00435C  021B               	mulwf	___wmul@multiplicand+1,c
  7023  00435E  50F3               	movf	prodl,w,c
  7024  004360  261D               	addwf	___wmul@product+1,f,c
  7025  004362  5019               	movf	___wmul@multiplier+1,w,c
  7026  004364  021A               	mulwf	___wmul@multiplicand,c
  7027  004366  50F3               	movf	prodl,w,c
  7028  004368  261D               	addwf	___wmul@product+1,f,c
  7029  00436A  C01C  F018         	movff	___wmul@product,?___wmul
  7030  00436E  C01D  F019         	movff	___wmul@product+1,?___wmul+1
  7031  004372  0012               	return	
  7032  004374                     __end_of___wmul:
  7033                           	opt stack 0
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           postinc0	equ	0xFEE
  7041                           wreg	equ	0xFE8
  7042                           postdec1	equ	0xFE5
  7043                           fsr1l	equ	0xFE1
  7044                           indf2	equ	0xFDF
  7045                           postinc2	equ	0xFDE
  7046                           postdec2	equ	0xFDD
  7047                           fsr2h	equ	0xFDA
  7048                           fsr2l	equ	0xFD9
  7049                           status	equ	0xFD8
  7050                           
  7051 ;; *************** function ___fldiv *****************
  7052 ;; Defined at:
  7053 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcdiv.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;  b               4    0[BANK0 ] unsigned int 
  7056 ;;  a               4    4[BANK0 ] unsigned int 
  7057 ;; Auto vars:     Size  Location     Type
  7058 ;;  grs             4   19[BANK0 ] unsigned long 
  7059 ;;  rem             4   13[BANK0 ] unsigned long 
  7060 ;;  new_exp         2   17[BANK0 ] int 
  7061 ;;  aexp            1   24[BANK0 ] unsigned char 
  7062 ;;  bexp            1   23[BANK0 ] unsigned char 
  7063 ;;  sign            1   12[BANK0 ] unsigned char 
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  4    0[BANK0 ] unsigned char 
  7066 ;; Registers used:
  7067 ;;		wreg, status,2, status,0
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7073 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7074 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7075 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7076 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7077 ;;Total ram usage:       25 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    3
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_read_adc_voltage
  7084 ;;		_read_adc_temp
  7085 ;;		_set_pwm1_percent
  7086 ;;		_set_pwm1_voltage
  7087 ;;		_set_pwm1_general
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text24
  7092  0029E0                     __ptext24:
  7093                           	opt stack 0
  7094  0029E0                     ___fldiv:
  7095                           	opt stack 26
  7096                           
  7097                           ;incstack = 0
  7098  0029E0  0100               	movlb	0	; () banked
  7099  0029E2  5183               	movf	(___fldiv@b+3)& (0+255),w,b
  7100  0029E4  0B80               	andlw	128
  7101  0029E6  0100               	movlb	0	; () banked
  7102  0029E8  6F8C               	movwf	___fldiv@sign& (0+255),b
  7103  0029EA  0100               	movlb	0	; () banked
  7104  0029EC  5183               	movf	(___fldiv@b+3)& (0+255),w,b
  7105  0029EE  2583               	addwf	(___fldiv@b+3)& (0+255),w,b
  7106  0029F0  0100               	movlb	0	; () banked
  7107  0029F2  6F97               	movwf	___fldiv@bexp& (0+255),b
  7108                           
  7109                           ; BSR set to: 0
  7110  0029F4  0100               	movlb	0	; () banked
  7111  0029F6  AF82               	btfss	(___fldiv@b+2)& (0+255),7,b
  7112  0029F8  D002               	goto	l5169
  7113                           
  7114                           ; BSR set to: 0
  7115  0029FA  0100               	movlb	0	; () banked
  7116  0029FC  8197               	bsf	___fldiv@bexp& (0+255),0,b
  7117  0029FE                     l5169:
  7118                           
  7119                           ; BSR set to: 0
  7120  0029FE  0100               	movlb	0	; () banked
  7121  002A00  5197               	movf	___fldiv@bexp& (0+255),w,b
  7122  002A02  0100               	movlb	0	; () banked
  7123  002A04  B4D8               	btfsc	status,2,c
  7124  002A06  D012               	goto	l5179
  7125                           
  7126                           ; BSR set to: 0
  7127  002A08  0100               	movlb	0	; () banked
  7128  002A0A  2997               	incf	___fldiv@bexp& (0+255),w,b
  7129  002A0C  A4D8               	btfss	status,2,c
  7130  002A0E  D009               	goto	l5175
  7131                           
  7132                           ; BSR set to: 0
  7133  002A10  0E00               	movlw	0
  7134  002A12  0100               	movlb	0	; () banked
  7135  002A14  6F80               	movwf	___fldiv@b& (0+255),b
  7136  002A16  0E00               	movlw	0
  7137  002A18  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7138  002A1A  0E00               	movlw	0
  7139  002A1C  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7140  002A1E  0E00               	movlw	0
  7141  002A20  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7142  002A22                     l5175:
  7143                           
  7144                           ; BSR set to: 0
  7145  002A22  0100               	movlb	0	; () banked
  7146  002A24  8F82               	bsf	(___fldiv@b+2)& (0+255),7,b
  7147                           
  7148                           ; BSR set to: 0
  7149  002A26  0E00               	movlw	0
  7150  002A28  0100               	movlb	0	; () banked
  7151  002A2A  D008               	goto	L8
  7152  002A2C                     l5179:
  7153                           
  7154                           ; BSR set to: 0
  7155  002A2C  0E00               	movlw	0
  7156  002A2E  0100               	movlb	0	; () banked
  7157  002A30  6F80               	movwf	___fldiv@b& (0+255),b
  7158  002A32  0E00               	movlw	0
  7159  002A34  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7160  002A36  0E00               	movlw	0
  7161  002A38  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7162  002A3A  0E00               	movlw	0
  7163  002A3C                     L8:
  7164  002A3C  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7165                           
  7166                           ; BSR set to: 0
  7167                           
  7168                           ; BSR set to: 0
  7169  002A3E  0100               	movlb	0	; () banked
  7170  002A40  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7171  002A42  0B80               	andlw	128
  7172  002A44  0100               	movlb	0	; () banked
  7173  002A46  1B8C               	xorwf	___fldiv@sign& (0+255),f,b
  7174                           
  7175                           ; BSR set to: 0
  7176  002A48  0100               	movlb	0	; () banked
  7177  002A4A  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7178  002A4C  2587               	addwf	(___fldiv@a+3)& (0+255),w,b
  7179  002A4E  0100               	movlb	0	; () banked
  7180  002A50  6F98               	movwf	___fldiv@aexp& (0+255),b
  7181                           
  7182                           ; BSR set to: 0
  7183  002A52  0100               	movlb	0	; () banked
  7184  002A54  AF86               	btfss	(___fldiv@a+2)& (0+255),7,b
  7185  002A56  D002               	goto	l5189
  7186                           
  7187                           ; BSR set to: 0
  7188  002A58  0100               	movlb	0	; () banked
  7189  002A5A  8198               	bsf	___fldiv@aexp& (0+255),0,b
  7190  002A5C                     l5189:
  7191                           
  7192                           ; BSR set to: 0
  7193  002A5C  0100               	movlb	0	; () banked
  7194  002A5E  5198               	movf	___fldiv@aexp& (0+255),w,b
  7195  002A60  0100               	movlb	0	; () banked
  7196  002A62  B4D8               	btfsc	status,2,c
  7197  002A64  D012               	goto	l5199
  7198                           
  7199                           ; BSR set to: 0
  7200  002A66  0100               	movlb	0	; () banked
  7201  002A68  2998               	incf	___fldiv@aexp& (0+255),w,b
  7202  002A6A  A4D8               	btfss	status,2,c
  7203  002A6C  D009               	goto	l5195
  7204                           
  7205                           ; BSR set to: 0
  7206  002A6E  0E00               	movlw	0
  7207  002A70  0100               	movlb	0	; () banked
  7208  002A72  6F84               	movwf	___fldiv@a& (0+255),b
  7209  002A74  0E00               	movlw	0
  7210  002A76  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  7211  002A78  0E00               	movlw	0
  7212  002A7A  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  7213  002A7C  0E00               	movlw	0
  7214  002A7E  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  7215  002A80                     l5195:
  7216                           
  7217                           ; BSR set to: 0
  7218  002A80  0100               	movlb	0	; () banked
  7219  002A82  8F86               	bsf	(___fldiv@a+2)& (0+255),7,b
  7220                           
  7221                           ; BSR set to: 0
  7222  002A84  0E00               	movlw	0
  7223  002A86  0100               	movlb	0	; () banked
  7224  002A88  D008               	goto	L9
  7225  002A8A                     l5199:
  7226                           
  7227                           ; BSR set to: 0
  7228  002A8A  0E00               	movlw	0
  7229  002A8C  0100               	movlb	0	; () banked
  7230  002A8E  6F84               	movwf	___fldiv@a& (0+255),b
  7231  002A90  0E00               	movlw	0
  7232  002A92  6F85               	movwf	(___fldiv@a+1)& (0+255),b
  7233  002A94  0E00               	movlw	0
  7234  002A96  6F86               	movwf	(___fldiv@a+2)& (0+255),b
  7235  002A98  0E00               	movlw	0
  7236  002A9A                     L9:
  7237  002A9A  6F87               	movwf	(___fldiv@a+3)& (0+255),b
  7238                           
  7239                           ; BSR set to: 0
  7240                           
  7241                           ; BSR set to: 0
  7242  002A9C  0100               	movlb	0	; () banked
  7243  002A9E  5184               	movf	___fldiv@a& (0+255),w,b
  7244  002AA0  0100               	movlb	0	; () banked
  7245  002AA2  1185               	iorwf	(___fldiv@a+1)& (0+255),w,b
  7246  002AA4  0100               	movlb	0	; () banked
  7247  002AA6  1186               	iorwf	(___fldiv@a+2)& (0+255),w,b
  7248  002AA8  0100               	movlb	0	; () banked
  7249  002AAA  1187               	iorwf	(___fldiv@a+3)& (0+255),w,b
  7250  002AAC  A4D8               	btfss	status,2,c
  7251  002AAE  D017               	goto	l5211
  7252                           
  7253                           ; BSR set to: 0
  7254  002AB0  0E00               	movlw	0
  7255  002AB2  0100               	movlb	0	; () banked
  7256  002AB4  6F80               	movwf	___fldiv@b& (0+255),b
  7257  002AB6  0E00               	movlw	0
  7258  002AB8  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7259  002ABA  0E00               	movlw	0
  7260  002ABC  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7261  002ABE  0E00               	movlw	0
  7262  002AC0  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265  002AC2  0100               	movlb	0	; () banked
  7266  002AC4  0E80               	movlw	128
  7267  002AC6  1382               	iorwf	(___fldiv@b+2)& (0+255),f,b
  7268  002AC8  0E7F               	movlw	127
  7269  002ACA  1383               	iorwf	(___fldiv@b+3)& (0+255),f,b
  7270                           
  7271                           ; BSR set to: 0
  7272  002ACC  C080  F080         	movff	___fldiv@b,?___fldiv
  7273  002AD0  C081  F081         	movff	___fldiv@b+1,?___fldiv+1
  7274  002AD4  C082  F082         	movff	___fldiv@b+2,?___fldiv+2
  7275  002AD8  C083  F083         	movff	___fldiv@b+3,?___fldiv+3
  7276                           
  7277                           ; BSR set to: 0
  7278  002ADC  0012               	return	
  7279  002ADE                     l5211:
  7280                           
  7281                           ; BSR set to: 0
  7282  002ADE  0100               	movlb	0	; () banked
  7283  002AE0  5197               	movf	___fldiv@bexp& (0+255),w,b
  7284  002AE2  0100               	movlb	0	; () banked
  7285  002AE4  A4D8               	btfss	status,2,c
  7286  002AE6  D012               	goto	l5219
  7287                           
  7288                           ; BSR set to: 0
  7289  002AE8  0E00               	movlw	0
  7290  002AEA  0100               	movlb	0	; () banked
  7291  002AEC  6F80               	movwf	___fldiv@b& (0+255),b
  7292  002AEE  0E00               	movlw	0
  7293  002AF0  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7294  002AF2  0E00               	movlw	0
  7295  002AF4  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7296  002AF6  0E00               	movlw	0
  7297  002AF8  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7298                           
  7299                           ; BSR set to: 0
  7300  002AFA  C080  F080         	movff	___fldiv@b,?___fldiv
  7301  002AFE  C081  F081         	movff	___fldiv@b+1,?___fldiv+1
  7302  002B02  C082  F082         	movff	___fldiv@b+2,?___fldiv+2
  7303  002B06  C083  F083         	movff	___fldiv@b+3,?___fldiv+3
  7304                           
  7305                           ; BSR set to: 0
  7306  002B0A  0012               	return	
  7307  002B0C                     l5219:
  7308                           
  7309                           ; BSR set to: 0
  7310  002B0C  0100               	movlb	0	; () banked
  7311  002B0E  5198               	movf	___fldiv@aexp& (0+255),w,b
  7312  002B10  0100               	movlb	0	; () banked
  7313  002B12  6F88               	movwf	??___fldiv& (0+255),b
  7314  002B14  6B89               	clrf	(??___fldiv+1)& (0+255),b
  7315  002B16  0100               	movlb	0	; () banked
  7316  002B18  1F88               	comf	??___fldiv& (0+255),f,b
  7317  002B1A  1F89               	comf	(??___fldiv+1)& (0+255),f,b
  7318  002B1C  4B88               	infsnz	??___fldiv& (0+255),f,b
  7319  002B1E  2B89               	incf	(??___fldiv+1)& (0+255),f,b
  7320  002B20  0100               	movlb	0	; () banked
  7321  002B22  5197               	movf	___fldiv@bexp& (0+255),w,b
  7322  002B24  0100               	movlb	0	; () banked
  7323  002B26  6F8A               	movwf	(??___fldiv+2)& (0+255),b
  7324  002B28  6B8B               	clrf	(??___fldiv+3)& (0+255),b
  7325  002B2A  0100               	movlb	0	; () banked
  7326  002B2C  5188               	movf	??___fldiv& (0+255),w,b
  7327  002B2E  0100               	movlb	0	; () banked
  7328  002B30  278A               	addwf	(??___fldiv+2)& (0+255),f,b
  7329  002B32  0100               	movlb	0	; () banked
  7330  002B34  5189               	movf	(??___fldiv+1)& (0+255),w,b
  7331  002B36  0100               	movlb	0	; () banked
  7332  002B38  238B               	addwfc	(??___fldiv+3)& (0+255),f,b
  7333  002B3A  0E7F               	movlw	127
  7334  002B3C  0100               	movlb	0	; () banked
  7335  002B3E  258A               	addwf	(??___fldiv+2)& (0+255),w,b
  7336  002B40  0100               	movlb	0	; () banked
  7337  002B42  6F91               	movwf	___fldiv@new_exp& (0+255),b
  7338  002B44  0E00               	movlw	0
  7339  002B46  0100               	movlb	0	; () banked
  7340  002B48  218B               	addwfc	(??___fldiv+3)& (0+255),w,b
  7341  002B4A  0100               	movlb	0	; () banked
  7342  002B4C  6F92               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7343                           
  7344                           ; BSR set to: 0
  7345  002B4E  C080  F08D         	movff	___fldiv@b,___fldiv@rem
  7346  002B52  C081  F08E         	movff	___fldiv@b+1,___fldiv@rem+1
  7347  002B56  C082  F08F         	movff	___fldiv@b+2,___fldiv@rem+2
  7348  002B5A  C083  F090         	movff	___fldiv@b+3,___fldiv@rem+3
  7349                           
  7350                           ; BSR set to: 0
  7351  002B5E  0E00               	movlw	0
  7352  002B60  0100               	movlb	0	; () banked
  7353  002B62  6F80               	movwf	___fldiv@b& (0+255),b
  7354  002B64  0E00               	movlw	0
  7355  002B66  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7356  002B68  0E00               	movlw	0
  7357  002B6A  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7358  002B6C  0E00               	movlw	0
  7359  002B6E  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7360                           
  7361                           ; BSR set to: 0
  7362  002B70  0E00               	movlw	0
  7363  002B72  0100               	movlb	0	; () banked
  7364  002B74  6F93               	movwf	___fldiv@grs& (0+255),b
  7365  002B76  0E00               	movlw	0
  7366  002B78  6F94               	movwf	(___fldiv@grs+1)& (0+255),b
  7367  002B7A  0E00               	movlw	0
  7368  002B7C  6F95               	movwf	(___fldiv@grs+2)& (0+255),b
  7369  002B7E  0E00               	movlw	0
  7370  002B80  6F96               	movwf	(___fldiv@grs+3)& (0+255),b
  7371                           
  7372                           ; BSR set to: 0
  7373  002B82  0E00               	movlw	0
  7374  002B84  0100               	movlb	0	; () banked
  7375  002B86  6F98               	movwf	___fldiv@aexp& (0+255),b
  7376  002B88  D042               	goto	l1051
  7377  002B8A                     l5229:
  7378                           
  7379                           ; BSR set to: 0
  7380  002B8A  0100               	movlb	0	; () banked
  7381  002B8C  5198               	movf	___fldiv@aexp& (0+255),w,b
  7382  002B8E  0100               	movlb	0	; () banked
  7383  002B90  B4D8               	btfsc	status,2,c
  7384  002B92  D017               	goto	l5237
  7385                           
  7386                           ; BSR set to: 0
  7387  002B94  0100               	movlb	0	; () banked
  7388  002B96  90D8               	bcf	status,0,c
  7389  002B98  378D               	rlcf	___fldiv@rem& (0+255),f,b
  7390  002B9A  378E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  7391  002B9C  378F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  7392  002B9E  3790               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  7393  002BA0  0100               	movlb	0	; () banked
  7394  002BA2  90D8               	bcf	status,0,c
  7395  002BA4  3780               	rlcf	___fldiv@b& (0+255),f,b
  7396  002BA6  3781               	rlcf	(___fldiv@b+1)& (0+255),f,b
  7397  002BA8  3782               	rlcf	(___fldiv@b+2)& (0+255),f,b
  7398  002BAA  3783               	rlcf	(___fldiv@b+3)& (0+255),f,b
  7399                           
  7400                           ; BSR set to: 0
  7401  002BAC  0100               	movlb	0	; () banked
  7402  002BAE  AF96               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7403  002BB0  D002               	goto	l1054
  7404                           
  7405                           ; BSR set to: 0
  7406  002BB2  0100               	movlb	0	; () banked
  7407  002BB4  8180               	bsf	___fldiv@b& (0+255),0,b
  7408  002BB6                     l1054:
  7409                           
  7410                           ; BSR set to: 0
  7411  002BB6  0100               	movlb	0	; () banked
  7412  002BB8  90D8               	bcf	status,0,c
  7413  002BBA  3793               	rlcf	___fldiv@grs& (0+255),f,b
  7414  002BBC  3794               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  7415  002BBE  3795               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  7416  002BC0  3796               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  7417  002BC2                     l5237:
  7418                           
  7419                           ; BSR set to: 0
  7420  002BC2  0100               	movlb	0	; () banked
  7421  002BC4  5184               	movf	___fldiv@a& (0+255),w,b
  7422  002BC6  0100               	movlb	0	; () banked
  7423  002BC8  5D8D               	subwf	___fldiv@rem& (0+255),w,b
  7424  002BCA  0100               	movlb	0	; () banked
  7425  002BCC  5185               	movf	(___fldiv@a+1)& (0+255),w,b
  7426  002BCE  0100               	movlb	0	; () banked
  7427  002BD0  598E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  7428  002BD2  0100               	movlb	0	; () banked
  7429  002BD4  5186               	movf	(___fldiv@a+2)& (0+255),w,b
  7430  002BD6  0100               	movlb	0	; () banked
  7431  002BD8  598F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  7432  002BDA  0100               	movlb	0	; () banked
  7433  002BDC  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7434  002BDE  0100               	movlb	0	; () banked
  7435  002BE0  5990               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  7436  002BE2  A0D8               	btfss	status,0,c
  7437  002BE4  D012               	goto	l5243
  7438                           
  7439                           ; BSR set to: 0
  7440  002BE6  0100               	movlb	0	; () banked
  7441  002BE8  8D96               	bsf	(___fldiv@grs+3)& (0+255),6,b
  7442                           
  7443                           ; BSR set to: 0
  7444  002BEA  0100               	movlb	0	; () banked
  7445  002BEC  5184               	movf	___fldiv@a& (0+255),w,b
  7446  002BEE  0100               	movlb	0	; () banked
  7447  002BF0  5F8D               	subwf	___fldiv@rem& (0+255),f,b
  7448  002BF2  0100               	movlb	0	; () banked
  7449  002BF4  5185               	movf	(___fldiv@a+1)& (0+255),w,b
  7450  002BF6  0100               	movlb	0	; () banked
  7451  002BF8  5B8E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  7452  002BFA  0100               	movlb	0	; () banked
  7453  002BFC  5186               	movf	(___fldiv@a+2)& (0+255),w,b
  7454  002BFE  0100               	movlb	0	; () banked
  7455  002C00  5B8F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  7456  002C02  0100               	movlb	0	; () banked
  7457  002C04  5187               	movf	(___fldiv@a+3)& (0+255),w,b
  7458  002C06  0100               	movlb	0	; () banked
  7459  002C08  5B90               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  7460  002C0A                     l5243:
  7461                           
  7462                           ; BSR set to: 0
  7463  002C0A  0100               	movlb	0	; () banked
  7464  002C0C  2B98               	incf	___fldiv@aexp& (0+255),f,b
  7465  002C0E                     l1051:
  7466                           
  7467                           ; BSR set to: 0
  7468  002C0E  0E19               	movlw	25
  7469  002C10  0100               	movlb	0	; () banked
  7470  002C12  6598               	cpfsgt	___fldiv@aexp& (0+255),b
  7471  002C14  D7BA               	goto	l5229
  7472                           
  7473                           ; BSR set to: 0
  7474                           
  7475                           ; BSR set to: 0
  7476  002C16  0100               	movlb	0	; () banked
  7477  002C18  518D               	movf	___fldiv@rem& (0+255),w,b
  7478  002C1A  0100               	movlb	0	; () banked
  7479  002C1C  118E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  7480  002C1E  0100               	movlb	0	; () banked
  7481  002C20  118F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  7482  002C22  0100               	movlb	0	; () banked
  7483  002C24  1190               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  7484  002C26  B4D8               	btfsc	status,2,c
  7485  002C28  D018               	goto	l5255
  7486                           
  7487                           ; BSR set to: 0
  7488  002C2A  0100               	movlb	0	; () banked
  7489  002C2C  8193               	bsf	___fldiv@grs& (0+255),0,b
  7490                           
  7491                           ; BSR set to: 0
  7492  002C2E  D015               	goto	l5255
  7493  002C30                     l5249:
  7494                           
  7495                           ; BSR set to: 0
  7496  002C30  0100               	movlb	0	; () banked
  7497  002C32  90D8               	bcf	status,0,c
  7498  002C34  3780               	rlcf	___fldiv@b& (0+255),f,b
  7499  002C36  3781               	rlcf	(___fldiv@b+1)& (0+255),f,b
  7500  002C38  3782               	rlcf	(___fldiv@b+2)& (0+255),f,b
  7501  002C3A  3783               	rlcf	(___fldiv@b+3)& (0+255),f,b
  7502                           
  7503                           ; BSR set to: 0
  7504  002C3C  0100               	movlb	0	; () banked
  7505  002C3E  AF96               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7506  002C40  D002               	goto	l1060
  7507                           
  7508                           ; BSR set to: 0
  7509  002C42  0100               	movlb	0	; () banked
  7510  002C44  8180               	bsf	___fldiv@b& (0+255),0,b
  7511  002C46                     l1060:
  7512                           
  7513                           ; BSR set to: 0
  7514  002C46  0100               	movlb	0	; () banked
  7515  002C48  90D8               	bcf	status,0,c
  7516  002C4A  3793               	rlcf	___fldiv@grs& (0+255),f,b
  7517  002C4C  3794               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  7518  002C4E  3795               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  7519  002C50  3796               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  7520  002C52  0100               	movlb	0	; () banked
  7521  002C54  0791               	decf	___fldiv@new_exp& (0+255),f,b
  7522  002C56  A0D8               	btfss	status,0,c
  7523  002C58  0792               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  7524  002C5A                     l5255:
  7525                           
  7526                           ; BSR set to: 0
  7527  002C5A  0100               	movlb	0	; () banked
  7528  002C5C  AF82               	btfss	(___fldiv@b+2)& (0+255),7,b
  7529  002C5E  D7E8               	goto	l5249
  7530                           
  7531                           ; BSR set to: 0
  7532                           
  7533                           ; BSR set to: 0
  7534  002C60  0E00               	movlw	0
  7535  002C62  0100               	movlb	0	; () banked
  7536  002C64  6F98               	movwf	___fldiv@aexp& (0+255),b
  7537                           
  7538                           ; BSR set to: 0
  7539  002C66  0100               	movlb	0	; () banked
  7540  002C68  AF96               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7541  002C6A  D024               	goto	l1062
  7542                           
  7543                           ; BSR set to: 0
  7544  002C6C  0EFF               	movlw	255
  7545  002C6E  0100               	movlb	0	; () banked
  7546  002C70  1593               	andwf	___fldiv@grs& (0+255),w,b
  7547  002C72  0100               	movlb	0	; () banked
  7548  002C74  6F88               	movwf	??___fldiv& (0+255),b
  7549  002C76  0EFF               	movlw	255
  7550  002C78  0100               	movlb	0	; () banked
  7551  002C7A  1594               	andwf	(___fldiv@grs+1)& (0+255),w,b
  7552  002C7C  0100               	movlb	0	; () banked
  7553  002C7E  6F89               	movwf	(??___fldiv+1)& (0+255),b
  7554  002C80  0EFF               	movlw	255
  7555  002C82  0100               	movlb	0	; () banked
  7556  002C84  1595               	andwf	(___fldiv@grs+2)& (0+255),w,b
  7557  002C86  0100               	movlb	0	; () banked
  7558  002C88  6F8A               	movwf	(??___fldiv+2)& (0+255),b
  7559  002C8A  0E7F               	movlw	127
  7560  002C8C  0100               	movlb	0	; () banked
  7561  002C8E  1596               	andwf	(___fldiv@grs+3)& (0+255),w,b
  7562  002C90  0100               	movlb	0	; () banked
  7563  002C92  6F8B               	movwf	(??___fldiv+3)& (0+255),b
  7564  002C94  0100               	movlb	0	; () banked
  7565  002C96  5188               	movf	??___fldiv& (0+255),w,b
  7566  002C98  0100               	movlb	0	; () banked
  7567  002C9A  1189               	iorwf	(??___fldiv+1)& (0+255),w,b
  7568  002C9C  0100               	movlb	0	; () banked
  7569  002C9E  118A               	iorwf	(??___fldiv+2)& (0+255),w,b
  7570  002CA0  0100               	movlb	0	; () banked
  7571  002CA2  118B               	iorwf	(??___fldiv+3)& (0+255),w,b
  7572  002CA4  A4D8               	btfss	status,2,c
  7573  002CA6  D003               	goto	l5265
  7574                           
  7575                           ; BSR set to: 0
  7576                           
  7577                           ; BSR set to: 0
  7578  002CA8  0100               	movlb	0	; () banked
  7579  002CAA  A180               	btfss	___fldiv@b& (0+255),0,b
  7580  002CAC  D003               	goto	l1062
  7581  002CAE                     l5265:
  7582                           
  7583                           ; BSR set to: 0
  7584  002CAE  0E01               	movlw	1
  7585  002CB0  0100               	movlb	0	; () banked
  7586  002CB2  6F98               	movwf	___fldiv@aexp& (0+255),b
  7587  002CB4                     l1062:
  7588                           
  7589                           ; BSR set to: 0
  7590  002CB4  0100               	movlb	0	; () banked
  7591  002CB6  5198               	movf	___fldiv@aexp& (0+255),w,b
  7592  002CB8  0100               	movlb	0	; () banked
  7593  002CBA  B4D8               	btfsc	status,2,c
  7594  002CBC  D023               	goto	l5275
  7595                           
  7596                           ; BSR set to: 0
  7597  002CBE  0E01               	movlw	1
  7598  002CC0  0100               	movlb	0	; () banked
  7599  002CC2  2780               	addwf	___fldiv@b& (0+255),f,b
  7600  002CC4  0E00               	movlw	0
  7601  002CC6  2381               	addwfc	(___fldiv@b+1)& (0+255),f,b
  7602  002CC8  2382               	addwfc	(___fldiv@b+2)& (0+255),f,b
  7603  002CCA  2383               	addwfc	(___fldiv@b+3)& (0+255),f,b
  7604                           
  7605                           ; BSR set to: 0
  7606  002CCC  0100               	movlb	0	; () banked
  7607  002CCE  A183               	btfss	(___fldiv@b+3)& (0+255),0,b
  7608  002CD0  D019               	goto	l5275
  7609                           
  7610                           ; BSR set to: 0
  7611  002CD2  C080  F088         	movff	___fldiv@b,??___fldiv
  7612  002CD6  C081  F089         	movff	___fldiv@b+1,??___fldiv+1
  7613  002CDA  C082  F08A         	movff	___fldiv@b+2,??___fldiv+2
  7614  002CDE  C083  F08B         	movff	___fldiv@b+3,??___fldiv+3
  7615  002CE2  0100               	movlb	0	; () banked
  7616  002CE4  358B               	rlcf	(??___fldiv+3)& (0+255),w,b
  7617  002CE6  338B               	rrcf	(??___fldiv+3)& (0+255),f,b
  7618  002CE8  338A               	rrcf	(??___fldiv+2)& (0+255),f,b
  7619  002CEA  3389               	rrcf	(??___fldiv+1)& (0+255),f,b
  7620  002CEC  3388               	rrcf	??___fldiv& (0+255),f,b
  7621  002CEE  C088  F080         	movff	??___fldiv,___fldiv@b
  7622  002CF2  C089  F081         	movff	??___fldiv+1,___fldiv@b+1
  7623  002CF6  C08A  F082         	movff	??___fldiv+2,___fldiv@b+2
  7624  002CFA  C08B  F083         	movff	??___fldiv+3,___fldiv@b+3
  7625                           
  7626                           ; BSR set to: 0
  7627  002CFE  0100               	movlb	0	; () banked
  7628  002D00  4B91               	infsnz	___fldiv@new_exp& (0+255),f,b
  7629  002D02  2B92               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  7630  002D04                     l5275:
  7631                           
  7632                           ; BSR set to: 0
  7633  002D04  0100               	movlb	0	; () banked
  7634  002D06  BF92               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  7635  002D08  D014               	goto	l5279
  7636  002D0A  0100               	movlb	0	; () banked
  7637  002D0C  5192               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  7638  002D0E  E104               	bnz	u6020
  7639  002D10  0100               	movlb	0	; () banked
  7640  002D12  2991               	incf	___fldiv@new_exp& (0+255),w,b
  7641  002D14  A0D8               	btfss	status,0,c
  7642  002D16  D00D               	goto	l5279
  7643  002D18                     u6020:
  7644                           
  7645                           ; BSR set to: 0
  7646  002D18  0E00               	movlw	0
  7647  002D1A  0100               	movlb	0	; () banked
  7648  002D1C  6F92               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7649  002D1E  6991               	setf	___fldiv@new_exp& (0+255),b
  7650  002D20  0E00               	movlw	0
  7651  002D22  0100               	movlb	0	; () banked
  7652  002D24  6F80               	movwf	___fldiv@b& (0+255),b
  7653  002D26  0E00               	movlw	0
  7654  002D28  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7655  002D2A  0E00               	movlw	0
  7656  002D2C  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7657  002D2E  0E00               	movlw	0
  7658  002D30  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7659  002D32                     l5279:
  7660                           
  7661                           ; BSR set to: 0
  7662  002D32  0100               	movlb	0	; () banked
  7663  002D34  BF92               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  7664  002D36  D007               	goto	l5281
  7665  002D38  0100               	movlb	0	; () banked
  7666  002D3A  5192               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  7667  002D3C  E115               	bnz	l5283
  7668  002D3E  0100               	movlb	0	; () banked
  7669  002D40  0591               	decf	___fldiv@new_exp& (0+255),w,b
  7670  002D42  B0D8               	btfsc	status,0,c
  7671  002D44  D011               	goto	l5283
  7672  002D46                     l5281:
  7673                           
  7674                           ; BSR set to: 0
  7675  002D46  0E00               	movlw	0
  7676  002D48  0100               	movlb	0	; () banked
  7677  002D4A  6F92               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7678  002D4C  0E00               	movlw	0
  7679  002D4E  6F91               	movwf	___fldiv@new_exp& (0+255),b
  7680  002D50  0E00               	movlw	0
  7681  002D52  0100               	movlb	0	; () banked
  7682  002D54  6F80               	movwf	___fldiv@b& (0+255),b
  7683  002D56  0E00               	movlw	0
  7684  002D58  6F81               	movwf	(___fldiv@b+1)& (0+255),b
  7685  002D5A  0E00               	movlw	0
  7686  002D5C  6F82               	movwf	(___fldiv@b+2)& (0+255),b
  7687  002D5E  0E00               	movlw	0
  7688  002D60  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7689  002D62  0E00               	movlw	0
  7690  002D64  0100               	movlb	0	; () banked
  7691  002D66  6F8C               	movwf	___fldiv@sign& (0+255),b
  7692  002D68                     l5283:
  7693                           
  7694                           ; BSR set to: 0
  7695  002D68  C091  F097         	movff	___fldiv@new_exp,___fldiv@bexp
  7696                           
  7697                           ; BSR set to: 0
  7698  002D6C  0100               	movlb	0	; () banked
  7699  002D6E  A197               	btfss	___fldiv@bexp& (0+255),0,b
  7700  002D70  D003               	goto	l5289
  7701                           
  7702                           ; BSR set to: 0
  7703  002D72  0100               	movlb	0	; () banked
  7704  002D74  8F82               	bsf	(___fldiv@b+2)& (0+255),7,b
  7705  002D76  D002               	goto	l5291
  7706  002D78                     l5289:
  7707                           
  7708                           ; BSR set to: 0
  7709  002D78  0100               	movlb	0	; () banked
  7710  002D7A  9F82               	bcf	(___fldiv@b+2)& (0+255),7,b
  7711  002D7C                     l5291:
  7712                           
  7713                           ; BSR set to: 0
  7714  002D7C  0100               	movlb	0	; () banked
  7715  002D7E  90D8               	bcf	status,0,c
  7716  002D80  3197               	rrcf	___fldiv@bexp& (0+255),w,b
  7717  002D82  0100               	movlb	0	; () banked
  7718  002D84  6F83               	movwf	(___fldiv@b+3)& (0+255),b
  7719                           
  7720                           ; BSR set to: 0
  7721  002D86  0100               	movlb	0	; () banked
  7722  002D88  518C               	movf	___fldiv@sign& (0+255),w,b
  7723  002D8A  0100               	movlb	0	; () banked
  7724  002D8C  1383               	iorwf	(___fldiv@b+3)& (0+255),f,b
  7725                           
  7726                           ; BSR set to: 0
  7727  002D8E  C080  F080         	movff	___fldiv@b,?___fldiv
  7728  002D92  C081  F081         	movff	___fldiv@b+1,?___fldiv+1
  7729  002D96  C082  F082         	movff	___fldiv@b+2,?___fldiv+2
  7730  002D9A  C083  F083         	movff	___fldiv@b+3,?___fldiv+3
  7731  002D9E  0012               	return	
  7732  002DA0                     __end_of___fldiv:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           postinc0	equ	0xFEE
  7741                           wreg	equ	0xFE8
  7742                           postdec1	equ	0xFE5
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751 ;; *************** function _lcd_puts *****************
  7752 ;; Defined at:
  7753 ;;		line 120 in file "lcd_x8.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  s               2   37[COMRAM] PTR unsigned char 
  7756 ;;		 -> main@Buffer(32), 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;		None
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      void 
  7761 ;; Registers used:
  7762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 0/0
  7765 ;;		On exit  : 0/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7768 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7771 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7772 ;;Total ram usage:        2 bytes
  7773 ;; Hardware stack levels used:    1
  7774 ;; Hardware stack levels required when called:    8
  7775 ;; This function calls:
  7776 ;;		_lcd_putc
  7777 ;; This function is called by:
  7778 ;;		_main
  7779 ;; This function uses a non-reentrant model
  7780 ;;
  7781                           
  7782                           	psect	text25
  7783  0043BE                     __ptext25:
  7784                           	opt stack 0
  7785  0043BE                     _lcd_puts:
  7786                           	opt stack 22
  7787                           
  7788                           ;lcd_x8.c: 121: while (*s) {
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;incstack = 0
  7792  0043BE  D009               	goto	l4393
  7793  0043C0                     l4389:
  7794                           
  7795                           ;lcd_x8.c: 122: lcd_putc(*s);
  7796  0043C0  C026  FFD9         	movff	lcd_puts@s,fsr2l
  7797  0043C4  C027  FFDA         	movff	lcd_puts@s+1,fsr2h
  7798  0043C8  50DF               	movf	indf2,w,c
  7799  0043CA  EC4B  F020         	call	_lcd_putc
  7800                           
  7801                           ;lcd_x8.c: 123: s++;
  7802  0043CE  4A26               	infsnz	lcd_puts@s,f,c
  7803  0043D0  2A27               	incf	lcd_puts@s+1,f,c
  7804  0043D2                     l4393:
  7805  0043D2  C026  FFD9         	movff	lcd_puts@s,fsr2l
  7806  0043D6  C027  FFDA         	movff	lcd_puts@s+1,fsr2h
  7807  0043DA  50DF               	movf	indf2,w,c
  7808  0043DC  B4D8               	btfsc	status,2,c
  7809  0043DE  0012               	return	
  7810  0043E0  D7EF               	goto	l4389
  7811  0043E2                     __end_of_lcd_puts:
  7812                           	opt stack 0
  7813                           tblptru	equ	0xFF8
  7814                           tblptrh	equ	0xFF7
  7815                           tblptrl	equ	0xFF6
  7816                           tablat	equ	0xFF5
  7817                           prodh	equ	0xFF4
  7818                           prodl	equ	0xFF3
  7819                           postinc0	equ	0xFEE
  7820                           wreg	equ	0xFE8
  7821                           postdec1	equ	0xFE5
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function _lcd_putc *****************
  7831 ;; Defined at:
  7832 ;;		line 106 in file "lcd_x8.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  c               1    wreg     unsigned char 
  7835 ;; Auto vars:     Size  Location     Type
  7836 ;;  c               1   36[COMRAM] unsigned char 
  7837 ;; Return value:  Size  Location     Type
  7838 ;;                  1    wreg      void 
  7839 ;; Registers used:
  7840 ;;		wreg, status,2, status,0, cstack
  7841 ;; Tracked objects:
  7842 ;;		On entry : 0/0
  7843 ;;		On exit  : 0/0
  7844 ;;		Unchanged: 0/0
  7845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;Total ram usage:        1 bytes
  7851 ;; Hardware stack levels used:    1
  7852 ;; Hardware stack levels required when called:    7
  7853 ;; This function calls:
  7854 ;;		_delay_ms
  7855 ;;		_lcd_gotoxy
  7856 ;;		_lcd_send_byte
  7857 ;; This function is called by:
  7858 ;;		_main
  7859 ;;		_lcd_puts
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text26
  7864  004096                     __ptext26:
  7865                           	opt stack 0
  7866  004096                     _lcd_putc:
  7867                           	opt stack 22
  7868                           
  7869                           ;incstack = 0
  7870                           ;lcd_putc@c stored from wreg
  7871  004096  6E25               	movwf	lcd_putc@c,c
  7872                           
  7873                           ;lcd_x8.c: 107: switch (c) {
  7874  004098  D01E               	goto	l3419
  7875  00409A                     l3409:
  7876  00409A  0E01               	movlw	1
  7877  00409C  6E20               	movwf	lcd_send_byte@n,c
  7878  00409E  0E00               	movlw	0
  7879  0040A0  EC9A  F020         	call	_lcd_send_byte
  7880                           
  7881                           ;lcd_x8.c: 109: delay_ms(2);
  7882  0040A4  0E00               	movlw	0
  7883  0040A6  6E19               	movwf	delay_ms@n+1,c
  7884  0040A8  0E02               	movlw	2
  7885  0040AA  6E18               	movwf	delay_ms@n,c
  7886  0040AC  ECF1  F021         	call	_delay_ms	;wreg free
  7887                           
  7888                           ;lcd_x8.c: 110: break;
  7889  0040B0  0012               	return	
  7890  0040B2                     l3411:
  7891  0040B2  0E02               	movlw	2
  7892  0040B4  6E22               	movwf	lcd_gotoxy@y,c
  7893  0040B6  0E01               	movlw	1
  7894  0040B8  ECBE  F020         	call	_lcd_gotoxy
  7895                           
  7896                           ;lcd_x8.c: 112: break;
  7897  0040BC  0012               	return	
  7898  0040BE                     l3413:
  7899  0040BE  0E10               	movlw	16
  7900  0040C0  6E20               	movwf	lcd_send_byte@n,c
  7901  0040C2  0E00               	movlw	0
  7902  0040C4  EC9A  F020         	call	_lcd_send_byte
  7903                           
  7904                           ;lcd_x8.c: 114: break;
  7905  0040C8  0012               	return	
  7906  0040CA                     l3415:
  7907  0040CA  C025  F020         	movff	lcd_putc@c,lcd_send_byte@n
  7908  0040CE  0E01               	movlw	1
  7909  0040D0  EC9A  F020         	call	_lcd_send_byte
  7910                           
  7911                           ;lcd_x8.c: 117: }
  7912                           
  7913                           ;lcd_x8.c: 116: break;
  7914  0040D4  0012               	return	
  7915  0040D6                     l3419:
  7916  0040D6  5025               	movf	lcd_putc@c,w,c
  7917                           
  7918                           ; Switch size 1, requested type "space"
  7919                           ; Number of cases is 3, Range of values is 8 to 12
  7920                           ; switch strategies available:
  7921                           ; Name         Instructions Cycles
  7922                           ; simple_byte           10     6 (average)
  7923                           ;	Chosen strategy is simple_byte
  7924  0040D8  0A08               	xorlw	8	; case 8
  7925  0040DA  B4D8               	btfsc	status,2,c
  7926  0040DC  D7F0               	goto	l3413
  7927  0040DE  0A02               	xorlw	2	; case 10
  7928  0040E0  B4D8               	btfsc	status,2,c
  7929  0040E2  D7E7               	goto	l3411
  7930  0040E4  0A06               	xorlw	6	; case 12
  7931  0040E6  B4D8               	btfsc	status,2,c
  7932  0040E8  D7D8               	goto	l3409
  7933  0040EA  D7EF               	goto	l3415
  7934  0040EC                     __end_of_lcd_putc:
  7935                           	opt stack 0
  7936                           tblptru	equ	0xFF8
  7937                           tblptrh	equ	0xFF7
  7938                           tblptrl	equ	0xFF6
  7939                           tablat	equ	0xFF5
  7940                           prodh	equ	0xFF4
  7941                           prodl	equ	0xFF3
  7942                           postinc0	equ	0xFEE
  7943                           wreg	equ	0xFE8
  7944                           postdec1	equ	0xFE5
  7945                           fsr1l	equ	0xFE1
  7946                           indf2	equ	0xFDF
  7947                           postinc2	equ	0xFDE
  7948                           postdec2	equ	0xFDD
  7949                           fsr2h	equ	0xFDA
  7950                           fsr2l	equ	0xFD9
  7951                           status	equ	0xFD8
  7952                           
  7953 ;; *************** function _lcd_gotoxy *****************
  7954 ;; Defined at:
  7955 ;;		line 89 in file "lcd_x8.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  x               1    wreg     unsigned char 
  7958 ;;  y               1   33[COMRAM] unsigned char 
  7959 ;; Auto vars:     Size  Location     Type
  7960 ;;  x               1   34[COMRAM] unsigned char 
  7961 ;;  address         1   35[COMRAM] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  1    wreg      void 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7971 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;Total ram usage:        3 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    6
  7978 ;; This function calls:
  7979 ;;		_lcd_send_byte
  7980 ;; This function is called by:
  7981 ;;		_main
  7982 ;;		_lcd_putc
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text27
  7987  00417C                     __ptext27:
  7988                           	opt stack 0
  7989  00417C                     _lcd_gotoxy:
  7990                           	opt stack 22
  7991                           
  7992                           ;incstack = 0
  7993                           ;lcd_gotoxy@x stored from wreg
  7994  00417C  6E23               	movwf	lcd_gotoxy@x,c
  7995                           
  7996                           ;lcd_x8.c: 90: unsigned char address;
  7997                           ;lcd_x8.c: 92: switch (y) {
  7998  00417E  D009               	goto	l2989
  7999  004180                     l2979:
  8000  004180  0E80               	movlw	128
  8001  004182  D005               	goto	L12
  8002  004184                     l2981:
  8003  004184  0EC0               	movlw	192
  8004  004186  D003               	goto	L12
  8005  004188                     l2983:
  8006  004188  0E90               	movlw	144
  8007  00418A  D001               	goto	L12
  8008  00418C                     l2985:
  8009  00418C  0ED0               	movlw	208
  8010  00418E                     L12:
  8011  00418E  6E24               	movwf	lcd_gotoxy@address,c
  8012                           
  8013                           ;lcd_x8.c: 101: }
  8014                           
  8015                           ;lcd_x8.c: 100: break;
  8016  004190  D00D               	goto	l2991
  8017  004192                     l2989:
  8018  004192  5022               	movf	lcd_gotoxy@y,w,c
  8019                           
  8020                           ; Switch size 1, requested type "space"
  8021                           ; Number of cases is 4, Range of values is 1 to 4
  8022                           ; switch strategies available:
  8023                           ; Name         Instructions Cycles
  8024                           ; simple_byte           13     7 (average)
  8025                           ;	Chosen strategy is simple_byte
  8026  004194  0A01               	xorlw	1	; case 1
  8027  004196  B4D8               	btfsc	status,2,c
  8028  004198  D7F3               	goto	l2979
  8029  00419A  0A03               	xorlw	3	; case 2
  8030  00419C  B4D8               	btfsc	status,2,c
  8031  00419E  D7F2               	goto	l2981
  8032  0041A0  0A01               	xorlw	1	; case 3
  8033  0041A2  B4D8               	btfsc	status,2,c
  8034  0041A4  D7F1               	goto	l2983
  8035  0041A6  0A07               	xorlw	7	; case 4
  8036  0041A8  B4D8               	btfsc	status,2,c
  8037  0041AA  D7F0               	goto	l2985
  8038  0041AC                     l2991:
  8039                           
  8040                           ;lcd_x8.c: 102: address += x - 1;
  8041  0041AC  0423               	decf	lcd_gotoxy@x,w,c
  8042  0041AE  2624               	addwf	lcd_gotoxy@address,f,c
  8043                           
  8044                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  8045  0041B0  5024               	movf	lcd_gotoxy@address,w,c
  8046  0041B2  0980               	iorlw	128
  8047  0041B4  6E20               	movwf	lcd_send_byte@n,c
  8048  0041B6  0E00               	movlw	0
  8049  0041B8  EC9A  F020         	call	_lcd_send_byte
  8050  0041BC  0012               	return		;funcret
  8051  0041BE                     __end_of_lcd_gotoxy:
  8052                           	opt stack 0
  8053                           tblptru	equ	0xFF8
  8054                           tblptrh	equ	0xFF7
  8055                           tblptrl	equ	0xFF6
  8056                           tablat	equ	0xFF5
  8057                           prodh	equ	0xFF4
  8058                           prodl	equ	0xFF3
  8059                           postinc0	equ	0xFEE
  8060                           wreg	equ	0xFE8
  8061                           postdec1	equ	0xFE5
  8062                           fsr1l	equ	0xFE1
  8063                           indf2	equ	0xFDF
  8064                           postinc2	equ	0xFDE
  8065                           postdec2	equ	0xFDD
  8066                           fsr2h	equ	0xFDA
  8067                           fsr2l	equ	0xFD9
  8068                           status	equ	0xFD8
  8069                           
  8070 ;; *************** function _lcd_init *****************
  8071 ;; Defined at:
  8072 ;;		line 56 in file "lcd_x8.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;		None
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  i               1   33[COMRAM] unsigned char 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  1    wreg      void 
  8079 ;; Registers used:
  8080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;Total ram usage:        1 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    6
  8093 ;; This function calls:
  8094 ;;		_delay_ms
  8095 ;;		_lcd_send_byte
  8096 ;;		_lcd_send_nibble
  8097 ;; This function is called by:
  8098 ;;		_main
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           	psect	text28
  8103  003F74                     __ptext28:
  8104                           	opt stack 0
  8105  003F74                     _lcd_init:
  8106                           	opt stack 24
  8107                           
  8108                           ;lcd_x8.c: 58: unsigned char i;
  8109                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  8110                           
  8111                           ;incstack = 0
  8112  003F74  9484               	bcf	3972,2,c	;volatile
  8113                           
  8114                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  8115  003F76  9284               	bcf	3972,1,c	;volatile
  8116                           
  8117                           ;lcd_x8.c: 65: delay_ms(25);
  8118  003F78  0E00               	movlw	0
  8119  003F7A  6E19               	movwf	delay_ms@n+1,c
  8120  003F7C  0E19               	movlw	25
  8121  003F7E  6E18               	movwf	delay_ms@n,c
  8122  003F80  ECF1  F021         	call	_delay_ms	;wreg free
  8123                           
  8124                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  8125  003F84  0E01               	movlw	1
  8126  003F86  6E22               	movwf	lcd_init@i,c
  8127  003F88                     l4005:
  8128  003F88  0E03               	movlw	3
  8129  003F8A  6422               	cpfsgt	lcd_init@i,c
  8130  003F8C  D001               	goto	l4009
  8131  003F8E  D00B               	goto	l4015
  8132  003F90                     l4009:
  8133                           
  8134                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  8135  003F90  0E03               	movlw	3
  8136  003F92  EC03  F022         	call	_lcd_send_nibble
  8137                           
  8138                           ;lcd_x8.c: 69: delay_ms(6);
  8139  003F96  0E00               	movlw	0
  8140  003F98  6E19               	movwf	delay_ms@n+1,c
  8141  003F9A  0E06               	movlw	6
  8142  003F9C  6E18               	movwf	delay_ms@n,c
  8143  003F9E  ECF1  F021         	call	_delay_ms	;wreg free
  8144  003FA2  2A22               	incf	lcd_init@i,f,c
  8145  003FA4  D7F1               	goto	l4005
  8146  003FA6                     l4015:
  8147                           
  8148                           ;lcd_x8.c: 70: }
  8149                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  8150  003FA6  0E02               	movlw	2
  8151  003FA8  EC03  F022         	call	_lcd_send_nibble
  8152                           
  8153                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  8154  003FAC  0E00               	movlw	0
  8155  003FAE  6E22               	movwf	lcd_init@i,c
  8156  003FB0                     l4019:
  8157  003FB0  0E03               	movlw	3
  8158  003FB2  6422               	cpfsgt	lcd_init@i,c
  8159  003FB4  D001               	goto	l4023
  8160  003FB6  0012               	return	
  8161  003FB8                     l4023:
  8162                           
  8163                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  8164  003FB8  5022               	movf	lcd_init@i,w,c
  8165  003FBA  0D01               	mullw	1
  8166  003FBC  0E61               	movlw	low _LCD_INIT_STRING
  8167  003FBE  24F3               	addwf	prodl,w,c
  8168  003FC0  6ED9               	movwf	fsr2l,c
  8169  003FC2  0E00               	movlw	high _LCD_INIT_STRING
  8170  003FC4  20F4               	addwfc	prodh,w,c
  8171  003FC6  6EDA               	movwf	fsr2h,c
  8172  003FC8  50DF               	movf	indf2,w,c
  8173  003FCA  6E20               	movwf	lcd_send_byte@n,c
  8174  003FCC  0E00               	movlw	0
  8175  003FCE  EC9A  F020         	call	_lcd_send_byte
  8176  003FD2  2A22               	incf	lcd_init@i,f,c
  8177  003FD4  D7ED               	goto	l4019
  8178  003FD6                     __end_of_lcd_init:
  8179                           	opt stack 0
  8180                           tblptru	equ	0xFF8
  8181                           tblptrh	equ	0xFF7
  8182                           tblptrl	equ	0xFF6
  8183                           tablat	equ	0xFF5
  8184                           prodh	equ	0xFF4
  8185                           prodl	equ	0xFF3
  8186                           postinc0	equ	0xFEE
  8187                           wreg	equ	0xFE8
  8188                           postdec1	equ	0xFE5
  8189                           fsr1l	equ	0xFE1
  8190                           indf2	equ	0xFDF
  8191                           postinc2	equ	0xFDE
  8192                           postdec2	equ	0xFDD
  8193                           fsr2h	equ	0xFDA
  8194                           fsr2l	equ	0xFD9
  8195                           status	equ	0xFD8
  8196                           
  8197 ;; *************** function _lcd_send_byte *****************
  8198 ;; Defined at:
  8199 ;;		line 39 in file "lcd_x8.c"
  8200 ;; Parameters:    Size  Location     Type
  8201 ;;  cm_data         1    wreg     unsigned char 
  8202 ;;  n               1   31[COMRAM] unsigned char 
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  cm_data         1   32[COMRAM] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      void 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2, status,0, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8214 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8217 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8218 ;;Total ram usage:        2 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    5
  8221 ;; This function calls:
  8222 ;;		_delay_cycles
  8223 ;;		_delay_ms
  8224 ;;		_lcd_send_nibble
  8225 ;; This function is called by:
  8226 ;;		_lcd_init
  8227 ;;		_lcd_gotoxy
  8228 ;;		_lcd_putc
  8229 ;;		_Lcd_Shift_Right
  8230 ;;		_Lcd_Shift_Left
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           	psect	text29
  8235  004134                     __ptext29:
  8236                           	opt stack 0
  8237  004134                     _lcd_send_byte:
  8238                           	opt stack 23
  8239                           
  8240                           ;incstack = 0
  8241                           ;lcd_send_byte@cm_data stored from wreg
  8242  004134  6E21               	movwf	lcd_send_byte@cm_data,c
  8243                           
  8244                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  8245  004136  B021               	btfsc	lcd_send_byte@cm_data,0,c
  8246  004138  D002               	bra	u2565
  8247  00413A  9484               	bcf	3972,2,c	;volatile
  8248  00413C  D001               	bra	u2566
  8249  00413E                     u2565:
  8250  00413E  8484               	bsf	3972,2,c	;volatile
  8251  004140                     u2566:
  8252                           
  8253                           ;lcd_x8.c: 44: delay_cycles(1);
  8254  004140  0E01               	movlw	1
  8255  004142  EC64  F021         	call	_delay_cycles
  8256                           
  8257                           ;lcd_x8.c: 46: delay_cycles(1);
  8258  004146  0E01               	movlw	1
  8259  004148  EC64  F021         	call	_delay_cycles
  8260                           
  8261                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  8262  00414C  9284               	bcf	3972,1,c	;volatile
  8263                           
  8264                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  8265  00414E  3820               	swapf	lcd_send_byte@n,w,c
  8266  004150  0B0F               	andlw	15
  8267  004152  EC03  F022         	call	_lcd_send_nibble
  8268                           
  8269                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  8270  004156  5020               	movf	lcd_send_byte@n,w,c
  8271  004158  0B0F               	andlw	15
  8272  00415A  EC03  F022         	call	_lcd_send_nibble
  8273                           
  8274                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  8275  00415E  5021               	movf	lcd_send_byte@cm_data,w,c
  8276  004160  B4D8               	btfsc	status,2,c
  8277  004162  D005               	goto	l2975
  8278  004164  0E32               	movlw	50
  8279  004166                     u6857:
  8280  004166  0004               	clrwdt	
  8281  004168  2EE8               	decfsz	wreg,f,c
  8282  00416A  D7FD               	goto	u6857
  8283  00416C  0012               	return	
  8284  00416E                     l2975:
  8285                           
  8286                           ;lcd_x8.c: 51: else
  8287                           ;lcd_x8.c: 52: delay_ms(2);
  8288  00416E  0E00               	movlw	0
  8289  004170  6E19               	movwf	delay_ms@n+1,c
  8290  004172  0E02               	movlw	2
  8291  004174  6E18               	movwf	delay_ms@n,c
  8292  004176  ECF1  F021         	call	_delay_ms	;wreg free
  8293  00417A  0012               	return	
  8294  00417C                     __end_of_lcd_send_byte:
  8295                           	opt stack 0
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           postinc0	equ	0xFEE
  8303                           wreg	equ	0xFE8
  8304                           postdec1	equ	0xFE5
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _lcd_send_nibble *****************
  8314 ;; Defined at:
  8315 ;;		line 29 in file "lcd_x8.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  n               1    wreg     unsigned char 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  n               1   30[COMRAM] unsigned char 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg, status,2, status,0, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;Total ram usage:        2 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    4
  8336 ;; This function calls:
  8337 ;;		_delay_cycles
  8338 ;; This function is called by:
  8339 ;;		_lcd_send_byte
  8340 ;;		_lcd_init
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           	psect	text30
  8345  004406                     __ptext30:
  8346                           	opt stack 0
  8347  004406                     _lcd_send_nibble:
  8348                           	opt stack 23
  8349                           
  8350                           ;incstack = 0
  8351                           ;lcd_send_nibble@n stored from wreg
  8352  004406  6E1F               	movwf	lcd_send_nibble@n,c
  8353                           
  8354                           ;lcd_x8.c: 31: lcd.data = n;
  8355  004408  C01F  F01E         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  8356  00440C  3A1E               	swapf	??_lcd_send_nibble,f,c
  8357  00440E  5083               	movf	3971,w,c
  8358  004410  181E               	xorwf	??_lcd_send_nibble,w,c
  8359  004412  0B0F               	andlw	-241
  8360  004414  181E               	xorwf	??_lcd_send_nibble,w,c
  8361  004416  6E83               	movwf	3971,c
  8362                           
  8363                           ;lcd_x8.c: 33: delay_cycles(1);
  8364  004418  0E01               	movlw	1
  8365  00441A  EC64  F021         	call	_delay_cycles
  8366                           
  8367                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  8368  00441E  8284               	bsf	3972,1,c	;volatile
  8369                           
  8370                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  8371  004420  0004               	clrwdt	
  8372  004422  F000               	nop		;2 cycle nop
  8373                           
  8374                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  8375  004424  9284               	bcf	3972,1,c	;volatile
  8376  004426  0012               	return		;funcret
  8377  004428                     __end_of_lcd_send_nibble:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           postinc0	equ	0xFEE
  8386                           wreg	equ	0xFE8
  8387                           postdec1	equ	0xFE5
  8388                           fsr1l	equ	0xFE1
  8389                           indf2	equ	0xFDF
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _delay_cycles *****************
  8397 ;; Defined at:
  8398 ;;		line 20 in file "lcd_x8.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  n               1    wreg     unsigned char 
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;  n               1   26[COMRAM] unsigned char 
  8403 ;;  x               2   27[COMRAM] int 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      void 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8414 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;Total ram usage:        6 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    3
  8420 ;; This function calls:
  8421 ;;		Nothing
  8422 ;; This function is called by:
  8423 ;;		_lcd_send_nibble
  8424 ;;		_lcd_send_byte
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text31
  8429  0042C8                     __ptext31:
  8430                           	opt stack 0
  8431  0042C8                     _delay_cycles:
  8432                           	opt stack 23
  8433                           
  8434                           ;incstack = 0
  8435                           ;delay_cycles@n stored from wreg
  8436  0042C8  6E1B               	movwf	delay_cycles@n,c
  8437                           
  8438                           ;lcd_x8.c: 21: int x;
  8439                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  8440  0042CA  0E00               	movlw	0
  8441  0042CC  6E1D               	movwf	delay_cycles@x+1,c
  8442  0042CE  0E00               	movlw	0
  8443  0042D0  6E1C               	movwf	delay_cycles@x,c
  8444  0042D2  D003               	goto	l2941
  8445  0042D4                     l147:
  8446  0042D4  0004               	clrwdt		;# 
  8447  0042D6  4A1C               	infsnz	delay_cycles@x,f,c
  8448  0042D8  2A1D               	incf	delay_cycles@x+1,f,c
  8449  0042DA                     l2941:
  8450  0042DA  501B               	movf	delay_cycles@n,w,c
  8451  0042DC  6E18               	movwf	??_delay_cycles& (0+255),c
  8452  0042DE  6A19               	clrf	(??_delay_cycles+1)& (0+255),c
  8453  0042E0  501C               	movf	delay_cycles@x,w,c
  8454  0042E2  5C18               	subwf	??_delay_cycles,w,c
  8455  0042E4  5019               	movf	??_delay_cycles+1,w,c
  8456  0042E6  0A80               	xorlw	128
  8457  0042E8  6E1A               	movwf	(??_delay_cycles+2)& (0+255),c
  8458  0042EA  501D               	movf	delay_cycles@x+1,w,c
  8459  0042EC  0A80               	xorlw	128
  8460  0042EE  581A               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  8461  0042F0  A0D8               	btfss	status,0,c
  8462  0042F2  0012               	return	
  8463  0042F4  D7EF               	goto	l147
  8464  0042F6                     __end_of_delay_cycles:
  8465                           	opt stack 0
  8466                           tblptru	equ	0xFF8
  8467                           tblptrh	equ	0xFF7
  8468                           tblptrl	equ	0xFF6
  8469                           tablat	equ	0xFF5
  8470                           prodh	equ	0xFF4
  8471                           prodl	equ	0xFF3
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           postdec1	equ	0xFE5
  8475                           fsr1l	equ	0xFE1
  8476                           indf2	equ	0xFDF
  8477                           postinc2	equ	0xFDE
  8478                           postdec2	equ	0xFDD
  8479                           fsr2h	equ	0xFDA
  8480                           fsr2l	equ	0xFD9
  8481                           status	equ	0xFD8
  8482                           
  8483 ;; *************** function _delay_ms *****************
  8484 ;; Defined at:
  8485 ;;		line 12 in file "lcd_x8.c"
  8486 ;; Parameters:    Size  Location     Type
  8487 ;;  n               2   23[COMRAM] unsigned int 
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;  x               2   25[COMRAM] int 
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  1    wreg      void 
  8492 ;; Registers used:
  8493 ;;		wreg, status,2, status,0
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8499 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;Total ram usage:        4 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    3
  8506 ;; This function calls:
  8507 ;;		Nothing
  8508 ;; This function is called by:
  8509 ;;		_main
  8510 ;;		_lcd_send_byte
  8511 ;;		_lcd_init
  8512 ;;		_lcd_putc
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text32
  8517  0043E2                     __ptext32:
  8518                           	opt stack 0
  8519  0043E2                     _delay_ms:
  8520                           	opt stack 24
  8521                           
  8522                           ;lcd_x8.c: 13: int x;
  8523                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  8524                           
  8525                           ;incstack = 0
  8526  0043E2  0E00               	movlw	0
  8527  0043E4  6E1B               	movwf	delay_ms@x+1,c
  8528  0043E6  0E00               	movlw	0
  8529  0043E8  6E1A               	movwf	delay_ms@x,c
  8530  0043EA  D006               	goto	l140
  8531  0043EC                     l2945:
  8532                           
  8533                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  8534  0043EC  0EFA               	movlw	250
  8535  0043EE                     u6867:
  8536  0043EE  0004               	clrwdt	
  8537  0043F0  2EE8               	decfsz	wreg,f,c
  8538  0043F2  D7FD               	goto	u6867
  8539  0043F4  4A1A               	infsnz	delay_ms@x,f,c
  8540  0043F6  2A1B               	incf	delay_ms@x+1,f,c
  8541  0043F8                     l140:
  8542  0043F8  501A               	movf	delay_ms@x,w,c
  8543  0043FA  5C18               	subwf	delay_ms@n,w,c
  8544  0043FC  501B               	movf	delay_ms@x+1,w,c
  8545  0043FE  5819               	subwfb	delay_ms@n+1,w,c
  8546  004400  A0D8               	btfss	status,0,c
  8547  004402  0012               	return	
  8548  004404  D7F3               	goto	l2945
  8549  004406                     __end_of_delay_ms:
  8550                           	opt stack 0
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodh	equ	0xFF4
  8556                           prodl	equ	0xFF3
  8557                           postinc0	equ	0xFEE
  8558                           wreg	equ	0xFE8
  8559                           postdec1	equ	0xFE5
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           fsr2h	equ	0xFDA
  8565                           fsr2l	equ	0xFD9
  8566                           status	equ	0xFD8
  8567                           
  8568 ;; *************** function _is_byte_available *****************
  8569 ;; Defined at:
  8570 ;;		line 21 in file "my_ser.c"
  8571 ;; Parameters:    Size  Location     Type
  8572 ;;		None
  8573 ;; Auto vars:     Size  Location     Type
  8574 ;;		None
  8575 ;; Return value:  Size  Location     Type
  8576 ;;                  1    wreg      unsigned char 
  8577 ;; Registers used:
  8578 ;;		wreg
  8579 ;; Tracked objects:
  8580 ;;		On entry : 0/0
  8581 ;;		On exit  : 0/0
  8582 ;;		Unchanged: 0/0
  8583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8588 ;;Total ram usage:        0 bytes
  8589 ;; Hardware stack levels used:    1
  8590 ;; Hardware stack levels required when called:    3
  8591 ;; This function calls:
  8592 ;;		Nothing
  8593 ;; This function is called by:
  8594 ;;		_main
  8595 ;; This function uses a non-reentrant model
  8596 ;;
  8597                           
  8598                           	psect	text33
  8599  004464                     __ptext33:
  8600                           	opt stack 0
  8601  004464                     _is_byte_available:
  8602                           	opt stack 27
  8603                           
  8604                           ;my_ser.c: 23: if (RCSTAbits.FERR || RCSTAbits.OERR)
  8605                           
  8606                           ;incstack = 0
  8607  004464  B4AB               	btfsc	4011,2,c	;volatile
  8608  004466  D002               	goto	l279
  8609  004468  A2AB               	btfss	4011,1,c	;volatile
  8610  00446A  D002               	goto	l277
  8611  00446C                     l279:
  8612                           
  8613                           ;my_ser.c: 24: {
  8614                           ;my_ser.c: 25: RCSTAbits.CREN = 0;
  8615  00446C  98AB               	bcf	4011,4,c	;volatile
  8616                           
  8617                           ;my_ser.c: 26: RCSTAbits.CREN = 1;
  8618  00446E  88AB               	bsf	4011,4,c	;volatile
  8619  004470                     l277:
  8620                           
  8621                           ;my_ser.c: 27: }
  8622                           ;my_ser.c: 29: if (PIR1bits.RCIF) return 1;
  8623  004470  AA9E               	btfss	3998,5,c	;volatile
  8624  004472  D002               	goto	l4081
  8625  004474  0E01               	movlw	1
  8626  004476  0012               	return	
  8627  004478                     l4081:
  8628                           
  8629                           ;my_ser.c: 30: else return 0;
  8630  004478  0E00               	movlw	0
  8631  00447A  0012               	return	
  8632  00447C                     __end_of_is_byte_available:
  8633                           	opt stack 0
  8634                           tblptru	equ	0xFF8
  8635                           tblptrh	equ	0xFF7
  8636                           tblptrl	equ	0xFF6
  8637                           tablat	equ	0xFF5
  8638                           prodh	equ	0xFF4
  8639                           prodl	equ	0xFF3
  8640                           postinc0	equ	0xFEE
  8641                           wreg	equ	0xFE8
  8642                           postdec1	equ	0xFE5
  8643                           fsr1l	equ	0xFE1
  8644                           indf2	equ	0xFDF
  8645                           postinc2	equ	0xFDE
  8646                           postdec2	equ	0xFDD
  8647                           fsr2h	equ	0xFDA
  8648                           fsr2l	equ	0xFD9
  8649                           status	equ	0xFD8
  8650                           
  8651 ;; *************** function _init_pwm1 *****************
  8652 ;; Defined at:
  8653 ;;		line 5 in file "my_pwm.c"
  8654 ;; Parameters:    Size  Location     Type
  8655 ;;		None
  8656 ;; Auto vars:     Size  Location     Type
  8657 ;;		None
  8658 ;; Return value:  Size  Location     Type
  8659 ;;                  1    wreg      void 
  8660 ;; Registers used:
  8661 ;;		wreg, status,2
  8662 ;; Tracked objects:
  8663 ;;		On entry : 0/0
  8664 ;;		On exit  : 0/0
  8665 ;;		Unchanged: 0/0
  8666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;Total ram usage:        0 bytes
  8672 ;; Hardware stack levels used:    1
  8673 ;; Hardware stack levels required when called:    3
  8674 ;; This function calls:
  8675 ;;		Nothing
  8676 ;; This function is called by:
  8677 ;;		_main
  8678 ;; This function uses a non-reentrant model
  8679 ;;
  8680                           
  8681                           	psect	text34
  8682  00448C                     __ptext34:
  8683                           	opt stack 0
  8684  00448C                     _init_pwm1:
  8685                           	opt stack 27
  8686                           
  8687                           ;my_pwm.c: 7: PR2 = 255;
  8688                           
  8689                           ;incstack = 0
  8690  00448C  68CB               	setf	4043,c	;volatile
  8691                           
  8692                           ;my_pwm.c: 8: T2CON = 0;
  8693  00448E  0E00               	movlw	0
  8694  004490  6ECA               	movwf	4042,c	;volatile
  8695                           
  8696                           ;my_pwm.c: 9: CCP1CON = 0x0C;
  8697  004492  0E0C               	movlw	12
  8698  004494  6EBD               	movwf	4029,c	;volatile
  8699                           
  8700                           ;my_pwm.c: 11: T2CONbits.TMR2ON = 1;
  8701  004496  84CA               	bsf	4042,2,c	;volatile
  8702                           
  8703                           ;my_pwm.c: 12: TRISCbits.RC2 =0;
  8704  004498  9494               	bcf	3988,2,c	;volatile
  8705  00449A  0012               	return		;funcret
  8706  00449C                     __end_of_init_pwm1:
  8707                           	opt stack 0
  8708                           tblptru	equ	0xFF8
  8709                           tblptrh	equ	0xFF7
  8710                           tblptrl	equ	0xFF6
  8711                           tablat	equ	0xFF5
  8712                           prodh	equ	0xFF4
  8713                           prodl	equ	0xFF3
  8714                           postinc0	equ	0xFEE
  8715                           wreg	equ	0xFE8
  8716                           postdec1	equ	0xFE5
  8717                           fsr1l	equ	0xFE1
  8718                           indf2	equ	0xFDF
  8719                           postinc2	equ	0xFDE
  8720                           postdec2	equ	0xFDD
  8721                           fsr2h	equ	0xFDA
  8722                           fsr2l	equ	0xFD9
  8723                           status	equ	0xFD8
  8724                           
  8725 ;; *************** function _init_adc_no_lib *****************
  8726 ;; Defined at:
  8727 ;;		line 11 in file "my_adc.c"
  8728 ;; Parameters:    Size  Location     Type
  8729 ;;		None
  8730 ;; Auto vars:     Size  Location     Type
  8731 ;;		None
  8732 ;; Return value:  Size  Location     Type
  8733 ;;                  1    wreg      void 
  8734 ;; Registers used:
  8735 ;;		wreg, status,2
  8736 ;; Tracked objects:
  8737 ;;		On entry : 0/0
  8738 ;;		On exit  : 0/0
  8739 ;;		Unchanged: 0/0
  8740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8744 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8745 ;;Total ram usage:        0 bytes
  8746 ;; Hardware stack levels used:    1
  8747 ;; Hardware stack levels required when called:    3
  8748 ;; This function calls:
  8749 ;;		Nothing
  8750 ;; This function is called by:
  8751 ;;		_main
  8752 ;; This function uses a non-reentrant model
  8753 ;;
  8754                           
  8755                           	psect	text35
  8756  00449C                     __ptext35:
  8757                           	opt stack 0
  8758  00449C                     _init_adc_no_lib:
  8759                           	opt stack 27
  8760                           
  8761                           ;my_adc.c: 14: ADCON0 = 0;
  8762                           
  8763                           ;incstack = 0
  8764  00449C  0E00               	movlw	0
  8765  00449E  6EC2               	movwf	4034,c	;volatile
  8766                           
  8767                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  8768  0044A0  80C2               	bsf	4034,0,c	;volatile
  8769                           
  8770                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  8771  0044A2  0E89               	movlw	137
  8772  0044A4  6EC0               	movwf	4032,c	;volatile
  8773  0044A6  0012               	return		;funcret
  8774  0044A8                     __end_of_init_adc_no_lib:
  8775                           	opt stack 0
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           postinc0	equ	0xFEE
  8783                           wreg	equ	0xFE8
  8784                           postdec1	equ	0xFE5
  8785                           fsr1l	equ	0xFE1
  8786                           indf2	equ	0xFDF
  8787                           postinc2	equ	0xFDE
  8788                           postdec2	equ	0xFDD
  8789                           fsr2h	equ	0xFDA
  8790                           fsr2l	equ	0xFD9
  8791                           status	equ	0xFD8
  8792                           
  8793 ;; *************** function _initTimers01 *****************
  8794 ;; Defined at:
  8795 ;;		line 48 in file "timer.c"
  8796 ;; Parameters:    Size  Location     Type
  8797 ;;		None
  8798 ;; Auto vars:     Size  Location     Type
  8799 ;;		None
  8800 ;; Return value:  Size  Location     Type
  8801 ;;                  2   36[None  ] int 
  8802 ;; Registers used:
  8803 ;;		wreg, status,2, cstack
  8804 ;; Tracked objects:
  8805 ;;		On entry : 0/0
  8806 ;;		On exit  : 0/0
  8807 ;;		Unchanged: 0/0
  8808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;Total ram usage:        0 bytes
  8814 ;; Hardware stack levels used:    1
  8815 ;; Hardware stack levels required when called:    4
  8816 ;; This function calls:
  8817 ;;		_reloadTimer1
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	text36
  8824  00423A                     __ptext36:
  8825                           	opt stack 0
  8826  00423A                     _initTimers01:
  8827                           	opt stack 26
  8828                           
  8829                           ;timer.c: 49: count_t1=0;
  8830                           
  8831                           ;incstack = 0
  8832  00423A  0E00               	movlw	0
  8833  00423C  6E56               	movwf	_count_t1+1,c
  8834  00423E  0E00               	movlw	0
  8835  004240  6E55               	movwf	_count_t1,c
  8836                           
  8837                           ;timer.c: 52: INTCON = 0;
  8838  004242  0E00               	movlw	0
  8839  004244  6EF2               	movwf	intcon,c	;volatile
  8840                           
  8841                           ;timer.c: 53: PORTD = 0;
  8842  004246  0E00               	movlw	0
  8843  004248  6E83               	movwf	3971,c	;volatile
  8844                           
  8845                           ;timer.c: 54: T1CON = 0x30 ;
  8846  00424A  0E30               	movlw	48
  8847  00424C  6ECD               	movwf	4045,c	;volatile
  8848                           
  8849                           ;timer.c: 58: reloadTimer1();
  8850  00424E  EC54  F022         	call	_reloadTimer1	;wreg free
  8851                           
  8852                           ;timer.c: 59: RCONbits.IPEN = 0;
  8853  004252  9ED0               	bcf	4048,7,c	;volatile
  8854                           
  8855                           ;timer.c: 60: PIE1 = 0;
  8856  004254  0E00               	movlw	0
  8857  004256  6E9D               	movwf	3997,c	;volatile
  8858                           
  8859                           ;timer.c: 62: PIE1bits.TMR1IE = 1;
  8860  004258  809D               	bsf	3997,0,c	;volatile
  8861                           
  8862                           ;timer.c: 63: PIE1bits.RCIE = 1;
  8863  00425A  8A9D               	bsf	3997,5,c	;volatile
  8864                           
  8865                           ;timer.c: 64: PIR1 =0;
  8866  00425C  0E00               	movlw	0
  8867  00425E  6E9E               	movwf	3998,c	;volatile
  8868                           
  8869                           ;timer.c: 66: PIE2 =0;
  8870  004260  0E00               	movlw	0
  8871  004262  6EA0               	movwf	4000,c	;volatile
  8872                           
  8873                           ;timer.c: 68: INTCONbits.GIEH = 1;
  8874  004264  8EF2               	bsf	intcon,7,c	;volatile
  8875                           
  8876                           ;timer.c: 69: INTCONbits.GIEL = 1;
  8877  004266  8CF2               	bsf	intcon,6,c	;volatile
  8878                           
  8879                           ;timer.c: 70: T1CONbits.TMR1ON = 1;
  8880  004268  80CD               	bsf	4045,0,c	;volatile
  8881  00426A  0012               	return		;funcret
  8882  00426C                     __end_of_initTimers01:
  8883                           	opt stack 0
  8884                           tblptru	equ	0xFF8
  8885                           tblptrh	equ	0xFF7
  8886                           tblptrl	equ	0xFF6
  8887                           tablat	equ	0xFF5
  8888                           prodh	equ	0xFF4
  8889                           prodl	equ	0xFF3
  8890                           intcon	equ	0xFF2
  8891                           postinc0	equ	0xFEE
  8892                           wreg	equ	0xFE8
  8893                           postdec1	equ	0xFE5
  8894                           fsr1l	equ	0xFE1
  8895                           indf2	equ	0xFDF
  8896                           postinc2	equ	0xFDE
  8897                           postdec2	equ	0xFDD
  8898                           fsr2h	equ	0xFDA
  8899                           fsr2l	equ	0xFD9
  8900                           status	equ	0xFD8
  8901                           
  8902 ;; *************** function _reloadTimer1 *****************
  8903 ;; Defined at:
  8904 ;;		line 16 in file "timer.c"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;		None
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;		None
  8909 ;; Return value:  Size  Location     Type
  8910 ;;                  1    wreg      void 
  8911 ;; Registers used:
  8912 ;;		wreg, status,2
  8913 ;; Tracked objects:
  8914 ;;		On entry : 0/0
  8915 ;;		On exit  : 0/0
  8916 ;;		Unchanged: 0/0
  8917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;Total ram usage:        0 bytes
  8923 ;; Hardware stack levels used:    1
  8924 ;; Hardware stack levels required when called:    3
  8925 ;; This function calls:
  8926 ;;		Nothing
  8927 ;; This function is called by:
  8928 ;;		_initTimers01
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text37
  8933  0044A8                     __ptext37:
  8934                           	opt stack 0
  8935  0044A8                     _reloadTimer1:
  8936                           	opt stack 26
  8937                           
  8938                           ;timer.c: 18: TMR1H = (unsigned char) ((40536 >> 8) & 0x00FF);
  8939                           
  8940                           ;incstack = 0
  8941  0044A8  0E9E               	movlw	158
  8942  0044AA  6ECF               	movwf	4047,c	;volatile
  8943                           
  8944                           ;timer.c: 19: TMR1L = (unsigned char)(40536 & 0x00FF );
  8945  0044AC  0E58               	movlw	88
  8946  0044AE  6ECE               	movwf	4046,c	;volatile
  8947  0044B0  0012               	return		;funcret
  8948  0044B2                     __end_of_reloadTimer1:
  8949                           	opt stack 0
  8950                           tblptru	equ	0xFF8
  8951                           tblptrh	equ	0xFF7
  8952                           tblptrl	equ	0xFF6
  8953                           tablat	equ	0xFF5
  8954                           prodh	equ	0xFF4
  8955                           prodl	equ	0xFF3
  8956                           intcon	equ	0xFF2
  8957                           postinc0	equ	0xFEE
  8958                           wreg	equ	0xFE8
  8959                           postdec1	equ	0xFE5
  8960                           fsr1l	equ	0xFE1
  8961                           indf2	equ	0xFDF
  8962                           postinc2	equ	0xFDE
  8963                           postdec2	equ	0xFDD
  8964                           fsr2h	equ	0xFDA
  8965                           fsr2l	equ	0xFD9
  8966                           status	equ	0xFD8
  8967                           
  8968 ;; *************** function _floor *****************
  8969 ;; Defined at:
  8970 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\floor.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;  x               4   45[BANK0 ] void 
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;  i               4   49[BANK0 ] void 
  8975 ;;  expon           2   53[BANK0 ] int 
  8976 ;; Return value:  Size  Location     Type
  8977 ;;                  4   45[BANK0 ] int 
  8978 ;; Registers used:
  8979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8980 ;; Tracked objects:
  8981 ;;		On entry : 0/0
  8982 ;;		On exit  : 0/0
  8983 ;;		Unchanged: 0/0
  8984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8985 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8986 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8988 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8989 ;;Total ram usage:       10 bytes
  8990 ;; Hardware stack levels used:    1
  8991 ;; Hardware stack levels required when called:    4
  8992 ;; This function calls:
  8993 ;;		___fladd
  8994 ;;		___flge
  8995 ;;		___fltol
  8996 ;;		___xxtofl
  8997 ;;		_frexp
  8998 ;; This function is called by:
  8999 ;;		_main
  9000 ;; This function uses a non-reentrant model
  9001 ;;
  9002                           
  9003                           	psect	text38
  9004  00383C                     __ptext38:
  9005                           	opt stack 0
  9006  00383C                     _floor:
  9007                           	opt stack 26
  9008                           
  9009                           ;incstack = 0
  9010  00383C  C0AD  F018         	movff	floor@x,frexp@value
  9011  003840  C0AE  F019         	movff	floor@x+1,frexp@value+1
  9012  003844  C0AF  F01A         	movff	floor@x+2,frexp@value+2
  9013  003848  C0B0  F01B         	movff	floor@x+3,frexp@value+3
  9014  00384C  0EB5               	movlw	low floor@expon
  9015  00384E  6E1C               	movwf	frexp@eptr,c
  9016  003850  0E00               	movlw	high floor@expon
  9017  003852  6E1D               	movwf	frexp@eptr+1,c
  9018  003854  ECDA  F01E         	call	_frexp	;wreg free
  9019  003858  0100               	movlb	0	; () banked
  9020  00385A  AFB6               	btfss	(floor@expon+1)& (0+255),7,b
  9021  00385C  D017               	goto	l5663
  9022                           
  9023                           ; BSR set to: 0
  9024  00385E  0100               	movlb	0	; () banked
  9025  003860  AFB0               	btfss	(floor@x+3)& (0+255),7,b
  9026  003862  D00A               	goto	l5659
  9027                           
  9028                           ; BSR set to: 0
  9029  003864  0E00               	movlw	0
  9030  003866  0100               	movlb	0	; () banked
  9031  003868  6FAD               	movwf	?_floor& (0+255),b
  9032  00386A  0E00               	movlw	0
  9033  00386C  6FAE               	movwf	(?_floor+1)& (0+255),b
  9034  00386E  0E80               	movlw	128
  9035  003870  6FAF               	movwf	(?_floor+2)& (0+255),b
  9036  003872  0EBF               	movlw	191
  9037  003874  6FB0               	movwf	(?_floor+3)& (0+255),b
  9038                           
  9039                           ; BSR set to: 0
  9040  003876  0012               	return	
  9041  003878                     l5659:
  9042                           
  9043                           ; BSR set to: 0
  9044  003878  0E00               	movlw	0
  9045  00387A  0100               	movlb	0	; () banked
  9046  00387C  6FAD               	movwf	?_floor& (0+255),b
  9047  00387E  0E00               	movlw	0
  9048  003880  6FAE               	movwf	(?_floor+1)& (0+255),b
  9049  003882  0E00               	movlw	0
  9050  003884  6FAF               	movwf	(?_floor+2)& (0+255),b
  9051  003886  0E00               	movlw	0
  9052  003888  6FB0               	movwf	(?_floor+3)& (0+255),b
  9053                           
  9054                           ; BSR set to: 0
  9055  00388A  0012               	return	
  9056  00388C                     l5663:
  9057                           
  9058                           ; BSR set to: 0
  9059  00388C  0100               	movlb	0	; () banked
  9060  00388E  51B6               	movf	(floor@expon+1)& (0+255),w,b
  9061  003890  E105               	bnz	u6660
  9062  003892  0E1D               	movlw	29
  9063  003894  0100               	movlb	0	; () banked
  9064  003896  5DB5               	subwf	floor@expon& (0+255),w,b
  9065  003898  A0D8               	btfss	status,0,c
  9066  00389A  D009               	goto	l5667
  9067  00389C                     u6660:
  9068                           
  9069                           ; BSR set to: 0
  9070  00389C  C0AD  F0AD         	movff	floor@x,?_floor
  9071  0038A0  C0AE  F0AE         	movff	floor@x+1,?_floor+1
  9072  0038A4  C0AF  F0AF         	movff	floor@x+2,?_floor+2
  9073  0038A8  C0B0  F0B0         	movff	floor@x+3,?_floor+3
  9074  0038AC  0012               	return	
  9075  0038AE                     l5667:
  9076                           
  9077                           ; BSR set to: 0
  9078  0038AE  C0AD  F039         	movff	floor@x,___fltol@f1
  9079  0038B2  C0AE  F03A         	movff	floor@x+1,___fltol@f1+1
  9080  0038B6  C0AF  F03B         	movff	floor@x+2,___fltol@f1+2
  9081  0038BA  C0B0  F03C         	movff	floor@x+3,___fltol@f1+3
  9082  0038BE  ECAD  F01C         	call	___fltol	;wreg free
  9083  0038C2  C039  F043         	movff	?___fltol,___xxtofl@val
  9084  0038C6  C03A  F044         	movff	?___fltol+1,___xxtofl@val+1
  9085  0038CA  C03B  F045         	movff	?___fltol+2,___xxtofl@val+2
  9086  0038CE  C03C  F046         	movff	?___fltol+3,___xxtofl@val+3
  9087  0038D2  0E01               	movlw	1
  9088  0038D4  ECB9  F019         	call	___xxtofl
  9089  0038D8  C043  F0B1         	movff	?___xxtofl,floor@i
  9090  0038DC  C044  F0B2         	movff	?___xxtofl+1,floor@i+1
  9091  0038E0  C045  F0B3         	movff	?___xxtofl+2,floor@i+2
  9092  0038E4  C046  F0B4         	movff	?___xxtofl+3,floor@i+3
  9093  0038E8  C0AD  F039         	movff	floor@x,___flge@ff1
  9094  0038EC  C0AE  F03A         	movff	floor@x+1,___flge@ff1+1
  9095  0038F0  C0AF  F03B         	movff	floor@x+2,___flge@ff1+2
  9096  0038F4  C0B0  F03C         	movff	floor@x+3,___flge@ff1+3
  9097  0038F8  C0B1  F03D         	movff	floor@i,___flge@ff2
  9098  0038FC  C0B2  F03E         	movff	floor@i+1,___flge@ff2+1
  9099  003900  C0B3  F03F         	movff	floor@i+2,___flge@ff2+2
  9100  003904  C0B4  F040         	movff	floor@i+3,___flge@ff2+3
  9101  003908  EC8E  F01B         	call	___flge	;wreg free
  9102  00390C  B0D8               	btfsc	status,0,c
  9103  00390E  D01C               	goto	l740
  9104  003910  C0B1  F099         	movff	floor@i,___fladd@b
  9105  003914  C0B2  F09A         	movff	floor@i+1,___fladd@b+1
  9106  003918  C0B3  F09B         	movff	floor@i+2,___fladd@b+2
  9107  00391C  C0B4  F09C         	movff	floor@i+3,___fladd@b+3
  9108  003920  0E00               	movlw	0
  9109  003922  0100               	movlb	0	; () banked
  9110  003924  6F9D               	movwf	___fladd@a& (0+255),b
  9111  003926  0E00               	movlw	0
  9112  003928  6F9E               	movwf	(___fladd@a+1)& (0+255),b
  9113  00392A  0E80               	movlw	128
  9114  00392C  6F9F               	movwf	(___fladd@a+2)& (0+255),b
  9115  00392E  0EBF               	movlw	191
  9116  003930  6FA0               	movwf	(___fladd@a+3)& (0+255),b
  9117  003932  EC4B  F00E         	call	___fladd	;wreg free
  9118  003936  C099  F0AD         	movff	?___fladd,?_floor
  9119  00393A  C09A  F0AE         	movff	?___fladd+1,?_floor+1
  9120  00393E  C09B  F0AF         	movff	?___fladd+2,?_floor+2
  9121  003942  C09C  F0B0         	movff	?___fladd+3,?_floor+3
  9122  003946  0012               	return	
  9123  003948                     l740:
  9124  003948  C0B1  F0AD         	movff	floor@i,?_floor
  9125  00394C  C0B2  F0AE         	movff	floor@i+1,?_floor+1
  9126  003950  C0B3  F0AF         	movff	floor@i+2,?_floor+2
  9127  003954  C0B4  F0B0         	movff	floor@i+3,?_floor+3
  9128  003958  0012               	return		;funcret
  9129  00395A                     __end_of_floor:
  9130                           	opt stack 0
  9131                           tblptru	equ	0xFF8
  9132                           tblptrh	equ	0xFF7
  9133                           tblptrl	equ	0xFF6
  9134                           tablat	equ	0xFF5
  9135                           prodh	equ	0xFF4
  9136                           prodl	equ	0xFF3
  9137                           intcon	equ	0xFF2
  9138                           postinc0	equ	0xFEE
  9139                           wreg	equ	0xFE8
  9140                           postdec1	equ	0xFE5
  9141                           fsr1l	equ	0xFE1
  9142                           indf2	equ	0xFDF
  9143                           postinc2	equ	0xFDE
  9144                           postdec2	equ	0xFDD
  9145                           fsr2h	equ	0xFDA
  9146                           fsr2l	equ	0xFD9
  9147                           status	equ	0xFD8
  9148                           
  9149 ;; *************** function _frexp *****************
  9150 ;; Defined at:
  9151 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;  value           4   23[COMRAM] int 
  9154 ;;  eptr            2   27[COMRAM] PTR int 
  9155 ;;		 -> floor@expon(2), 
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;		None
  9158 ;; Return value:  Size  Location     Type
  9159 ;;                  4   23[COMRAM] PTR int 
  9160 ;; Registers used:
  9161 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9167 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;Total ram usage:        8 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; Hardware stack levels required when called:    3
  9174 ;; This function calls:
  9175 ;;		Nothing
  9176 ;; This function is called by:
  9177 ;;		_floor
  9178 ;; This function uses a non-reentrant model
  9179 ;;
  9180                           
  9181                           	psect	text39
  9182  003DB4                     __ptext39:
  9183                           	opt stack 0
  9184  003DB4                     _frexp:
  9185                           	opt stack 26
  9186                           
  9187                           ;incstack = 0
  9188  003DB4  5018               	movf	frexp@value,w,c
  9189  003DB6  1019               	iorwf	frexp@value+1,w,c
  9190  003DB8  101A               	iorwf	frexp@value+2,w,c
  9191  003DBA  101B               	iorwf	frexp@value+3,w,c
  9192  003DBC  A4D8               	btfss	status,2,c
  9193  003DBE  D009               	goto	l3809
  9194  003DC0  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9195  003DC4  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9196  003DC8  0E00               	movlw	0
  9197  003DCA  6EDE               	movwf	postinc2,c
  9198  003DCC  0E00               	movlw	0
  9199  003DCE  6EDD               	movwf	postdec2,c
  9200                           
  9201                           ;	Return value of _frexp is never used
  9202  003DD0  0012               	return	
  9203  003DD2                     l3809:
  9204  003DD2  501B               	movf	frexp@value+3,w,c
  9205  003DD4  0B7F               	andlw	127
  9206  003DD6  6E1E               	movwf	??_frexp& (0+255),c
  9207  003DD8  6A1F               	clrf	(??_frexp+1)& (0+255),c
  9208  003DDA  90D8               	bcf	status,0,c
  9209  003DDC  361E               	rlcf	??_frexp,f,c
  9210  003DDE  361F               	rlcf	??_frexp+1,f,c
  9211  003DE0  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9212  003DE4  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9213  003DE8  C01E  FFDE         	movff	??_frexp,postinc2
  9214  003DEC  C01F  FFDD         	movff	??_frexp+1,postdec2
  9215  003DF0  AE1A               	btfss	frexp@value+2,7,c
  9216  003DF2  D003               	goto	u3850
  9217  003DF4  6A1E               	clrf	??_frexp& (0+255),c
  9218  003DF6  2A1E               	incf	??_frexp& (0+255),f,c
  9219  003DF8  D001               	goto	u3858
  9220  003DFA                     u3850:
  9221  003DFA  6A1E               	clrf	??_frexp& (0+255),c
  9222  003DFC                     u3858:
  9223  003DFC  501E               	movf	??_frexp,w,c
  9224  003DFE  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9225  003E02  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9226  003E06  12DE               	iorwf	postinc2,f,c
  9227  003E08  0E00               	movlw	0
  9228  003E0A  12DD               	iorwf	postdec2,f,c
  9229  003E0C  C01C  FFD9         	movff	frexp@eptr,fsr2l
  9230  003E10  C01D  FFDA         	movff	frexp@eptr+1,fsr2h
  9231  003E14  0E82               	movlw	130
  9232  003E16  26DE               	addwf	postinc2,f,c
  9233  003E18  0EFF               	movlw	255
  9234  003E1A  22DD               	addwfc	postdec2,f,c
  9235  003E1C  801B               	bsf	frexp@value+3,0,c
  9236  003E1E  821B               	bsf	frexp@value+3,1,c
  9237  003E20  841B               	bsf	frexp@value+3,2,c
  9238  003E22  861B               	bsf	frexp@value+3,3,c
  9239  003E24  881B               	bsf	frexp@value+3,4,c
  9240  003E26  8A1B               	bsf	frexp@value+3,5,c
  9241  003E28  9C1B               	bcf	frexp@value+3,6,c
  9242  003E2A  9E1A               	bcf	frexp@value+2,7,c
  9243  003E2C  0012               	return	
  9244  003E2E                     __end_of_frexp:
  9245                           	opt stack 0
  9246                           tblptru	equ	0xFF8
  9247                           tblptrh	equ	0xFF7
  9248                           tblptrl	equ	0xFF6
  9249                           tablat	equ	0xFF5
  9250                           prodh	equ	0xFF4
  9251                           prodl	equ	0xFF3
  9252                           intcon	equ	0xFF2
  9253                           postinc0	equ	0xFEE
  9254                           wreg	equ	0xFE8
  9255                           postdec1	equ	0xFE5
  9256                           fsr1l	equ	0xFE1
  9257                           indf2	equ	0xFDF
  9258                           postinc2	equ	0xFDE
  9259                           postdec2	equ	0xFDD
  9260                           fsr2h	equ	0xFDA
  9261                           fsr2l	equ	0xFD9
  9262                           status	equ	0xFD8
  9263                           
  9264 ;; *************** function ___xxtofl *****************
  9265 ;; Defined at:
  9266 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\xxtofl.c"
  9267 ;; Parameters:    Size  Location     Type
  9268 ;;  sign            1    wreg     unsigned char 
  9269 ;;  val             4   66[COMRAM] long 
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;  sign            1   74[COMRAM] unsigned char 
  9272 ;;  arg             4   76[COMRAM] unsigned long 
  9273 ;;  exp             1   75[COMRAM] unsigned char 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  4   66[COMRAM] unsigned char 
  9276 ;; Registers used:
  9277 ;;		wreg, status,2, status,0
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;Total ram usage:       14 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    3
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_read_adc_voltage
  9294 ;;		_read_adc_temp
  9295 ;;		_sprintf
  9296 ;;		_floor
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text40
  9301  003372                     __ptext40:
  9302                           	opt stack 0
  9303  003372                     ___xxtofl:
  9304                           	opt stack 26
  9305                           
  9306                           ;incstack = 0
  9307                           ;___xxtofl@sign stored from wreg
  9308  003372  6E4B               	movwf	___xxtofl@sign,c
  9309  003374  504B               	movf	___xxtofl@sign,w,c
  9310  003376  A4D8               	btfss	status,2,c
  9311  003378  AE46               	btfss	___xxtofl@val+3,7,c
  9312  00337A  D01A               	goto	l1103
  9313  00337C  C043  F047         	movff	___xxtofl@val,??___xxtofl
  9314  003380  C044  F048         	movff	___xxtofl@val+1,??___xxtofl+1
  9315  003384  C045  F049         	movff	___xxtofl@val+2,??___xxtofl+2
  9316  003388  C046  F04A         	movff	___xxtofl@val+3,??___xxtofl+3
  9317  00338C  1E47               	comf	??___xxtofl,f,c
  9318  00338E  1E48               	comf	??___xxtofl+1,f,c
  9319  003390  1E49               	comf	??___xxtofl+2,f,c
  9320  003392  1E4A               	comf	??___xxtofl+3,f,c
  9321  003394  2A47               	incf	??___xxtofl,f,c
  9322  003396  0E00               	movlw	0
  9323  003398  2248               	addwfc	??___xxtofl+1,f,c
  9324  00339A  2249               	addwfc	??___xxtofl+2,f,c
  9325  00339C  224A               	addwfc	??___xxtofl+3,f,c
  9326  00339E  C047  F04D         	movff	??___xxtofl,___xxtofl@arg
  9327  0033A2  C048  F04E         	movff	??___xxtofl+1,___xxtofl@arg+1
  9328  0033A6  C049  F04F         	movff	??___xxtofl+2,___xxtofl@arg+2
  9329  0033AA  C04A  F050         	movff	??___xxtofl+3,___xxtofl@arg+3
  9330  0033AE  D008               	goto	l5311
  9331  0033B0                     l1103:
  9332  0033B0  C043  F04D         	movff	___xxtofl@val,___xxtofl@arg
  9333  0033B4  C044  F04E         	movff	___xxtofl@val+1,___xxtofl@arg+1
  9334  0033B8  C045  F04F         	movff	___xxtofl@val+2,___xxtofl@arg+2
  9335  0033BC  C046  F050         	movff	___xxtofl@val+3,___xxtofl@arg+3
  9336  0033C0                     l5311:
  9337  0033C0  5043               	movf	___xxtofl@val,w,c
  9338  0033C2  1044               	iorwf	___xxtofl@val+1,w,c
  9339  0033C4  1045               	iorwf	___xxtofl@val+2,w,c
  9340  0033C6  1046               	iorwf	___xxtofl@val+3,w,c
  9341  0033C8  A4D8               	btfss	status,2,c
  9342  0033CA  D009               	goto	l5317
  9343  0033CC  0E00               	movlw	0
  9344  0033CE  6E43               	movwf	?___xxtofl,c
  9345  0033D0  0E00               	movlw	0
  9346  0033D2  6E44               	movwf	?___xxtofl+1,c
  9347  0033D4  0E00               	movlw	0
  9348  0033D6  6E45               	movwf	?___xxtofl+2,c
  9349  0033D8  0E00               	movlw	0
  9350  0033DA  6E46               	movwf	?___xxtofl+3,c
  9351  0033DC  0012               	return	
  9352  0033DE                     l5317:
  9353  0033DE  0E96               	movlw	150
  9354  0033E0  6E4C               	movwf	___xxtofl@exp,c
  9355  0033E2  D006               	goto	l5321
  9356  0033E4                     l5319:
  9357  0033E4  2A4C               	incf	___xxtofl@exp,f,c
  9358  0033E6  90D8               	bcf	status,0,c
  9359  0033E8  3250               	rrcf	___xxtofl@arg+3,f,c
  9360  0033EA  324F               	rrcf	___xxtofl@arg+2,f,c
  9361  0033EC  324E               	rrcf	___xxtofl@arg+1,f,c
  9362  0033EE  324D               	rrcf	___xxtofl@arg,f,c
  9363  0033F0                     l5321:
  9364  0033F0  0E00               	movlw	0
  9365  0033F2  144D               	andwf	___xxtofl@arg,w,c
  9366  0033F4  6E47               	movwf	??___xxtofl& (0+255),c
  9367  0033F6  0E00               	movlw	0
  9368  0033F8  144E               	andwf	___xxtofl@arg+1,w,c
  9369  0033FA  6E48               	movwf	(??___xxtofl+1)& (0+255),c
  9370  0033FC  0E00               	movlw	0
  9371  0033FE  144F               	andwf	___xxtofl@arg+2,w,c
  9372  003400  6E49               	movwf	(??___xxtofl+2)& (0+255),c
  9373  003402  0EFE               	movlw	254
  9374  003404  1450               	andwf	___xxtofl@arg+3,w,c
  9375  003406  6E4A               	movwf	(??___xxtofl+3)& (0+255),c
  9376  003408  5047               	movf	??___xxtofl,w,c
  9377  00340A  1048               	iorwf	??___xxtofl+1,w,c
  9378  00340C  1049               	iorwf	??___xxtofl+2,w,c
  9379  00340E  104A               	iorwf	??___xxtofl+3,w,c
  9380  003410  B4D8               	btfsc	status,2,c
  9381  003412  D00D               	goto	l1110
  9382  003414  D7E7               	goto	l5319
  9383  003416                     l5323:
  9384  003416  2A4C               	incf	___xxtofl@exp,f,c
  9385  003418  0E01               	movlw	1
  9386  00341A  264D               	addwf	___xxtofl@arg,f,c
  9387  00341C  0E00               	movlw	0
  9388  00341E  224E               	addwfc	___xxtofl@arg+1,f,c
  9389  003420  224F               	addwfc	___xxtofl@arg+2,f,c
  9390  003422  2250               	addwfc	___xxtofl@arg+3,f,c
  9391  003424  90D8               	bcf	status,0,c
  9392  003426  3250               	rrcf	___xxtofl@arg+3,f,c
  9393  003428  324F               	rrcf	___xxtofl@arg+2,f,c
  9394  00342A  324E               	rrcf	___xxtofl@arg+1,f,c
  9395  00342C  324D               	rrcf	___xxtofl@arg,f,c
  9396  00342E                     l1110:
  9397  00342E  0E00               	movlw	0
  9398  003430  144D               	andwf	___xxtofl@arg,w,c
  9399  003432  6E47               	movwf	??___xxtofl& (0+255),c
  9400  003434  0E00               	movlw	0
  9401  003436  144E               	andwf	___xxtofl@arg+1,w,c
  9402  003438  6E48               	movwf	(??___xxtofl+1)& (0+255),c
  9403  00343A  0E00               	movlw	0
  9404  00343C  144F               	andwf	___xxtofl@arg+2,w,c
  9405  00343E  6E49               	movwf	(??___xxtofl+2)& (0+255),c
  9406  003440  0EFF               	movlw	255
  9407  003442  1450               	andwf	___xxtofl@arg+3,w,c
  9408  003444  6E4A               	movwf	(??___xxtofl+3)& (0+255),c
  9409  003446  5047               	movf	??___xxtofl,w,c
  9410  003448  1048               	iorwf	??___xxtofl+1,w,c
  9411  00344A  1049               	iorwf	??___xxtofl+2,w,c
  9412  00344C  104A               	iorwf	??___xxtofl+3,w,c
  9413  00344E  B4D8               	btfsc	status,2,c
  9414  003450  D007               	goto	l5331
  9415  003452  D7E1               	goto	l5323
  9416  003454                     l5329:
  9417  003454  064C               	decf	___xxtofl@exp,f,c
  9418  003456  90D8               	bcf	status,0,c
  9419  003458  364D               	rlcf	___xxtofl@arg,f,c
  9420  00345A  364E               	rlcf	___xxtofl@arg+1,f,c
  9421  00345C  364F               	rlcf	___xxtofl@arg+2,f,c
  9422  00345E  3650               	rlcf	___xxtofl@arg+3,f,c
  9423  003460                     l5331:
  9424  003460  BE4F               	btfsc	___xxtofl@arg+2,7,c
  9425  003462  D003               	goto	l1117
  9426  003464  0E02               	movlw	2
  9427  003466  604C               	cpfslt	___xxtofl@exp,c
  9428  003468  D7F5               	goto	l5329
  9429  00346A                     l1117:
  9430  00346A  B04C               	btfsc	___xxtofl@exp,0,c
  9431  00346C  D008               	goto	l1118
  9432  00346E  0EFF               	movlw	255
  9433  003470  164D               	andwf	___xxtofl@arg,f,c
  9434  003472  0EFF               	movlw	255
  9435  003474  164E               	andwf	___xxtofl@arg+1,f,c
  9436  003476  0E7F               	movlw	127
  9437  003478  164F               	andwf	___xxtofl@arg+2,f,c
  9438  00347A  0EFF               	movlw	255
  9439  00347C  1650               	andwf	___xxtofl@arg+3,f,c
  9440  00347E                     l1118:
  9441  00347E  90D8               	bcf	status,0,c
  9442  003480  324C               	rrcf	___xxtofl@exp,f,c
  9443  003482  C04C  F047         	movff	___xxtofl@exp,??___xxtofl
  9444  003486  6A48               	clrf	(??___xxtofl+1)& (0+255),c
  9445  003488  6A49               	clrf	(??___xxtofl+2)& (0+255),c
  9446  00348A  6A4A               	clrf	(??___xxtofl+3)& (0+255),c
  9447  00348C  C047  F04A         	movff	??___xxtofl,??___xxtofl+3
  9448  003490  6A49               	clrf	??___xxtofl+2,c
  9449  003492  6A48               	clrf	??___xxtofl+1,c
  9450  003494  6A47               	clrf	??___xxtofl,c
  9451  003496  5047               	movf	??___xxtofl,w,c
  9452  003498  124D               	iorwf	___xxtofl@arg,f,c
  9453  00349A  5048               	movf	??___xxtofl+1,w,c
  9454  00349C  124E               	iorwf	___xxtofl@arg+1,f,c
  9455  00349E  5049               	movf	??___xxtofl+2,w,c
  9456  0034A0  124F               	iorwf	___xxtofl@arg+2,f,c
  9457  0034A2  504A               	movf	??___xxtofl+3,w,c
  9458  0034A4  1250               	iorwf	___xxtofl@arg+3,f,c
  9459  0034A6  504B               	movf	___xxtofl@sign,w,c
  9460  0034A8  A4D8               	btfss	status,2,c
  9461  0034AA  AE46               	btfss	___xxtofl@val+3,7,c
  9462  0034AC  D001               	goto	l5343
  9463  0034AE  8E50               	bsf	___xxtofl@arg+3,7,c
  9464  0034B0                     l5343:
  9465  0034B0  C04D  F043         	movff	___xxtofl@arg,?___xxtofl
  9466  0034B4  C04E  F044         	movff	___xxtofl@arg+1,?___xxtofl+1
  9467  0034B8  C04F  F045         	movff	___xxtofl@arg+2,?___xxtofl+2
  9468  0034BC  C050  F046         	movff	___xxtofl@arg+3,?___xxtofl+3
  9469  0034C0  0012               	return	
  9470  0034C2                     __end_of___xxtofl:
  9471                           	opt stack 0
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           postinc0	equ	0xFEE
  9480                           wreg	equ	0xFE8
  9481                           postdec1	equ	0xFE5
  9482                           fsr1l	equ	0xFE1
  9483                           indf2	equ	0xFDF
  9484                           postinc2	equ	0xFDE
  9485                           postdec2	equ	0xFDD
  9486                           fsr2h	equ	0xFDA
  9487                           fsr2l	equ	0xFD9
  9488                           status	equ	0xFD8
  9489                           
  9490 ;; *************** function ___fltol *****************
  9491 ;; Defined at:
  9492 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fltol.c"
  9493 ;; Parameters:    Size  Location     Type
  9494 ;;  f1              4   56[COMRAM] unsigned char 
  9495 ;; Auto vars:     Size  Location     Type
  9496 ;;  exp1            1   65[COMRAM] unsigned char 
  9497 ;;  sign1           1   64[COMRAM] unsigned char 
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  4   56[COMRAM] long 
  9500 ;; Registers used:
  9501 ;;		wreg, status,2, status,0
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9507 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;Total ram usage:       10 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    3
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_main
  9518 ;;		_sprintf
  9519 ;;		_floor
  9520 ;;		_set_pwm1_percent
  9521 ;;		_set_pwm1_voltage
  9522 ;;		_set_pwm1_general
  9523 ;; This function uses a non-reentrant model
  9524 ;;
  9525                           
  9526                           	psect	text41
  9527  00395A                     __ptext41:
  9528                           	opt stack 0
  9529  00395A                     ___fltol:
  9530                           	opt stack 26
  9531                           
  9532                           ;incstack = 0
  9533  00395A  343B               	rlcf	___fltol@f1+2,w,c
  9534  00395C  343C               	rlcf	___fltol@f1+3,w,c
  9535  00395E  6E42               	movwf	___fltol@exp1,c
  9536  003960  5042               	movf	___fltol@exp1,w,c
  9537  003962  A4D8               	btfss	status,2,c
  9538  003964  D009               	goto	l3825
  9539  003966  0E00               	movlw	0
  9540  003968  6E39               	movwf	?___fltol,c
  9541  00396A  0E00               	movlw	0
  9542  00396C  6E3A               	movwf	?___fltol+1,c
  9543  00396E  0E00               	movlw	0
  9544  003970  6E3B               	movwf	?___fltol+2,c
  9545  003972  0E00               	movlw	0
  9546  003974  6E3C               	movwf	?___fltol+3,c
  9547  003976  0012               	return	
  9548  003978                     l3825:
  9549  003978  C039  F03D         	movff	___fltol@f1,??___fltol
  9550  00397C  C03A  F03E         	movff	___fltol@f1+1,??___fltol+1
  9551  003980  C03B  F03F         	movff	___fltol@f1+2,??___fltol+2
  9552  003984  C03C  F040         	movff	___fltol@f1+3,??___fltol+3
  9553  003988  0E20               	movlw	32
  9554  00398A  D005               	goto	u3870
  9555  00398C                     u3875:
  9556  00398C  90D8               	bcf	status,0,c
  9557  00398E  3240               	rrcf	??___fltol+3,f,c
  9558  003990  323F               	rrcf	??___fltol+2,f,c
  9559  003992  323E               	rrcf	??___fltol+1,f,c
  9560  003994  323D               	rrcf	??___fltol,f,c
  9561  003996                     u3870:
  9562  003996  2EE8               	decfsz	wreg,f,c
  9563  003998  D7F9               	goto	u3875
  9564  00399A  503D               	movf	??___fltol,w,c
  9565  00399C  6E41               	movwf	___fltol@sign1,c
  9566  00399E  8E3B               	bsf	___fltol@f1+2,7,c
  9567  0039A0  0EFF               	movlw	255
  9568  0039A2  1639               	andwf	___fltol@f1,f,c
  9569  0039A4  0EFF               	movlw	255
  9570  0039A6  163A               	andwf	___fltol@f1+1,f,c
  9571  0039A8  0EFF               	movlw	255
  9572  0039AA  163B               	andwf	___fltol@f1+2,f,c
  9573  0039AC  0E00               	movlw	0
  9574  0039AE  163C               	andwf	___fltol@f1+3,f,c
  9575  0039B0  0E96               	movlw	150
  9576  0039B2  5E42               	subwf	___fltol@exp1,f,c
  9577  0039B4  AE42               	btfss	___fltol@exp1,7,c
  9578  0039B6  D016               	goto	l3845
  9579  0039B8  5042               	movf	___fltol@exp1,w,c
  9580  0039BA  0A80               	xorlw	128
  9581  0039BC  0F97               	addlw	151
  9582  0039BE  B0D8               	btfsc	status,0,c
  9583  0039C0  D009               	goto	l3841
  9584  0039C2  0E00               	movlw	0
  9585  0039C4  6E39               	movwf	?___fltol,c
  9586  0039C6  0E00               	movlw	0
  9587  0039C8  6E3A               	movwf	?___fltol+1,c
  9588  0039CA  0E00               	movlw	0
  9589  0039CC  6E3B               	movwf	?___fltol+2,c
  9590  0039CE  0E00               	movlw	0
  9591  0039D0  6E3C               	movwf	?___fltol+3,c
  9592  0039D2  0012               	return	
  9593  0039D4                     l3841:
  9594  0039D4  90D8               	bcf	status,0,c
  9595  0039D6  323C               	rrcf	___fltol@f1+3,f,c
  9596  0039D8  323B               	rrcf	___fltol@f1+2,f,c
  9597  0039DA  323A               	rrcf	___fltol@f1+1,f,c
  9598  0039DC  3239               	rrcf	___fltol@f1,f,c
  9599  0039DE  3E42               	incfsz	___fltol@exp1,f,c
  9600  0039E0  D7F9               	goto	l3841
  9601  0039E2  D015               	goto	l3855
  9602  0039E4                     l3845:
  9603  0039E4  0E1F               	movlw	31
  9604  0039E6  6442               	cpfsgt	___fltol@exp1,c
  9605  0039E8  D00F               	goto	l3853
  9606  0039EA  0E00               	movlw	0
  9607  0039EC  6E39               	movwf	?___fltol,c
  9608  0039EE  0E00               	movlw	0
  9609  0039F0  6E3A               	movwf	?___fltol+1,c
  9610  0039F2  0E00               	movlw	0
  9611  0039F4  6E3B               	movwf	?___fltol+2,c
  9612  0039F6  0E00               	movlw	0
  9613  0039F8  6E3C               	movwf	?___fltol+3,c
  9614  0039FA  0012               	return	
  9615  0039FC                     l3851:
  9616  0039FC  90D8               	bcf	status,0,c
  9617  0039FE  3639               	rlcf	___fltol@f1,f,c
  9618  003A00  363A               	rlcf	___fltol@f1+1,f,c
  9619  003A02  363B               	rlcf	___fltol@f1+2,f,c
  9620  003A04  363C               	rlcf	___fltol@f1+3,f,c
  9621  003A06  0642               	decf	___fltol@exp1,f,c
  9622  003A08                     l3853:
  9623  003A08  5042               	movf	___fltol@exp1,w,c
  9624  003A0A  A4D8               	btfss	status,2,c
  9625  003A0C  D7F7               	goto	l3851
  9626  003A0E                     l3855:
  9627  003A0E  5041               	movf	___fltol@sign1,w,c
  9628  003A10  B4D8               	btfsc	status,2,c
  9629  003A12  D008               	goto	l3859
  9630  003A14  1E3C               	comf	___fltol@f1+3,f,c
  9631  003A16  1E3B               	comf	___fltol@f1+2,f,c
  9632  003A18  1E3A               	comf	___fltol@f1+1,f,c
  9633  003A1A  6C39               	negf	___fltol@f1,c
  9634  003A1C  0E00               	movlw	0
  9635  003A1E  223A               	addwfc	___fltol@f1+1,f,c
  9636  003A20  223B               	addwfc	___fltol@f1+2,f,c
  9637  003A22  223C               	addwfc	___fltol@f1+3,f,c
  9638  003A24                     l3859:
  9639  003A24  C039  F039         	movff	___fltol@f1,?___fltol
  9640  003A28  C03A  F03A         	movff	___fltol@f1+1,?___fltol+1
  9641  003A2C  C03B  F03B         	movff	___fltol@f1+2,?___fltol+2
  9642  003A30  C03C  F03C         	movff	___fltol@f1+3,?___fltol+3
  9643  003A34  0012               	return	
  9644  003A36                     __end_of___fltol:
  9645                           	opt stack 0
  9646                           tblptru	equ	0xFF8
  9647                           tblptrh	equ	0xFF7
  9648                           tblptrl	equ	0xFF6
  9649                           tablat	equ	0xFF5
  9650                           prodh	equ	0xFF4
  9651                           prodl	equ	0xFF3
  9652                           intcon	equ	0xFF2
  9653                           postinc0	equ	0xFEE
  9654                           wreg	equ	0xFE8
  9655                           postdec1	equ	0xFE5
  9656                           fsr1l	equ	0xFE1
  9657                           indf2	equ	0xFDF
  9658                           postinc2	equ	0xFDE
  9659                           postdec2	equ	0xFDD
  9660                           fsr2h	equ	0xFDA
  9661                           fsr2l	equ	0xFD9
  9662                           status	equ	0xFD8
  9663                           
  9664 ;; *************** function ___flge *****************
  9665 ;; Defined at:
  9666 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\flge.c"
  9667 ;; Parameters:    Size  Location     Type
  9668 ;;  ff1             4   56[COMRAM] long 
  9669 ;;  ff2             4   60[COMRAM] long 
  9670 ;; Auto vars:     Size  Location     Type
  9671 ;;		None
  9672 ;; Return value:  Size  Location     Type
  9673 ;;		None               void
  9674 ;; Registers used:
  9675 ;;		wreg, status,2, status,0
  9676 ;; Tracked objects:
  9677 ;;		On entry : 0/0
  9678 ;;		On exit  : 0/0
  9679 ;;		Unchanged: 0/0
  9680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9681 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9683 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9684 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9685 ;;Total ram usage:       12 bytes
  9686 ;; Hardware stack levels used:    1
  9687 ;; Hardware stack levels required when called:    3
  9688 ;; This function calls:
  9689 ;;		Nothing
  9690 ;; This function is called by:
  9691 ;;		_main
  9692 ;;		_sprintf
  9693 ;;		_floor
  9694 ;; This function uses a non-reentrant model
  9695 ;;
  9696                           
  9697                           	psect	text42
  9698  00371C                     __ptext42:
  9699                           	opt stack 0
  9700  00371C                     ___flge:
  9701                           	opt stack 26
  9702                           
  9703                           ;incstack = 0
  9704  00371C  0E00               	movlw	0
  9705  00371E  1439               	andwf	___flge@ff1,w,c
  9706  003720  6E41               	movwf	??___flge& (0+255),c
  9707  003722  0E00               	movlw	0
  9708  003724  143A               	andwf	___flge@ff1+1,w,c
  9709  003726  6E42               	movwf	(??___flge+1)& (0+255),c
  9710  003728  0E80               	movlw	128
  9711  00372A  143B               	andwf	___flge@ff1+2,w,c
  9712  00372C  6E43               	movwf	(??___flge+2)& (0+255),c
  9713  00372E  0E7F               	movlw	127
  9714  003730  143C               	andwf	___flge@ff1+3,w,c
  9715  003732  6E44               	movwf	(??___flge+3)& (0+255),c
  9716  003734  5041               	movf	??___flge,w,c
  9717  003736  1042               	iorwf	??___flge+1,w,c
  9718  003738  1043               	iorwf	??___flge+2,w,c
  9719  00373A  1044               	iorwf	??___flge+3,w,c
  9720  00373C  A4D8               	btfss	status,2,c
  9721  00373E  D008               	goto	l3777
  9722  003740  0E00               	movlw	0
  9723  003742  6E39               	movwf	___flge@ff1,c
  9724  003744  0E00               	movlw	0
  9725  003746  6E3A               	movwf	___flge@ff1+1,c
  9726  003748  0E00               	movlw	0
  9727  00374A  6E3B               	movwf	___flge@ff1+2,c
  9728  00374C  0E00               	movlw	0
  9729  00374E  6E3C               	movwf	___flge@ff1+3,c
  9730  003750                     l3777:
  9731  003750  0E00               	movlw	0
  9732  003752  143D               	andwf	___flge@ff2,w,c
  9733  003754  6E41               	movwf	??___flge& (0+255),c
  9734  003756  0E00               	movlw	0
  9735  003758  143E               	andwf	___flge@ff2+1,w,c
  9736  00375A  6E42               	movwf	(??___flge+1)& (0+255),c
  9737  00375C  0E80               	movlw	128
  9738  00375E  143F               	andwf	___flge@ff2+2,w,c
  9739  003760  6E43               	movwf	(??___flge+2)& (0+255),c
  9740  003762  0E7F               	movlw	127
  9741  003764  1440               	andwf	___flge@ff2+3,w,c
  9742  003766  6E44               	movwf	(??___flge+3)& (0+255),c
  9743  003768  5041               	movf	??___flge,w,c
  9744  00376A  1042               	iorwf	??___flge+1,w,c
  9745  00376C  1043               	iorwf	??___flge+2,w,c
  9746  00376E  1044               	iorwf	??___flge+3,w,c
  9747  003770  A4D8               	btfss	status,2,c
  9748  003772  D008               	goto	l3781
  9749  003774  0E00               	movlw	0
  9750  003776  6E3D               	movwf	___flge@ff2,c
  9751  003778  0E00               	movlw	0
  9752  00377A  6E3E               	movwf	___flge@ff2+1,c
  9753  00377C  0E00               	movlw	0
  9754  00377E  6E3F               	movwf	___flge@ff2+2,c
  9755  003780  0E00               	movlw	0
  9756  003782  6E40               	movwf	___flge@ff2+3,c
  9757  003784                     l3781:
  9758  003784  AE3C               	btfss	___flge@ff1+3,7,c
  9759  003786  D01D               	goto	l3785
  9760  003788  C039  F041         	movff	___flge@ff1,??___flge
  9761  00378C  C03A  F042         	movff	___flge@ff1+1,??___flge+1
  9762  003790  C03B  F043         	movff	___flge@ff1+2,??___flge+2
  9763  003794  C03C  F044         	movff	___flge@ff1+3,??___flge+3
  9764  003798  1E41               	comf	??___flge,f,c
  9765  00379A  1E42               	comf	??___flge+1,f,c
  9766  00379C  1E43               	comf	??___flge+2,f,c
  9767  00379E  1E44               	comf	??___flge+3,f,c
  9768  0037A0  2A41               	incf	??___flge,f,c
  9769  0037A2  0E00               	movlw	0
  9770  0037A4  2242               	addwfc	??___flge+1,f,c
  9771  0037A6  2243               	addwfc	??___flge+2,f,c
  9772  0037A8  2244               	addwfc	??___flge+3,f,c
  9773  0037AA  0E00               	movlw	0
  9774  0037AC  2441               	addwf	??___flge,w,c
  9775  0037AE  6E39               	movwf	___flge@ff1,c
  9776  0037B0  0E00               	movlw	0
  9777  0037B2  2042               	addwfc	??___flge+1,w,c
  9778  0037B4  6E3A               	movwf	___flge@ff1+1,c
  9779  0037B6  0E00               	movlw	0
  9780  0037B8  2043               	addwfc	??___flge+2,w,c
  9781  0037BA  6E3B               	movwf	___flge@ff1+2,c
  9782  0037BC  0E80               	movlw	128
  9783  0037BE  2044               	addwfc	??___flge+3,w,c
  9784  0037C0  6E3C               	movwf	___flge@ff1+3,c
  9785  0037C2                     l3785:
  9786  0037C2  AE40               	btfss	___flge@ff2+3,7,c
  9787  0037C4  D01D               	goto	l707
  9788  0037C6  C03D  F041         	movff	___flge@ff2,??___flge
  9789  0037CA  C03E  F042         	movff	___flge@ff2+1,??___flge+1
  9790  0037CE  C03F  F043         	movff	___flge@ff2+2,??___flge+2
  9791  0037D2  C040  F044         	movff	___flge@ff2+3,??___flge+3
  9792  0037D6  1E41               	comf	??___flge,f,c
  9793  0037D8  1E42               	comf	??___flge+1,f,c
  9794  0037DA  1E43               	comf	??___flge+2,f,c
  9795  0037DC  1E44               	comf	??___flge+3,f,c
  9796  0037DE  2A41               	incf	??___flge,f,c
  9797  0037E0  0E00               	movlw	0
  9798  0037E2  2242               	addwfc	??___flge+1,f,c
  9799  0037E4  2243               	addwfc	??___flge+2,f,c
  9800  0037E6  2244               	addwfc	??___flge+3,f,c
  9801  0037E8  0E00               	movlw	0
  9802  0037EA  2441               	addwf	??___flge,w,c
  9803  0037EC  6E3D               	movwf	___flge@ff2,c
  9804  0037EE  0E00               	movlw	0
  9805  0037F0  2042               	addwfc	??___flge+1,w,c
  9806  0037F2  6E3E               	movwf	___flge@ff2+1,c
  9807  0037F4  0E00               	movlw	0
  9808  0037F6  2043               	addwfc	??___flge+2,w,c
  9809  0037F8  6E3F               	movwf	___flge@ff2+2,c
  9810  0037FA  0E80               	movlw	128
  9811  0037FC  2044               	addwfc	??___flge+3,w,c
  9812  0037FE  6E40               	movwf	___flge@ff2+3,c
  9813  003800                     l707:
  9814  003800  0E00               	movlw	0
  9815  003802  1A39               	xorwf	___flge@ff1,f,c
  9816  003804  0E00               	movlw	0
  9817  003806  1A3A               	xorwf	___flge@ff1+1,f,c
  9818  003808  0E00               	movlw	0
  9819  00380A  1A3B               	xorwf	___flge@ff1+2,f,c
  9820  00380C  0E80               	movlw	128
  9821  00380E  1A3C               	xorwf	___flge@ff1+3,f,c
  9822  003810  0E00               	movlw	0
  9823  003812  1A3D               	xorwf	___flge@ff2,f,c
  9824  003814  0E00               	movlw	0
  9825  003816  1A3E               	xorwf	___flge@ff2+1,f,c
  9826  003818  0E00               	movlw	0
  9827  00381A  1A3F               	xorwf	___flge@ff2+2,f,c
  9828  00381C  0E80               	movlw	128
  9829  00381E  1A40               	xorwf	___flge@ff2+3,f,c
  9830  003820  503D               	movf	___flge@ff2,w,c
  9831  003822  5C39               	subwf	___flge@ff1,w,c
  9832  003824  503E               	movf	___flge@ff2+1,w,c
  9833  003826  583A               	subwfb	___flge@ff1+1,w,c
  9834  003828  503F               	movf	___flge@ff2+2,w,c
  9835  00382A  583B               	subwfb	___flge@ff1+2,w,c
  9836  00382C  5040               	movf	___flge@ff2+3,w,c
  9837  00382E  583C               	subwfb	___flge@ff1+3,w,c
  9838  003830  B0D8               	btfsc	status,0,c
  9839  003832  D002               	goto	l3791
  9840  003834  90D8               	bcf	status,0,c
  9841  003836  0012               	return	
  9842  003838                     l3791:
  9843  003838  80D8               	bsf	status,0,c
  9844  00383A  0012               	return	
  9845  00383C                     __end_of___flge:
  9846                           	opt stack 0
  9847                           tblptru	equ	0xFF8
  9848                           tblptrh	equ	0xFF7
  9849                           tblptrl	equ	0xFF6
  9850                           tablat	equ	0xFF5
  9851                           prodh	equ	0xFF4
  9852                           prodl	equ	0xFF3
  9853                           intcon	equ	0xFF2
  9854                           postinc0	equ	0xFEE
  9855                           wreg	equ	0xFE8
  9856                           postdec1	equ	0xFE5
  9857                           fsr1l	equ	0xFE1
  9858                           indf2	equ	0xFDF
  9859                           postinc2	equ	0xFDE
  9860                           postdec2	equ	0xFDD
  9861                           fsr2h	equ	0xFDA
  9862                           fsr2l	equ	0xFD9
  9863                           status	equ	0xFD8
  9864                           
  9865 ;; *************** function ___fladd *****************
  9866 ;; Defined at:
  9867 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\sprcadd.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;  b               4   25[BANK0 ] long 
  9870 ;;  a               4   29[BANK0 ] long 
  9871 ;; Auto vars:     Size  Location     Type
  9872 ;;  grs             1   44[BANK0 ] unsigned char 
  9873 ;;  bexp            1   43[BANK0 ] unsigned char 
  9874 ;;  aexp            1   42[BANK0 ] unsigned char 
  9875 ;;  signs           1   41[BANK0 ] unsigned char 
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  4   25[BANK0 ] unsigned char 
  9878 ;; Registers used:
  9879 ;;		wreg, status,2, status,0
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9885 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9886 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9887 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9888 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9889 ;;Total ram usage:       20 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:    3
  9892 ;; This function calls:
  9893 ;;		Nothing
  9894 ;; This function is called by:
  9895 ;;		_main
  9896 ;;		_read_adc_temp
  9897 ;;		_sprintf
  9898 ;;		_floor
  9899 ;;		___flsub
  9900 ;;		_set_pwm1_percent
  9901 ;;		_set_pwm1_voltage
  9902 ;;		_set_pwm1_general
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text43
  9907  001C96                     __ptext43:
  9908                           	opt stack 0
  9909  001C96                     ___fladd:
  9910                           	opt stack 25
  9911                           
  9912                           ;incstack = 0
  9913  001C96  0100               	movlb	0	; () banked
  9914  001C98  519C               	movf	(___fladd@b+3)& (0+255),w,b
  9915  001C9A  0B80               	andlw	128
  9916  001C9C  0100               	movlb	0	; () banked
  9917  001C9E  6FA9               	movwf	___fladd@signs& (0+255),b
  9918  001CA0  0100               	movlb	0	; () banked
  9919  001CA2  519C               	movf	(___fladd@b+3)& (0+255),w,b
  9920  001CA4  259C               	addwf	(___fladd@b+3)& (0+255),w,b
  9921  001CA6  0100               	movlb	0	; () banked
  9922  001CA8  6FAB               	movwf	___fladd@bexp& (0+255),b
  9923                           
  9924                           ; BSR set to: 0
  9925  001CAA  0100               	movlb	0	; () banked
  9926  001CAC  AF9B               	btfss	(___fladd@b+2)& (0+255),7,b
  9927  001CAE  D002               	goto	l4681
  9928                           
  9929                           ; BSR set to: 0
  9930  001CB0  0100               	movlb	0	; () banked
  9931  001CB2  81AB               	bsf	___fladd@bexp& (0+255),0,b
  9932  001CB4                     l4681:
  9933                           
  9934                           ; BSR set to: 0
  9935  001CB4  0100               	movlb	0	; () banked
  9936  001CB6  51AB               	movf	___fladd@bexp& (0+255),w,b
  9937  001CB8  0100               	movlb	0	; () banked
  9938  001CBA  B4D8               	btfsc	status,2,c
  9939  001CBC  D012               	goto	l4691
  9940                           
  9941                           ; BSR set to: 0
  9942  001CBE  0100               	movlb	0	; () banked
  9943  001CC0  29AB               	incf	___fladd@bexp& (0+255),w,b
  9944  001CC2  A4D8               	btfss	status,2,c
  9945  001CC4  D009               	goto	l4687
  9946                           
  9947                           ; BSR set to: 0
  9948  001CC6  0E00               	movlw	0
  9949  001CC8  0100               	movlb	0	; () banked
  9950  001CCA  6F99               	movwf	___fladd@b& (0+255),b
  9951  001CCC  0E00               	movlw	0
  9952  001CCE  6F9A               	movwf	(___fladd@b+1)& (0+255),b
  9953  001CD0  0E00               	movlw	0
  9954  001CD2  6F9B               	movwf	(___fladd@b+2)& (0+255),b
  9955  001CD4  0E00               	movlw	0
  9956  001CD6  6F9C               	movwf	(___fladd@b+3)& (0+255),b
  9957  001CD8                     l4687:
  9958                           
  9959                           ; BSR set to: 0
  9960  001CD8  0100               	movlb	0	; () banked
  9961  001CDA  8F9B               	bsf	(___fladd@b+2)& (0+255),7,b
  9962                           
  9963                           ; BSR set to: 0
  9964  001CDC  0E00               	movlw	0
  9965  001CDE  0100               	movlb	0	; () banked
  9966  001CE0  D008               	goto	L13
  9967  001CE2                     l4691:
  9968                           
  9969                           ; BSR set to: 0
  9970  001CE2  0E00               	movlw	0
  9971  001CE4  0100               	movlb	0	; () banked
  9972  001CE6  6F99               	movwf	___fladd@b& (0+255),b
  9973  001CE8  0E00               	movlw	0
  9974  001CEA  6F9A               	movwf	(___fladd@b+1)& (0+255),b
  9975  001CEC  0E00               	movlw	0
  9976  001CEE  6F9B               	movwf	(___fladd@b+2)& (0+255),b
  9977  001CF0  0E00               	movlw	0
  9978  001CF2                     L13:
  9979  001CF2  6F9C               	movwf	(___fladd@b+3)& (0+255),b
  9980                           
  9981                           ; BSR set to: 0
  9982                           
  9983                           ; BSR set to: 0
  9984  001CF4  0100               	movlb	0	; () banked
  9985  001CF6  51A0               	movf	(___fladd@a+3)& (0+255),w,b
  9986  001CF8  0B80               	andlw	128
  9987  001CFA  0100               	movlb	0	; () banked
  9988  001CFC  6FAA               	movwf	___fladd@aexp& (0+255),b
  9989                           
  9990                           ; BSR set to: 0
  9991  001CFE  0100               	movlb	0	; () banked
  9992  001D00  51A9               	movf	___fladd@signs& (0+255),w,b
  9993  001D02  0100               	movlb	0	; () banked
  9994  001D04  19AA               	xorwf	___fladd@aexp& (0+255),w,b
  9995  001D06  B4D8               	btfsc	status,2,c
  9996  001D08  D002               	goto	l4699
  9997                           
  9998                           ; BSR set to: 0
  9999  001D0A  0100               	movlb	0	; () banked
 10000  001D0C  8DA9               	bsf	___fladd@signs& (0+255),6,b
 10001  001D0E                     l4699:
 10002                           
 10003                           ; BSR set to: 0
 10004  001D0E  0100               	movlb	0	; () banked
 10005  001D10  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10006  001D12  25A0               	addwf	(___fladd@a+3)& (0+255),w,b
 10007  001D14  0100               	movlb	0	; () banked
 10008  001D16  6FAA               	movwf	___fladd@aexp& (0+255),b
 10009                           
 10010                           ; BSR set to: 0
 10011  001D18  0100               	movlb	0	; () banked
 10012  001D1A  AF9F               	btfss	(___fladd@a+2)& (0+255),7,b
 10013  001D1C  D002               	goto	l4705
 10014                           
 10015                           ; BSR set to: 0
 10016  001D1E  0100               	movlb	0	; () banked
 10017  001D20  81AA               	bsf	___fladd@aexp& (0+255),0,b
 10018  001D22                     l4705:
 10019                           
 10020                           ; BSR set to: 0
 10021  001D22  0100               	movlb	0	; () banked
 10022  001D24  51AA               	movf	___fladd@aexp& (0+255),w,b
 10023  001D26  0100               	movlb	0	; () banked
 10024  001D28  B4D8               	btfsc	status,2,c
 10025  001D2A  D012               	goto	l4715
 10026                           
 10027                           ; BSR set to: 0
 10028  001D2C  0100               	movlb	0	; () banked
 10029  001D2E  29AA               	incf	___fladd@aexp& (0+255),w,b
 10030  001D30  A4D8               	btfss	status,2,c
 10031  001D32  D009               	goto	l4711
 10032                           
 10033                           ; BSR set to: 0
 10034  001D34  0E00               	movlw	0
 10035  001D36  0100               	movlb	0	; () banked
 10036  001D38  6F9D               	movwf	___fladd@a& (0+255),b
 10037  001D3A  0E00               	movlw	0
 10038  001D3C  6F9E               	movwf	(___fladd@a+1)& (0+255),b
 10039  001D3E  0E00               	movlw	0
 10040  001D40  6F9F               	movwf	(___fladd@a+2)& (0+255),b
 10041  001D42  0E00               	movlw	0
 10042  001D44  6FA0               	movwf	(___fladd@a+3)& (0+255),b
 10043  001D46                     l4711:
 10044                           
 10045                           ; BSR set to: 0
 10046  001D46  0100               	movlb	0	; () banked
 10047  001D48  8F9F               	bsf	(___fladd@a+2)& (0+255),7,b
 10048                           
 10049                           ; BSR set to: 0
 10050  001D4A  0E00               	movlw	0
 10051  001D4C  0100               	movlb	0	; () banked
 10052  001D4E  D008               	goto	L14
 10053  001D50                     l4715:
 10054                           
 10055                           ; BSR set to: 0
 10056  001D50  0E00               	movlw	0
 10057  001D52  0100               	movlb	0	; () banked
 10058  001D54  6F9D               	movwf	___fladd@a& (0+255),b
 10059  001D56  0E00               	movlw	0
 10060  001D58  6F9E               	movwf	(___fladd@a+1)& (0+255),b
 10061  001D5A  0E00               	movlw	0
 10062  001D5C  6F9F               	movwf	(___fladd@a+2)& (0+255),b
 10063  001D5E  0E00               	movlw	0
 10064  001D60                     L14:
 10065  001D60  6FA0               	movwf	(___fladd@a+3)& (0+255),b
 10066                           
 10067                           ; BSR set to: 0
 10068                           
 10069                           ; BSR set to: 0
 10070  001D62  0100               	movlb	0	; () banked
 10071  001D64  51AB               	movf	___fladd@bexp& (0+255),w,b
 10072  001D66  0100               	movlb	0	; () banked
 10073  001D68  5DAA               	subwf	___fladd@aexp& (0+255),w,b
 10074  001D6A  B0D8               	btfsc	status,0,c
 10075  001D6C  D024               	goto	l4753
 10076                           
 10077                           ; BSR set to: 0
 10078  001D6E  0100               	movlb	0	; () banked
 10079  001D70  ADA9               	btfss	___fladd@signs& (0+255),6,b
 10080  001D72  D003               	goto	l4723
 10081                           
 10082                           ; BSR set to: 0
 10083  001D74  0E80               	movlw	128
 10084  001D76  0100               	movlb	0	; () banked
 10085  001D78  1BA9               	xorwf	___fladd@signs& (0+255),f,b
 10086  001D7A                     l4723:
 10087                           
 10088                           ; BSR set to: 0
 10089  001D7A  C0AB  F0AC         	movff	___fladd@bexp,___fladd@grs
 10090                           
 10091                           ; BSR set to: 0
 10092  001D7E  C0AA  F0AB         	movff	___fladd@aexp,___fladd@bexp
 10093                           
 10094                           ; BSR set to: 0
 10095  001D82  C0AC  F0AA         	movff	___fladd@grs,___fladd@aexp
 10096                           
 10097                           ; BSR set to: 0
 10098  001D86  C099  F0AC         	movff	___fladd@b,___fladd@grs
 10099                           
 10100                           ; BSR set to: 0
 10101  001D8A  C09D  F099         	movff	___fladd@a,___fladd@b
 10102                           
 10103                           ; BSR set to: 0
 10104  001D8E  C0AC  F09D         	movff	___fladd@grs,___fladd@a
 10105                           
 10106                           ; BSR set to: 0
 10107  001D92  C09A  F0AC         	movff	___fladd@b+1,___fladd@grs
 10108                           
 10109                           ; BSR set to: 0
 10110  001D96  C09E  F09A         	movff	___fladd@a+1,___fladd@b+1
 10111                           
 10112                           ; BSR set to: 0
 10113  001D9A  C0AC  F09E         	movff	___fladd@grs,___fladd@a+1
 10114                           
 10115                           ; BSR set to: 0
 10116  001D9E  C09B  F0AC         	movff	___fladd@b+2,___fladd@grs
 10117                           
 10118                           ; BSR set to: 0
 10119  001DA2  C09F  F09B         	movff	___fladd@a+2,___fladd@b+2
 10120                           
 10121                           ; BSR set to: 0
 10122  001DA6  C0AC  F09F         	movff	___fladd@grs,___fladd@a+2
 10123                           
 10124                           ; BSR set to: 0
 10125  001DAA  C09C  F0AC         	movff	___fladd@b+3,___fladd@grs
 10126                           
 10127                           ; BSR set to: 0
 10128  001DAE  C0A0  F09C         	movff	___fladd@a+3,___fladd@b+3
 10129                           
 10130                           ; BSR set to: 0
 10131  001DB2  C0AC  F0A0         	movff	___fladd@grs,___fladd@a+3
 10132  001DB6                     l4753:
 10133                           
 10134                           ; BSR set to: 0
 10135  001DB6  0E00               	movlw	0
 10136  001DB8  0100               	movlb	0	; () banked
 10137  001DBA  6FAC               	movwf	___fladd@grs& (0+255),b
 10138                           
 10139                           ; BSR set to: 0
 10140  001DBC  0100               	movlb	0	; () banked
 10141  001DBE  51AB               	movf	___fladd@bexp& (0+255),w,b
 10142  001DC0  0100               	movlb	0	; () banked
 10143  001DC2  6FA1               	movwf	??___fladd& (0+255),b
 10144  001DC4  6BA2               	clrf	(??___fladd+1)& (0+255),b
 10145  001DC6  0100               	movlb	0	; () banked
 10146  001DC8  1FA1               	comf	??___fladd& (0+255),f,b
 10147  001DCA  1FA2               	comf	(??___fladd+1)& (0+255),f,b
 10148  001DCC  4BA1               	infsnz	??___fladd& (0+255),f,b
 10149  001DCE  2BA2               	incf	(??___fladd+1)& (0+255),f,b
 10150  001DD0  0100               	movlb	0	; () banked
 10151  001DD2  51AA               	movf	___fladd@aexp& (0+255),w,b
 10152  001DD4  0100               	movlb	0	; () banked
 10153  001DD6  6FA3               	movwf	(??___fladd+2)& (0+255),b
 10154  001DD8  6BA4               	clrf	(??___fladd+3)& (0+255),b
 10155  001DDA  0100               	movlb	0	; () banked
 10156  001DDC  51A1               	movf	??___fladd& (0+255),w,b
 10157  001DDE  0100               	movlb	0	; () banked
 10158  001DE0  27A3               	addwf	(??___fladd+2)& (0+255),f,b
 10159  001DE2  0100               	movlb	0	; () banked
 10160  001DE4  51A2               	movf	(??___fladd+1)& (0+255),w,b
 10161  001DE6  0100               	movlb	0	; () banked
 10162  001DE8  23A4               	addwfc	(??___fladd+3)& (0+255),f,b
 10163  001DEA  0100               	movlb	0	; () banked
 10164  001DEC  BFA4               	btfsc	(??___fladd+3)& (0+255),7,b
 10165  001DEE  D03D               	goto	l996
 10166  001DF0  0100               	movlb	0	; () banked
 10167  001DF2  51A4               	movf	(??___fladd+3)& (0+255),w,b
 10168  001DF4  E105               	bnz	u5130
 10169  001DF6  0E1A               	movlw	26
 10170  001DF8  0100               	movlb	0	; () banked
 10171  001DFA  5DA3               	subwf	(??___fladd+2)& (0+255),w,b
 10172  001DFC  A0D8               	btfss	status,0,c
 10173  001DFE  D035               	goto	l996
 10174  001E00                     u5130:
 10175                           
 10176                           ; BSR set to: 0
 10177  001E00  0100               	movlb	0	; () banked
 10178  001E02  5199               	movf	___fladd@b& (0+255),w,b
 10179  001E04  0100               	movlb	0	; () banked
 10180  001E06  119A               	iorwf	(___fladd@b+1)& (0+255),w,b
 10181  001E08  0100               	movlb	0	; () banked
 10182  001E0A  119B               	iorwf	(___fladd@b+2)& (0+255),w,b
 10183  001E0C  0100               	movlb	0	; () banked
 10184  001E0E  119C               	iorwf	(___fladd@b+3)& (0+255),w,b
 10185  001E10  B4D8               	btfsc	status,2,c
 10186  001E12  D002               	goto	u5140
 10187  001E14  0E01               	movlw	1
 10188  001E16  D001               	goto	u5150
 10189  001E18                     u5140:
 10190  001E18  0E00               	movlw	0
 10191  001E1A                     u5150:
 10192  001E1A  0100               	movlb	0	; () banked
 10193  001E1C  6FAC               	movwf	___fladd@grs& (0+255),b
 10194                           
 10195                           ; BSR set to: 0
 10196  001E1E  0E00               	movlw	0
 10197  001E20  0100               	movlb	0	; () banked
 10198  001E22  6F99               	movwf	___fladd@b& (0+255),b
 10199  001E24  0E00               	movlw	0
 10200  001E26  6F9A               	movwf	(___fladd@b+1)& (0+255),b
 10201  001E28  0E00               	movlw	0
 10202  001E2A  6F9B               	movwf	(___fladd@b+2)& (0+255),b
 10203  001E2C  0E00               	movlw	0
 10204  001E2E  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10205                           
 10206                           ; BSR set to: 0
 10207  001E30  C0AA  F0AB         	movff	___fladd@aexp,___fladd@bexp
 10208  001E34  D020               	goto	l995
 10209  001E36                     l997:
 10210                           
 10211                           ; BSR set to: 0
 10212  001E36  0100               	movlb	0	; () banked
 10213  001E38  A1AC               	btfss	___fladd@grs& (0+255),0,b
 10214  001E3A  D007               	goto	l4765
 10215                           
 10216                           ; BSR set to: 0
 10217  001E3C  0100               	movlb	0	; () banked
 10218  001E3E  90D8               	bcf	status,0,c
 10219  001E40  31AC               	rrcf	___fladd@grs& (0+255),w,b
 10220  001E42  0901               	iorlw	1
 10221  001E44  0100               	movlb	0	; () banked
 10222  001E46  6FAC               	movwf	___fladd@grs& (0+255),b
 10223  001E48  D003               	goto	l4767
 10224  001E4A                     l4765:
 10225                           
 10226                           ; BSR set to: 0
 10227  001E4A  0100               	movlb	0	; () banked
 10228  001E4C  90D8               	bcf	status,0,c
 10229  001E4E  33AC               	rrcf	___fladd@grs& (0+255),f,b
 10230  001E50                     l4767:
 10231                           
 10232                           ; BSR set to: 0
 10233  001E50  0100               	movlb	0	; () banked
 10234  001E52  A199               	btfss	___fladd@b& (0+255),0,b
 10235  001E54  D002               	goto	l4771
 10236                           
 10237                           ; BSR set to: 0
 10238  001E56  0100               	movlb	0	; () banked
 10239  001E58  8FAC               	bsf	___fladd@grs& (0+255),7,b
 10240  001E5A                     l4771:
 10241                           
 10242                           ; BSR set to: 0
 10243  001E5A  0100               	movlb	0	; () banked
 10244  001E5C  359C               	rlcf	(___fladd@b+3)& (0+255),w,b
 10245  001E5E  339C               	rrcf	(___fladd@b+3)& (0+255),f,b
 10246  001E60  339B               	rrcf	(___fladd@b+2)& (0+255),f,b
 10247  001E62  339A               	rrcf	(___fladd@b+1)& (0+255),f,b
 10248  001E64  3399               	rrcf	___fladd@b& (0+255),f,b
 10249                           
 10250                           ; BSR set to: 0
 10251  001E66  0100               	movlb	0	; () banked
 10252  001E68  2BAB               	incf	___fladd@bexp& (0+255),f,b
 10253  001E6A                     l996:
 10254                           
 10255                           ; BSR set to: 0
 10256  001E6A  0100               	movlb	0	; () banked
 10257  001E6C  51AA               	movf	___fladd@aexp& (0+255),w,b
 10258  001E6E  0100               	movlb	0	; () banked
 10259  001E70  5DAB               	subwf	___fladd@bexp& (0+255),w,b
 10260  001E72  A0D8               	btfss	status,0,c
 10261  001E74  D7E0               	goto	l997
 10262  001E76                     l995:
 10263                           
 10264                           ; BSR set to: 0
 10265  001E76  0100               	movlb	0	; () banked
 10266  001E78  BDA9               	btfsc	___fladd@signs& (0+255),6,b
 10267  001E7A  D03F               	goto	l4799
 10268                           
 10269                           ; BSR set to: 0
 10270  001E7C  0100               	movlb	0	; () banked
 10271  001E7E  51AB               	movf	___fladd@bexp& (0+255),w,b
 10272  001E80  0100               	movlb	0	; () banked
 10273  001E82  A4D8               	btfss	status,2,c
 10274  001E84  D00A               	goto	l4781
 10275                           
 10276                           ; BSR set to: 0
 10277  001E86  0E00               	movlw	0
 10278  001E88  0100               	movlb	0	; () banked
 10279  001E8A  6F99               	movwf	?___fladd& (0+255),b
 10280  001E8C  0E00               	movlw	0
 10281  001E8E  6F9A               	movwf	(?___fladd+1)& (0+255),b
 10282  001E90  0E00               	movlw	0
 10283  001E92  6F9B               	movwf	(?___fladd+2)& (0+255),b
 10284  001E94  0E00               	movlw	0
 10285  001E96  6F9C               	movwf	(?___fladd+3)& (0+255),b
 10286                           
 10287                           ; BSR set to: 0
 10288  001E98  0012               	return	
 10289  001E9A                     l4781:
 10290                           
 10291                           ; BSR set to: 0
 10292  001E9A  0100               	movlb	0	; () banked
 10293  001E9C  519D               	movf	___fladd@a& (0+255),w,b
 10294  001E9E  0100               	movlb	0	; () banked
 10295  001EA0  2799               	addwf	___fladd@b& (0+255),f,b
 10296  001EA2  0100               	movlb	0	; () banked
 10297  001EA4  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10298  001EA6  0100               	movlb	0	; () banked
 10299  001EA8  239A               	addwfc	(___fladd@b+1)& (0+255),f,b
 10300  001EAA  0100               	movlb	0	; () banked
 10301  001EAC  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10302  001EAE  0100               	movlb	0	; () banked
 10303  001EB0  239B               	addwfc	(___fladd@b+2)& (0+255),f,b
 10304  001EB2  0100               	movlb	0	; () banked
 10305  001EB4  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10306  001EB6  0100               	movlb	0	; () banked
 10307  001EB8  239C               	addwfc	(___fladd@b+3)& (0+255),f,b
 10308                           
 10309                           ; BSR set to: 0
 10310  001EBA  0100               	movlb	0	; () banked
 10311  001EBC  A19C               	btfss	(___fladd@b+3)& (0+255),0,b
 10312  001EBE  D0CC               	goto	l4835
 10313                           
 10314                           ; BSR set to: 0
 10315  001EC0  0100               	movlb	0	; () banked
 10316  001EC2  A1AC               	btfss	___fladd@grs& (0+255),0,b
 10317  001EC4  D009               	goto	l4789
 10318                           
 10319                           ; BSR set to: 0
 10320  001EC6  0100               	movlb	0	; () banked
 10321  001EC8  90D8               	bcf	status,0,c
 10322  001ECA  33AC               	rrcf	___fladd@grs& (0+255),f,b
 10323  001ECC  0100               	movlb	0	; () banked
 10324  001ECE  51AC               	movf	___fladd@grs& (0+255),w,b
 10325  001ED0  0901               	iorlw	1
 10326  001ED2  0100               	movlb	0	; () banked
 10327  001ED4  6FAC               	movwf	___fladd@grs& (0+255),b
 10328  001ED6  D003               	goto	l4791
 10329  001ED8                     l4789:
 10330                           
 10331                           ; BSR set to: 0
 10332  001ED8  0100               	movlb	0	; () banked
 10333  001EDA  90D8               	bcf	status,0,c
 10334  001EDC  33AC               	rrcf	___fladd@grs& (0+255),f,b
 10335  001EDE                     l4791:
 10336                           
 10337                           ; BSR set to: 0
 10338  001EDE  0100               	movlb	0	; () banked
 10339  001EE0  A199               	btfss	___fladd@b& (0+255),0,b
 10340  001EE2  D002               	goto	l4795
 10341                           
 10342                           ; BSR set to: 0
 10343  001EE4  0100               	movlb	0	; () banked
 10344  001EE6  8FAC               	bsf	___fladd@grs& (0+255),7,b
 10345  001EE8                     l4795:
 10346                           
 10347                           ; BSR set to: 0
 10348  001EE8  0100               	movlb	0	; () banked
 10349  001EEA  359C               	rlcf	(___fladd@b+3)& (0+255),w,b
 10350  001EEC  339C               	rrcf	(___fladd@b+3)& (0+255),f,b
 10351  001EEE  339B               	rrcf	(___fladd@b+2)& (0+255),f,b
 10352  001EF0  339A               	rrcf	(___fladd@b+1)& (0+255),f,b
 10353  001EF2  3399               	rrcf	___fladd@b& (0+255),f,b
 10354                           
 10355                           ; BSR set to: 0
 10356  001EF4  0100               	movlb	0	; () banked
 10357  001EF6  2BAB               	incf	___fladd@bexp& (0+255),f,b
 10358                           
 10359                           ; BSR set to: 0
 10360  001EF8  D0AF               	goto	l4835
 10361  001EFA                     l4799:
 10362                           
 10363                           ; BSR set to: 0
 10364  001EFA  0100               	movlb	0	; () banked
 10365  001EFC  519D               	movf	___fladd@a& (0+255),w,b
 10366  001EFE  0100               	movlb	0	; () banked
 10367  001F00  5D99               	subwf	___fladd@b& (0+255),w,b
 10368  001F02  0100               	movlb	0	; () banked
 10369  001F04  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10370  001F06  0100               	movlb	0	; () banked
 10371  001F08  599A               	subwfb	(___fladd@b+1)& (0+255),w,b
 10372  001F0A  0100               	movlb	0	; () banked
 10373  001F0C  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10374  001F0E  0100               	movlb	0	; () banked
 10375  001F10  599B               	subwfb	(___fladd@b+2)& (0+255),w,b
 10376  001F12  0100               	movlb	0	; () banked
 10377  001F14  519C               	movf	(___fladd@b+3)& (0+255),w,b
 10378  001F16  0A80               	xorlw	128
 10379  001F18  0100               	movlb	0	; () banked
 10380  001F1A  6FA1               	movwf	??___fladd& (0+255),b
 10381  001F1C  0100               	movlb	0	; () banked
 10382  001F1E  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10383  001F20  0A80               	xorlw	128
 10384  001F22  0100               	movlb	0	; () banked
 10385  001F24  59A1               	subwfb	??___fladd& (0+255),w,b
 10386  001F26  B0D8               	btfsc	status,0,c
 10387  001F28  D050               	goto	l4809
 10388                           
 10389                           ; BSR set to: 0
 10390  001F2A  C099  F0A1         	movff	___fladd@b,??___fladd
 10391  001F2E  C09A  F0A2         	movff	___fladd@b+1,??___fladd+1
 10392  001F32  C09B  F0A3         	movff	___fladd@b+2,??___fladd+2
 10393  001F36  C09C  F0A4         	movff	___fladd@b+3,??___fladd+3
 10394  001F3A  0100               	movlb	0	; () banked
 10395  001F3C  1FA1               	comf	??___fladd& (0+255),f,b
 10396  001F3E  1FA2               	comf	(??___fladd+1)& (0+255),f,b
 10397  001F40  1FA3               	comf	(??___fladd+2)& (0+255),f,b
 10398  001F42  1FA4               	comf	(??___fladd+3)& (0+255),f,b
 10399  001F44  2BA1               	incf	??___fladd& (0+255),f,b
 10400  001F46  0E00               	movlw	0
 10401  001F48  23A2               	addwfc	(??___fladd+1)& (0+255),f,b
 10402  001F4A  23A3               	addwfc	(??___fladd+2)& (0+255),f,b
 10403  001F4C  23A4               	addwfc	(??___fladd+3)& (0+255),f,b
 10404  001F4E  0100               	movlb	0	; () banked
 10405  001F50  519D               	movf	___fladd@a& (0+255),w,b
 10406  001F52  0100               	movlb	0	; () banked
 10407  001F54  25A1               	addwf	??___fladd& (0+255),w,b
 10408  001F56  0100               	movlb	0	; () banked
 10409  001F58  6FA5               	movwf	(??___fladd+4)& (0+255),b
 10410  001F5A  0100               	movlb	0	; () banked
 10411  001F5C  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10412  001F5E  0100               	movlb	0	; () banked
 10413  001F60  21A2               	addwfc	(??___fladd+1)& (0+255),w,b
 10414  001F62  0100               	movlb	0	; () banked
 10415  001F64  6FA6               	movwf	(??___fladd+5)& (0+255),b
 10416  001F66  0100               	movlb	0	; () banked
 10417  001F68  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10418  001F6A  0100               	movlb	0	; () banked
 10419  001F6C  21A3               	addwfc	(??___fladd+2)& (0+255),w,b
 10420  001F6E  0100               	movlb	0	; () banked
 10421  001F70  6FA7               	movwf	(??___fladd+6)& (0+255),b
 10422  001F72  0100               	movlb	0	; () banked
 10423  001F74  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10424  001F76  0100               	movlb	0	; () banked
 10425  001F78  21A4               	addwfc	(??___fladd+3)& (0+255),w,b
 10426  001F7A  0100               	movlb	0	; () banked
 10427  001F7C  6FA8               	movwf	(??___fladd+7)& (0+255),b
 10428  001F7E  0EFF               	movlw	255
 10429  001F80  0100               	movlb	0	; () banked
 10430  001F82  25A5               	addwf	(??___fladd+4)& (0+255),w,b
 10431  001F84  0100               	movlb	0	; () banked
 10432  001F86  6F99               	movwf	___fladd@b& (0+255),b
 10433  001F88  0EFF               	movlw	255
 10434  001F8A  0100               	movlb	0	; () banked
 10435  001F8C  21A6               	addwfc	(??___fladd+5)& (0+255),w,b
 10436  001F8E  0100               	movlb	0	; () banked
 10437  001F90  6F9A               	movwf	(___fladd@b+1)& (0+255),b
 10438  001F92  0EFF               	movlw	255
 10439  001F94  0100               	movlb	0	; () banked
 10440  001F96  21A7               	addwfc	(??___fladd+6)& (0+255),w,b
 10441  001F98  0100               	movlb	0	; () banked
 10442  001F9A  6F9B               	movwf	(___fladd@b+2)& (0+255),b
 10443  001F9C  0EFF               	movlw	255
 10444  001F9E  0100               	movlb	0	; () banked
 10445  001FA0  21A8               	addwfc	(??___fladd+7)& (0+255),w,b
 10446  001FA2  0100               	movlb	0	; () banked
 10447  001FA4  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10448  001FA6  0E80               	movlw	128
 10449  001FA8  0100               	movlb	0	; () banked
 10450  001FAA  1BA9               	xorwf	___fladd@signs& (0+255),f,b
 10451                           
 10452                           ; BSR set to: 0
 10453  001FAC  0100               	movlb	0	; () banked
 10454  001FAE  6DAC               	negf	___fladd@grs& (0+255),b
 10455                           
 10456                           ; BSR set to: 0
 10457  001FB0  0100               	movlb	0	; () banked
 10458  001FB2  51AC               	movf	___fladd@grs& (0+255),w,b
 10459  001FB4  0100               	movlb	0	; () banked
 10460  001FB6  A4D8               	btfss	status,2,c
 10461  001FB8  D018               	goto	l1012
 10462                           
 10463                           ; BSR set to: 0
 10464  001FBA  0E01               	movlw	1
 10465  001FBC  0100               	movlb	0	; () banked
 10466  001FBE  2799               	addwf	___fladd@b& (0+255),f,b
 10467  001FC0  0E00               	movlw	0
 10468  001FC2  239A               	addwfc	(___fladd@b+1)& (0+255),f,b
 10469  001FC4  239B               	addwfc	(___fladd@b+2)& (0+255),f,b
 10470  001FC6  239C               	addwfc	(___fladd@b+3)& (0+255),f,b
 10471                           
 10472                           ; BSR set to: 0
 10473  001FC8  D010               	goto	l1012
 10474  001FCA                     l4809:
 10475                           
 10476                           ; BSR set to: 0
 10477  001FCA  0100               	movlb	0	; () banked
 10478  001FCC  519D               	movf	___fladd@a& (0+255),w,b
 10479  001FCE  0100               	movlb	0	; () banked
 10480  001FD0  5F99               	subwf	___fladd@b& (0+255),f,b
 10481  001FD2  0100               	movlb	0	; () banked
 10482  001FD4  519E               	movf	(___fladd@a+1)& (0+255),w,b
 10483  001FD6  0100               	movlb	0	; () banked
 10484  001FD8  5B9A               	subwfb	(___fladd@b+1)& (0+255),f,b
 10485  001FDA  0100               	movlb	0	; () banked
 10486  001FDC  519F               	movf	(___fladd@a+2)& (0+255),w,b
 10487  001FDE  0100               	movlb	0	; () banked
 10488  001FE0  5B9B               	subwfb	(___fladd@b+2)& (0+255),f,b
 10489  001FE2  0100               	movlb	0	; () banked
 10490  001FE4  51A0               	movf	(___fladd@a+3)& (0+255),w,b
 10491  001FE6  0100               	movlb	0	; () banked
 10492  001FE8  5B9C               	subwfb	(___fladd@b+3)& (0+255),f,b
 10493  001FEA                     l1012:
 10494                           
 10495                           ; BSR set to: 0
 10496  001FEA  0100               	movlb	0	; () banked
 10497  001FEC  5199               	movf	___fladd@b& (0+255),w,b
 10498  001FEE  0100               	movlb	0	; () banked
 10499  001FF0  119A               	iorwf	(___fladd@b+1)& (0+255),w,b
 10500  001FF2  0100               	movlb	0	; () banked
 10501  001FF4  119B               	iorwf	(___fladd@b+2)& (0+255),w,b
 10502  001FF6  0100               	movlb	0	; () banked
 10503  001FF8  119C               	iorwf	(___fladd@b+3)& (0+255),w,b
 10504  001FFA  A4D8               	btfss	status,2,c
 10505  001FFC  D02A               	goto	l4833
 10506                           
 10507                           ; BSR set to: 0
 10508  001FFE  0100               	movlb	0	; () banked
 10509  002000  51AC               	movf	___fladd@grs& (0+255),w,b
 10510  002002  0100               	movlb	0	; () banked
 10511  002004  A4D8               	btfss	status,2,c
 10512  002006  D025               	goto	l4833
 10513                           
 10514                           ; BSR set to: 0
 10515  002008  0E00               	movlw	0
 10516  00200A  0100               	movlb	0	; () banked
 10517  00200C  6F99               	movwf	?___fladd& (0+255),b
 10518  00200E  0E00               	movlw	0
 10519  002010  6F9A               	movwf	(?___fladd+1)& (0+255),b
 10520  002012  0E00               	movlw	0
 10521  002014  6F9B               	movwf	(?___fladd+2)& (0+255),b
 10522  002016  0E00               	movlw	0
 10523  002018  6F9C               	movwf	(?___fladd+3)& (0+255),b
 10524                           
 10525                           ; BSR set to: 0
 10526  00201A  0012               	return	
 10527  00201C                     l4817:
 10528                           
 10529                           ; BSR set to: 0
 10530  00201C  0100               	movlb	0	; () banked
 10531  00201E  90D8               	bcf	status,0,c
 10532  002020  3799               	rlcf	___fladd@b& (0+255),f,b
 10533  002022  379A               	rlcf	(___fladd@b+1)& (0+255),f,b
 10534  002024  379B               	rlcf	(___fladd@b+2)& (0+255),f,b
 10535  002026  379C               	rlcf	(___fladd@b+3)& (0+255),f,b
 10536                           
 10537                           ; BSR set to: 0
 10538  002028  0100               	movlb	0	; () banked
 10539  00202A  AFAC               	btfss	___fladd@grs& (0+255),7,b
 10540  00202C  D002               	goto	l4823
 10541                           
 10542                           ; BSR set to: 0
 10543  00202E  0100               	movlb	0	; () banked
 10544  002030  8199               	bsf	___fladd@b& (0+255),0,b
 10545  002032                     l4823:
 10546                           
 10547                           ; BSR set to: 0
 10548  002032  0100               	movlb	0	; () banked
 10549  002034  A1AC               	btfss	___fladd@grs& (0+255),0,b
 10550  002036  D003               	goto	l4827
 10551                           
 10552                           ; BSR set to: 0
 10553  002038  80D8               	bsf	status,0,c
 10554  00203A  0100               	movlb	0	; () banked
 10555  00203C  D002               	goto	L15
 10556  00203E                     l4827:
 10557                           
 10558                           ; BSR set to: 0
 10559  00203E  0100               	movlb	0	; () banked
 10560  002040  90D8               	bcf	status,0,c
 10561  002042                     L15:
 10562  002042  37AC               	rlcf	___fladd@grs& (0+255),f,b
 10563                           
 10564                           ; BSR set to: 0
 10565                           
 10566                           ; BSR set to: 0
 10567  002044  0100               	movlb	0	; () banked
 10568  002046  51AB               	movf	___fladd@bexp& (0+255),w,b
 10569  002048  0100               	movlb	0	; () banked
 10570  00204A  B4D8               	btfsc	status,2,c
 10571  00204C  D002               	goto	l4833
 10572                           
 10573                           ; BSR set to: 0
 10574  00204E  0100               	movlb	0	; () banked
 10575  002050  07AB               	decf	___fladd@bexp& (0+255),f,b
 10576  002052                     l4833:
 10577                           
 10578                           ; BSR set to: 0
 10579  002052  0100               	movlb	0	; () banked
 10580  002054  AF9B               	btfss	(___fladd@b+2)& (0+255),7,b
 10581  002056  D7E2               	goto	l4817
 10582  002058                     l4835:
 10583                           
 10584                           ; BSR set to: 0
 10585  002058  0E00               	movlw	0
 10586  00205A  0100               	movlb	0	; () banked
 10587  00205C  6FAA               	movwf	___fladd@aexp& (0+255),b
 10588                           
 10589                           ; BSR set to: 0
 10590  00205E  0100               	movlb	0	; () banked
 10591  002060  AFAC               	btfss	___fladd@grs& (0+255),7,b
 10592  002062  D00D               	goto	l1021
 10593                           
 10594                           ; BSR set to: 0
 10595  002064  C0AC  F0A1         	movff	___fladd@grs,??___fladd
 10596  002068  0E7F               	movlw	127
 10597  00206A  0100               	movlb	0	; () banked
 10598  00206C  17A1               	andwf	??___fladd& (0+255),f,b
 10599  00206E  A4D8               	btfss	status,2,c
 10600  002070  D003               	goto	l4843
 10601                           
 10602                           ; BSR set to: 0
 10603                           
 10604                           ; BSR set to: 0
 10605  002072  0100               	movlb	0	; () banked
 10606  002074  A199               	btfss	___fladd@b& (0+255),0,b
 10607  002076  D003               	goto	l1021
 10608  002078                     l4843:
 10609                           
 10610                           ; BSR set to: 0
 10611  002078  0E01               	movlw	1
 10612  00207A  0100               	movlb	0	; () banked
 10613  00207C  6FAA               	movwf	___fladd@aexp& (0+255),b
 10614  00207E                     l1021:
 10615                           
 10616                           ; BSR set to: 0
 10617  00207E  0100               	movlb	0	; () banked
 10618  002080  51AA               	movf	___fladd@aexp& (0+255),w,b
 10619  002082  0100               	movlb	0	; () banked
 10620  002084  B4D8               	btfsc	status,2,c
 10621  002086  D026               	goto	l4853
 10622                           
 10623                           ; BSR set to: 0
 10624  002088  0E01               	movlw	1
 10625  00208A  0100               	movlb	0	; () banked
 10626  00208C  2799               	addwf	___fladd@b& (0+255),f,b
 10627  00208E  0E00               	movlw	0
 10628  002090  239A               	addwfc	(___fladd@b+1)& (0+255),f,b
 10629  002092  239B               	addwfc	(___fladd@b+2)& (0+255),f,b
 10630  002094  239C               	addwfc	(___fladd@b+3)& (0+255),f,b
 10631                           
 10632                           ; BSR set to: 0
 10633  002096  0100               	movlb	0	; () banked
 10634  002098  A19C               	btfss	(___fladd@b+3)& (0+255),0,b
 10635  00209A  D01C               	goto	l4853
 10636                           
 10637                           ; BSR set to: 0
 10638  00209C  C099  F0A1         	movff	___fladd@b,??___fladd
 10639  0020A0  C09A  F0A2         	movff	___fladd@b+1,??___fladd+1
 10640  0020A4  C09B  F0A3         	movff	___fladd@b+2,??___fladd+2
 10641  0020A8  C09C  F0A4         	movff	___fladd@b+3,??___fladd+3
 10642  0020AC  0100               	movlb	0	; () banked
 10643  0020AE  35A4               	rlcf	(??___fladd+3)& (0+255),w,b
 10644  0020B0  33A4               	rrcf	(??___fladd+3)& (0+255),f,b
 10645  0020B2  33A3               	rrcf	(??___fladd+2)& (0+255),f,b
 10646  0020B4  33A2               	rrcf	(??___fladd+1)& (0+255),f,b
 10647  0020B6  33A1               	rrcf	??___fladd& (0+255),f,b
 10648  0020B8  C0A1  F099         	movff	??___fladd,___fladd@b
 10649  0020BC  C0A2  F09A         	movff	??___fladd+1,___fladd@b+1
 10650  0020C0  C0A3  F09B         	movff	??___fladd+2,___fladd@b+2
 10651  0020C4  C0A4  F09C         	movff	??___fladd+3,___fladd@b+3
 10652  0020C8  0100               	movlb	0	; () banked
 10653  0020CA  29AB               	incf	___fladd@bexp& (0+255),w,b
 10654  0020CC  B4D8               	btfsc	status,2,c
 10655  0020CE  D002               	goto	l4853
 10656                           
 10657                           ; BSR set to: 0
 10658  0020D0  0100               	movlb	0	; () banked
 10659  0020D2  2BAB               	incf	___fladd@bexp& (0+255),f,b
 10660  0020D4                     l4853:
 10661                           
 10662                           ; BSR set to: 0
 10663  0020D4  0100               	movlb	0	; () banked
 10664  0020D6  29AB               	incf	___fladd@bexp& (0+255),w,b
 10665  0020D8  B4D8               	btfsc	status,2,c
 10666  0020DA  D005               	goto	l4857
 10667                           
 10668                           ; BSR set to: 0
 10669  0020DC  0100               	movlb	0	; () banked
 10670  0020DE  51AB               	movf	___fladd@bexp& (0+255),w,b
 10671  0020E0  0100               	movlb	0	; () banked
 10672  0020E2  A4D8               	btfss	status,2,c
 10673  0020E4  D011               	goto	l4861
 10674  0020E6                     l4857:
 10675                           
 10676                           ; BSR set to: 0
 10677  0020E6  0E00               	movlw	0
 10678  0020E8  0100               	movlb	0	; () banked
 10679  0020EA  6F99               	movwf	___fladd@b& (0+255),b
 10680  0020EC  0E00               	movlw	0
 10681  0020EE  6F9A               	movwf	(___fladd@b+1)& (0+255),b
 10682  0020F0  0E00               	movlw	0
 10683  0020F2  6F9B               	movwf	(___fladd@b+2)& (0+255),b
 10684  0020F4  0E00               	movlw	0
 10685  0020F6  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10686  0020F8  0100               	movlb	0	; () banked
 10687  0020FA  51AB               	movf	___fladd@bexp& (0+255),w,b
 10688  0020FC  0100               	movlb	0	; () banked
 10689  0020FE  A4D8               	btfss	status,2,c
 10690  002100  D003               	goto	l4861
 10691                           
 10692                           ; BSR set to: 0
 10693  002102  0E00               	movlw	0
 10694  002104  0100               	movlb	0	; () banked
 10695  002106  6FA9               	movwf	___fladd@signs& (0+255),b
 10696  002108                     l4861:
 10697                           
 10698                           ; BSR set to: 0
 10699  002108  0100               	movlb	0	; () banked
 10700  00210A  A1AB               	btfss	___fladd@bexp& (0+255),0,b
 10701  00210C  D003               	goto	l4865
 10702                           
 10703                           ; BSR set to: 0
 10704  00210E  0100               	movlb	0	; () banked
 10705  002110  8F9B               	bsf	(___fladd@b+2)& (0+255),7,b
 10706  002112  D002               	goto	l4867
 10707  002114                     l4865:
 10708                           
 10709                           ; BSR set to: 0
 10710  002114  0100               	movlb	0	; () banked
 10711  002116  9F9B               	bcf	(___fladd@b+2)& (0+255),7,b
 10712  002118                     l4867:
 10713                           
 10714                           ; BSR set to: 0
 10715  002118  0100               	movlb	0	; () banked
 10716  00211A  90D8               	bcf	status,0,c
 10717  00211C  31AB               	rrcf	___fladd@bexp& (0+255),w,b
 10718  00211E  0100               	movlb	0	; () banked
 10719  002120  6F9C               	movwf	(___fladd@b+3)& (0+255),b
 10720                           
 10721                           ; BSR set to: 0
 10722  002122  0100               	movlb	0	; () banked
 10723  002124  AFA9               	btfss	___fladd@signs& (0+255),7,b
 10724  002126  D002               	goto	l4873
 10725                           
 10726                           ; BSR set to: 0
 10727  002128  0100               	movlb	0	; () banked
 10728  00212A  8F9C               	bsf	(___fladd@b+3)& (0+255),7,b
 10729  00212C                     l4873:
 10730                           
 10731                           ; BSR set to: 0
 10732  00212C  C099  F099         	movff	___fladd@b,?___fladd
 10733  002130  C09A  F09A         	movff	___fladd@b+1,?___fladd+1
 10734  002134  C09B  F09B         	movff	___fladd@b+2,?___fladd+2
 10735  002138  C09C  F09C         	movff	___fladd@b+3,?___fladd+3
 10736  00213C  0012               	return	
 10737  00213E                     __end_of___fladd:
 10738                           	opt stack 0
 10739                           tblptru	equ	0xFF8
 10740                           tblptrh	equ	0xFF7
 10741                           tblptrl	equ	0xFF6
 10742                           tablat	equ	0xFF5
 10743                           prodh	equ	0xFF4
 10744                           prodl	equ	0xFF3
 10745                           intcon	equ	0xFF2
 10746                           postinc0	equ	0xFEE
 10747                           wreg	equ	0xFE8
 10748                           postdec1	equ	0xFE5
 10749                           fsr1l	equ	0xFE1
 10750                           indf2	equ	0xFDF
 10751                           postinc2	equ	0xFDE
 10752                           postdec2	equ	0xFDD
 10753                           fsr2h	equ	0xFDA
 10754                           fsr2l	equ	0xFD9
 10755                           status	equ	0xFD8
 10756                           
 10757 ;; *************** function _display7seg *****************
 10758 ;; Defined at:
 10759 ;;		line 35 in file "display7s.c"
 10760 ;; Parameters:    Size  Location     Type
 10761 ;;  v               1    wreg     unsigned char 
 10762 ;; Auto vars:     Size  Location     Type
 10763 ;;  v               1   23[COMRAM] unsigned char 
 10764 ;; Return value:  Size  Location     Type
 10765 ;;                  1    wreg      unsigned char 
 10766 ;; Registers used:
 10767 ;;		wreg, status,2, status,0
 10768 ;; Tracked objects:
 10769 ;;		On entry : 0/0
 10770 ;;		On exit  : 0/0
 10771 ;;		Unchanged: 0/0
 10772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;Total ram usage:        1 bytes
 10778 ;; Hardware stack levels used:    1
 10779 ;; Hardware stack levels required when called:    3
 10780 ;; This function calls:
 10781 ;;		Nothing
 10782 ;; This function is called by:
 10783 ;;		_main
 10784 ;; This function uses a non-reentrant model
 10785 ;;
 10786                           
 10787                           	psect	text44
 10788  003E9E                     __ptext44:
 10789                           	opt stack 0
 10790  003E9E                     _display7seg:
 10791                           	opt stack 27
 10792                           
 10793                           ; BSR set to: 0
 10794                           ;incstack = 0
 10795                           ;display7seg@v stored from wreg
 10796  003E9E  6E18               	movwf	display7seg@v,c
 10797                           
 10798                           ;display7s.c: 37: switch(v)
 10799  003EA0  D016               	goto	l4483
 10800  003EA2                     l4437:
 10801                           
 10802                           ;display7s.c: 40: return 0x3F;
 10803  003EA2  0E3F               	movlw	63
 10804  003EA4  0012               	return	
 10805  003EA6                     l4441:
 10806                           
 10807                           ;display7s.c: 42: return 0x06;
 10808  003EA6  0E06               	movlw	6
 10809  003EA8  0012               	return	
 10810  003EAA                     l4445:
 10811                           
 10812                           ;display7s.c: 44: return 0x5B;
 10813  003EAA  0E5B               	movlw	91
 10814  003EAC  0012               	return	
 10815  003EAE                     l4449:
 10816                           
 10817                           ;display7s.c: 46: return 0x4F;
 10818  003EAE  0E4F               	movlw	79
 10819  003EB0  0012               	return	
 10820  003EB2                     l4453:
 10821                           
 10822                           ;display7s.c: 48: return 0x66;
 10823  003EB2  0E66               	movlw	102
 10824  003EB4  0012               	return	
 10825  003EB6                     l4457:
 10826                           
 10827                           ;display7s.c: 50: return 0x6D;
 10828  003EB6  0E6D               	movlw	109
 10829  003EB8  0012               	return	
 10830  003EBA                     l4461:
 10831                           
 10832                           ;display7s.c: 52: return 0x7D;
 10833  003EBA  0E7D               	movlw	125
 10834  003EBC  0012               	return	
 10835  003EBE                     l4465:
 10836                           
 10837                           ;display7s.c: 54: return 0x07;
 10838  003EBE  0E07               	movlw	7
 10839  003EC0  0012               	return	
 10840  003EC2                     l4469:
 10841                           
 10842                           ;display7s.c: 56: return 0x7F;
 10843  003EC2  0E7F               	movlw	127
 10844  003EC4  0012               	return	
 10845  003EC6                     l4473:
 10846                           
 10847                           ;display7s.c: 58: return 0x6F;
 10848  003EC6  0E6F               	movlw	111
 10849  003EC8  0012               	return	
 10850  003ECA                     l4477:
 10851                           
 10852                           ;display7s.c: 60: return 0;
 10853  003ECA  0E00               	movlw	0
 10854                           
 10855                           ;display7s.c: 61: }
 10856  003ECC  0012               	return	
 10857  003ECE                     l4483:
 10858  003ECE  5018               	movf	display7seg@v,w,c
 10859                           
 10860                           ; Switch size 1, requested type "space"
 10861                           ; Number of cases is 10, Range of values is 0 to 9
 10862                           ; switch strategies available:
 10863                           ; Name         Instructions Cycles
 10864                           ; simple_byte           31    16 (average)
 10865                           ;	Chosen strategy is simple_byte
 10866  003ED0  0A00               	xorlw	0	; case 0
 10867  003ED2  B4D8               	btfsc	status,2,c
 10868  003ED4  D7E6               	goto	l4437
 10869  003ED6  0A01               	xorlw	1	; case 1
 10870  003ED8  B4D8               	btfsc	status,2,c
 10871  003EDA  D7E5               	goto	l4441
 10872  003EDC  0A03               	xorlw	3	; case 2
 10873  003EDE  B4D8               	btfsc	status,2,c
 10874  003EE0  D7E4               	goto	l4445
 10875  003EE2  0A01               	xorlw	1	; case 3
 10876  003EE4  B4D8               	btfsc	status,2,c
 10877  003EE6  D7E3               	goto	l4449
 10878  003EE8  0A07               	xorlw	7	; case 4
 10879  003EEA  B4D8               	btfsc	status,2,c
 10880  003EEC  D7E2               	goto	l4453
 10881  003EEE  0A01               	xorlw	1	; case 5
 10882  003EF0  B4D8               	btfsc	status,2,c
 10883  003EF2  D7E1               	goto	l4457
 10884  003EF4  0A03               	xorlw	3	; case 6
 10885  003EF6  B4D8               	btfsc	status,2,c
 10886  003EF8  D7E0               	goto	l4461
 10887  003EFA  0A01               	xorlw	1	; case 7
 10888  003EFC  B4D8               	btfsc	status,2,c
 10889  003EFE  D7DF               	goto	l4465
 10890  003F00  0A0F               	xorlw	15	; case 8
 10891  003F02  B4D8               	btfsc	status,2,c
 10892  003F04  D7DE               	goto	l4469
 10893  003F06  0A01               	xorlw	1	; case 9
 10894  003F08  B4D8               	btfsc	status,2,c
 10895  003F0A  D7DD               	goto	l4473
 10896  003F0C  D7DE               	goto	l4477
 10897  003F0E                     __end_of_display7seg:
 10898                           	opt stack 0
 10899                           tblptru	equ	0xFF8
 10900                           tblptrh	equ	0xFF7
 10901                           tblptrl	equ	0xFF6
 10902                           tablat	equ	0xFF5
 10903                           prodh	equ	0xFF4
 10904                           prodl	equ	0xFF3
 10905                           intcon	equ	0xFF2
 10906                           postinc0	equ	0xFEE
 10907                           wreg	equ	0xFE8
 10908                           postdec1	equ	0xFE5
 10909                           fsr1l	equ	0xFE1
 10910                           indf2	equ	0xFDF
 10911                           postinc2	equ	0xFDE
 10912                           postdec2	equ	0xFDD
 10913                           fsr2h	equ	0xFDA
 10914                           fsr2l	equ	0xFD9
 10915                           status	equ	0xFD8
 10916                           
 10917 ;; *************** function _highIsr *****************
 10918 ;; Defined at:
 10919 ;;		line 97 in file "pwm_asl.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;		None
 10922 ;; Auto vars:     Size  Location     Type
 10923 ;;		None
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  1    wreg      void 
 10926 ;; Registers used:
 10927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10936 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10937 ;;Total ram usage:       14 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:    2
 10940 ;; This function calls:
 10941 ;;		_RX_isr
 10942 ;;		_Timer1_isr
 10943 ;;		___lwmod
 10944 ;;		_examine
 10945 ;; This function is called by:
 10946 ;;		Interrupt level 2
 10947 ;; This function uses a non-reentrant model
 10948 ;;
 10949                           
 10950                           	psect	intcode
 10951  000008                     __pintcode:
 10952                           	opt stack 0
 10953  000008                     _highIsr:
 10954                           	opt stack 22
 10955                           
 10956                           ;incstack = 0
 10957  000008  8268               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10958  00000A  CFFA F00A          	movff	pclath,??_highIsr
 10959  00000E  CFFB F00B          	movff	pclatu,??_highIsr+1
 10960  000012  ED1B  F01D         	call	int_func,f	;refresh shadow registers
 10961                           pclatu	equ	0xFFB
 10962                           pclath	equ	0xFFA
 10963                           tblptru	equ	0xFF8
 10964                           tblptrh	equ	0xFF7
 10965                           tblptrl	equ	0xFF6
 10966                           tablat	equ	0xFF5
 10967                           prodh	equ	0xFF4
 10968                           prodl	equ	0xFF3
 10969                           intcon	equ	0xFF2
 10970                           postinc0	equ	0xFEE
 10971                           wreg	equ	0xFE8
 10972                           postdec1	equ	0xFE5
 10973                           fsr1l	equ	0xFE1
 10974                           indf2	equ	0xFDF
 10975                           postinc2	equ	0xFDE
 10976                           postdec2	equ	0xFDD
 10977                           fsr2h	equ	0xFDA
 10978                           fsr2l	equ	0xFD9
 10979                           status	equ	0xFD8
 10980                           
 10981                           	psect	intcode_body
 10982  003A36                     __pintcode_body:
 10983                           	opt stack 22
 10984  003A36                     int_func:
 10985                           	opt stack 22
 10986  003A36  0006               	pop		; remove dummy address from shadow register refresh
 10987  003A38  CFE9 F00C          	movff	fsr0l,??_highIsr+2
 10988  003A3C  CFEA F00D          	movff	fsr0h,??_highIsr+3
 10989  003A40  CFE1 F00E          	movff	fsr1l,??_highIsr+4
 10990  003A44  CFE2 F00F          	movff	fsr1h,??_highIsr+5
 10991  003A48  CFD9 F010          	movff	fsr2l,??_highIsr+6
 10992  003A4C  CFDA F011          	movff	fsr2h,??_highIsr+7
 10993  003A50  CFF3 F012          	movff	prodl,??_highIsr+8
 10994  003A54  CFF4 F013          	movff	prodh,??_highIsr+9
 10995  003A58  CFF6 F014          	movff	tblptrl,??_highIsr+10
 10996  003A5C  CFF7 F015          	movff	tblptrh,??_highIsr+11
 10997  003A60  CFF8 F016          	movff	tblptru,??_highIsr+12
 10998  003A64  CFF5 F017          	movff	tablat,??_highIsr+13
 10999                           
 11000                           ;pwm_asl.c: 100: if(PIR1bits.TMR1IF) Timer1_isr(p2%3);
 11001  003A68  A09E               	btfss	3998,0,c	;volatile
 11002  003A6A  D011               	goto	i2l92
 11003  003A6C  C05B  F001         	movff	_p2,___lwmod@dividend
 11004  003A70  C05C  F002         	movff	_p2+1,___lwmod@dividend+1
 11005  003A74  0E00               	movlw	0
 11006  003A76  6E04               	movwf	___lwmod@divisor+1,c
 11007  003A78  0E03               	movlw	3
 11008  003A7A  6E03               	movwf	___lwmod@divisor,c
 11009  003A7C  ECDF  F020         	call	___lwmod	;wreg free
 11010  003A80  C001  F007         	movff	?___lwmod,Timer1_isr@f
 11011  003A84  C002  F008         	movff	?___lwmod+1,Timer1_isr@f+1
 11012  003A88  EC9B  F01E         	call	_Timer1_isr	;wreg free
 11013  003A8C  D018               	goto	i2l96
 11014  003A8E                     i2l92:
 11015                           
 11016                           ;pwm_asl.c: 101: else if(PIR1bits.RCIF){
 11017  003A8E  AA9E               	btfss	3998,5,c	;volatile
 11018  003A90  D016               	goto	i2l96
 11019                           
 11020                           ;pwm_asl.c: 102: strr[size++]=RX_isr();
 11021  003A92  0E65               	movlw	low _strr
 11022  003A94  245D               	addwf	_size,w,c
 11023  003A96  6ED9               	movwf	fsr2l,c
 11024  003A98  0E00               	movlw	high _strr
 11025  003A9A  205E               	addwfc	_size+1,w,c
 11026  003A9C  6EDA               	movwf	fsr2h,c
 11027  003A9E  EC7B  F021         	call	_RX_isr	;wreg free
 11028  003AA2  6EDF               	movwf	indf2,c
 11029  003AA4  4A5D               	infsnz	_size,f,c
 11030  003AA6  2A5E               	incf	_size+1,f,c
 11031                           
 11032                           ;pwm_asl.c: 103: if(size==3){
 11033  003AA8  0E03               	movlw	3
 11034  003AAA  185D               	xorwf	_size,w,c
 11035  003AAC  105E               	iorwf	_size+1,w,c
 11036  003AAE  A4D8               	btfss	status,2,c
 11037  003AB0  D004               	goto	i2l4513
 11038                           
 11039                           ;pwm_asl.c: 104: size=0;
 11040  003AB2  0E00               	movlw	0
 11041  003AB4  6E5E               	movwf	_size+1,c
 11042  003AB6  0E00               	movlw	0
 11043  003AB8  6E5D               	movwf	_size,c
 11044  003ABA                     i2l4513:
 11045                           
 11046                           ;pwm_asl.c: 105: }
 11047                           ;pwm_asl.c: 106: examine();
 11048  003ABA  EC1B  F020         	call	_examine	;wreg free
 11049  003ABE                     i2l96:
 11050  003ABE  C017  FFF5         	movff	??_highIsr+13,tablat
 11051  003AC2  C016  FFF8         	movff	??_highIsr+12,tblptru
 11052  003AC6  C015  FFF7         	movff	??_highIsr+11,tblptrh
 11053  003ACA  C014  FFF6         	movff	??_highIsr+10,tblptrl
 11054  003ACE  C013  FFF4         	movff	??_highIsr+9,prodh
 11055  003AD2  C012  FFF3         	movff	??_highIsr+8,prodl
 11056  003AD6  C011  FFDA         	movff	??_highIsr+7,fsr2h
 11057  003ADA  C010  FFD9         	movff	??_highIsr+6,fsr2l
 11058  003ADE  C00F  FFE2         	movff	??_highIsr+5,fsr1h
 11059  003AE2  C00E  FFE1         	movff	??_highIsr+4,fsr1l
 11060  003AE6  C00D  FFEA         	movff	??_highIsr+3,fsr0h
 11061  003AEA  C00C  FFE9         	movff	??_highIsr+2,fsr0l
 11062  003AEE  C00B  FFFB         	movff	??_highIsr+1,pclatu
 11063  003AF2  C00A  FFFA         	movff	??_highIsr,pclath
 11064  003AF6  9268               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11065  003AF8  0011               	retfie		f
 11066  003AFA                     __end_of_highIsr:
 11067                           	opt stack 0
 11068                           pclatu	equ	0xFFB
 11069                           pclath	equ	0xFFA
 11070                           tblptru	equ	0xFF8
 11071                           tblptrh	equ	0xFF7
 11072                           tblptrl	equ	0xFF6
 11073                           tablat	equ	0xFF5
 11074                           prodh	equ	0xFF4
 11075                           prodl	equ	0xFF3
 11076                           intcon	equ	0xFF2
 11077                           postinc0	equ	0xFEE
 11078                           fsr0h	equ	0xFEA
 11079                           fsr0l	equ	0xFE9
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           fsr1h	equ	0xFE2
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           fsr2h	equ	0xFDA
 11088                           fsr2l	equ	0xFD9
 11089                           status	equ	0xFD8
 11090                           
 11091 ;; *************** function _examine *****************
 11092 ;; Defined at:
 11093 ;;		line 116 in file "pwm_asl.c"
 11094 ;; Parameters:    Size  Location     Type
 11095 ;;		None
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;		None
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  1    wreg      void 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2, status,0
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;Total ram usage:        0 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; This function calls:
 11114 ;;		Nothing
 11115 ;; This function is called by:
 11116 ;;		_highIsr
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           	psect	text46
 11121  004036                     __ptext46:
 11122                           	opt stack 0
 11123  004036                     _examine:
 11124                           	opt stack 23
 11125                           
 11126                           ;pwm_asl.c: 117: if(strr[0]=='o'){
 11127                           
 11128                           ;incstack = 0
 11129  004036  0E6F               	movlw	111
 11130  004038  1865               	xorwf	_strr,w,c
 11131  00403A  A4D8               	btfss	status,2,c
 11132  00403C  0012               	return	
 11133                           
 11134                           ;pwm_asl.c: 118: if(strr[1]=='n'){
 11135  00403E  0E6E               	movlw	110
 11136  004040  1866               	xorwf	_strr+1,w,c
 11137  004042  A4D8               	btfss	status,2,c
 11138  004044  D010               	goto	i2l3975
 11139                           
 11140                           ;pwm_asl.c: 119: size=0;
 11141  004046  0E00               	movlw	0
 11142  004048  6E5E               	movwf	_size+1,c
 11143  00404A  0E00               	movlw	0
 11144  00404C  6E5D               	movwf	_size,c
 11145                           
 11146                           ;pwm_asl.c: 120: f= 1;
 11147  00404E  0E00               	movlw	0
 11148  004050  0101               	movlb	1	; () banked
 11149  004052  6F48               	movwf	(_f+1)& (0+255),b
 11150  004054  0E01               	movlw	1
 11151  004056  6F47               	movwf	_f& (0+255),b
 11152                           
 11153                           ;pwm_asl.c: 121: strr[0]='\n';
 11154  004058  0E0A               	movlw	10
 11155  00405A  6E65               	movwf	_strr,c
 11156                           
 11157                           ;pwm_asl.c: 122: strr[1]='\n';
 11158  00405C  0E0A               	movlw	10
 11159  00405E  6E66               	movwf	_strr+1,c
 11160                           
 11161                           ;pwm_asl.c: 123: strr[2]='\n';
 11162  004060  0E0A               	movlw	10
 11163  004062  6E67               	movwf	_strr+2,c
 11164                           
 11165                           ;pwm_asl.c: 124: }else if(strr[1]=='f'){
 11166  004064  0012               	return	
 11167  004066                     i2l3975:
 11168  004066  0E66               	movlw	102
 11169  004068  1866               	xorwf	_strr+1,w,c
 11170  00406A  A4D8               	btfss	status,2,c
 11171  00406C  0012               	return	
 11172                           
 11173                           ;pwm_asl.c: 125: if(strr[2]=='f'){
 11174  00406E  0E66               	movlw	102
 11175  004070  1867               	xorwf	_strr+2,w,c
 11176  004072  A4D8               	btfss	status,2,c
 11177  004074  0012               	return	
 11178                           
 11179                           ;pwm_asl.c: 126: size=0;
 11180  004076  0E00               	movlw	0
 11181  004078  6E5E               	movwf	_size+1,c
 11182  00407A  0E00               	movlw	0
 11183  00407C  6E5D               	movwf	_size,c
 11184                           
 11185                           ;pwm_asl.c: 127: f= 0;
 11186  00407E  0E00               	movlw	0
 11187  004080  0101               	movlb	1	; () banked
 11188  004082  6F48               	movwf	(_f+1)& (0+255),b
 11189  004084  0E00               	movlw	0
 11190  004086  6F47               	movwf	_f& (0+255),b
 11191                           
 11192                           ;pwm_asl.c: 128: strr[0]='\n';
 11193  004088  0E0A               	movlw	10
 11194  00408A  6E65               	movwf	_strr,c
 11195                           
 11196                           ;pwm_asl.c: 129: strr[1]='\n';
 11197  00408C  0E0A               	movlw	10
 11198  00408E  6E66               	movwf	_strr+1,c
 11199                           
 11200                           ;pwm_asl.c: 130: strr[2]='\n';
 11201  004090  0E0A               	movlw	10
 11202  004092  6E67               	movwf	_strr+2,c
 11203                           
 11204                           ; BSR set to: 1
 11205                           
 11206                           ; BSR set to: 1
 11207                           
 11208                           ; BSR set to: 1
 11209  004094  0012               	return	
 11210  004096                     __end_of_examine:
 11211                           	opt stack 0
 11212                           pclatu	equ	0xFFB
 11213                           pclath	equ	0xFFA
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           postinc0	equ	0xFEE
 11222                           fsr0h	equ	0xFEA
 11223                           fsr0l	equ	0xFE9
 11224                           wreg	equ	0xFE8
 11225                           postdec1	equ	0xFE5
 11226                           fsr1h	equ	0xFE2
 11227                           fsr1l	equ	0xFE1
 11228                           indf2	equ	0xFDF
 11229                           postinc2	equ	0xFDE
 11230                           postdec2	equ	0xFDD
 11231                           fsr2h	equ	0xFDA
 11232                           fsr2l	equ	0xFD9
 11233                           status	equ	0xFD8
 11234                           
 11235 ;; *************** function ___lwmod *****************
 11236 ;; Defined at:
 11237 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;  dividend        2    0[COMRAM] unsigned int 
 11240 ;;  divisor         2    2[COMRAM] unsigned int 
 11241 ;; Auto vars:     Size  Location     Type
 11242 ;;  counter         1    4[COMRAM] unsigned char 
 11243 ;; Return value:  Size  Location     Type
 11244 ;;                  2    0[COMRAM] unsigned int 
 11245 ;; Registers used:
 11246 ;;		wreg, status,2, status,0
 11247 ;; Tracked objects:
 11248 ;;		On entry : 0/0
 11249 ;;		On exit  : 0/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11252 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11255 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11256 ;;Total ram usage:        5 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; This function calls:
 11259 ;;		Nothing
 11260 ;; This function is called by:
 11261 ;;		_highIsr
 11262 ;; This function uses a non-reentrant model
 11263 ;;
 11264                           
 11265                           	psect	text47
 11266  0041BE                     __ptext47:
 11267                           	opt stack 0
 11268  0041BE                     ___lwmod:
 11269                           	opt stack 23
 11270                           
 11271                           ;incstack = 0
 11272  0041BE  5003               	movf	___lwmod@divisor,w,c
 11273  0041C0  1004               	iorwf	___lwmod@divisor+1,w,c
 11274  0041C2  B4D8               	btfsc	status,2,c
 11275  0041C4  D018               	goto	i2l964
 11276  0041C6  0E01               	movlw	1
 11277  0041C8  6E05               	movwf	___lwmod@counter,c
 11278  0041CA  D004               	goto	i2l4491
 11279  0041CC                     i2l4489:
 11280  0041CC  90D8               	bcf	status,0,c
 11281  0041CE  3603               	rlcf	___lwmod@divisor,f,c
 11282  0041D0  3604               	rlcf	___lwmod@divisor+1,f,c
 11283  0041D2  2A05               	incf	___lwmod@counter,f,c
 11284  0041D4                     i2l4491:
 11285  0041D4  AE04               	btfss	___lwmod@divisor+1,7,c
 11286  0041D6  D7FA               	goto	i2l4489
 11287  0041D8                     i2l4493:
 11288  0041D8  5003               	movf	___lwmod@divisor,w,c
 11289  0041DA  5C01               	subwf	___lwmod@dividend,w,c
 11290  0041DC  5004               	movf	___lwmod@divisor+1,w,c
 11291  0041DE  5802               	subwfb	___lwmod@dividend+1,w,c
 11292  0041E0  A0D8               	btfss	status,0,c
 11293  0041E2  D004               	goto	i2l4497
 11294  0041E4  5003               	movf	___lwmod@divisor,w,c
 11295  0041E6  5E01               	subwf	___lwmod@dividend,f,c
 11296  0041E8  5004               	movf	___lwmod@divisor+1,w,c
 11297  0041EA  5A02               	subwfb	___lwmod@dividend+1,f,c
 11298  0041EC                     i2l4497:
 11299  0041EC  90D8               	bcf	status,0,c
 11300  0041EE  3204               	rrcf	___lwmod@divisor+1,f,c
 11301  0041F0  3203               	rrcf	___lwmod@divisor,f,c
 11302  0041F2  2E05               	decfsz	___lwmod@counter,f,c
 11303  0041F4  D7F1               	goto	i2l4493
 11304  0041F6                     i2l964:
 11305  0041F6  C001  F001         	movff	___lwmod@dividend,?___lwmod
 11306  0041FA  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 11307  0041FE  0012               	return		;funcret
 11308  004200                     __end_of___lwmod:
 11309                           	opt stack 0
 11310                           pclatu	equ	0xFFB
 11311                           pclath	equ	0xFFA
 11312                           tblptru	equ	0xFF8
 11313                           tblptrh	equ	0xFF7
 11314                           tblptrl	equ	0xFF6
 11315                           tablat	equ	0xFF5
 11316                           prodh	equ	0xFF4
 11317                           prodl	equ	0xFF3
 11318                           intcon	equ	0xFF2
 11319                           postinc0	equ	0xFEE
 11320                           fsr0h	equ	0xFEA
 11321                           fsr0l	equ	0xFE9
 11322                           wreg	equ	0xFE8
 11323                           postdec1	equ	0xFE5
 11324                           fsr1h	equ	0xFE2
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           fsr2h	equ	0xFDA
 11330                           fsr2l	equ	0xFD9
 11331                           status	equ	0xFD8
 11332                           
 11333 ;; *************** function _Timer1_isr *****************
 11334 ;; Defined at:
 11335 ;;		line 21 in file "timer.c"
 11336 ;; Parameters:    Size  Location     Type
 11337 ;;  f               2    6[COMRAM] unsigned int 
 11338 ;; Auto vars:     Size  Location     Type
 11339 ;;		None
 11340 ;; Return value:  Size  Location     Type
 11341 ;;                  1    wreg      void 
 11342 ;; Registers used:
 11343 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11344 ;; Tracked objects:
 11345 ;;		On entry : 0/0
 11346 ;;		On exit  : 0/0
 11347 ;;		Unchanged: 0/0
 11348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11349 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;Total ram usage:        3 bytes
 11354 ;; Hardware stack levels used:    1
 11355 ;; Hardware stack levels required when called:    1
 11356 ;; This function calls:
 11357 ;;		i2___wmul
 11358 ;;		i2_reloadTimer1
 11359 ;; This function is called by:
 11360 ;;		_highIsr
 11361 ;; This function uses a non-reentrant model
 11362 ;;
 11363                           
 11364                           	psect	text48
 11365  003D36                     __ptext48:
 11366                           	opt stack 0
 11367  003D36                     _Timer1_isr:
 11368                           	opt stack 22
 11369                           
 11370                           ;timer.c: 23: PIR1bits.TMR1IF = 0;
 11371                           
 11372                           ;incstack = 0
 11373  003D36  909E               	bcf	3998,0,c	;volatile
 11374                           
 11375                           ;timer.c: 24: count_t1++;
 11376  003D38  4A55               	infsnz	_count_t1,f,c
 11377  003D3A  2A56               	incf	_count_t1+1,f,c
 11378                           
 11379                           ;timer.c: 25: count_t2++;
 11380  003D3C  4A57               	infsnz	_count_t2,f,c
 11381  003D3E  2A58               	incf	_count_t2+1,f,c
 11382                           
 11383                           ;timer.c: 26: if(count_t1 >= f*20) {
 11384  003D40  C007  F001         	movff	Timer1_isr@f,i2___wmul@multiplier
 11385  003D44  C008  F002         	movff	Timer1_isr@f+1,i2___wmul@multiplier+1
 11386  003D48  0E00               	movlw	0
 11387  003D4A  6E04               	movwf	i2___wmul@multiplicand+1,c
 11388  003D4C  0E14               	movlw	20
 11389  003D4E  6E03               	movwf	i2___wmul@multiplicand,c
 11390  003D50  ECBA  F021         	call	i2___wmul	;wreg free
 11391  003D54  5001               	movf	?i2___wmul,w,c
 11392  003D56  5C55               	subwf	_count_t1,w,c
 11393  003D58  5002               	movf	?i2___wmul+1,w,c
 11394  003D5A  5856               	subwfb	_count_t1+1,w,c
 11395  003D5C  A0D8               	btfss	status,0,c
 11396  003D5E  D010               	goto	i2l3961
 11397                           
 11398                           ;timer.c: 27: PORTBbits.RB1 = !PORTBbits.RB1;
 11399  003D60  B281               	btfsc	3969,1,c	;volatile
 11400  003D62  D003               	goto	i2u410_40
 11401  003D64  6A09               	clrf	??_Timer1_isr& (0+255),c
 11402  003D66  2A09               	incf	??_Timer1_isr& (0+255),f,c
 11403  003D68  D001               	goto	i2u411_48
 11404  003D6A                     i2u410_40:
 11405  003D6A  6A09               	clrf	??_Timer1_isr& (0+255),c
 11406  003D6C                     i2u411_48:
 11407  003D6C  4609               	rlncf	??_Timer1_isr,f,c
 11408  003D6E  5081               	movf	3969,w,c	;volatile
 11409  003D70  1809               	xorwf	??_Timer1_isr,w,c
 11410  003D72  0BFD               	andlw	-3
 11411  003D74  1809               	xorwf	??_Timer1_isr,w,c
 11412  003D76  6E81               	movwf	3969,c	;volatile
 11413                           
 11414                           ;timer.c: 28: count_t1=0;
 11415  003D78  0E00               	movlw	0
 11416  003D7A  6E56               	movwf	_count_t1+1,c
 11417  003D7C  0E00               	movlw	0
 11418  003D7E  6E55               	movwf	_count_t1,c
 11419  003D80                     i2l3961:
 11420                           
 11421                           ;timer.c: 29: }
 11422                           ;timer.c: 30: if(count_t1 >= 5) {
 11423  003D80  5056               	movf	_count_t1+1,w,c
 11424  003D82  E104               	bnz	i2u412_40
 11425  003D84  0E05               	movlw	5
 11426  003D86  5C55               	subwf	_count_t1,w,c
 11427  003D88  A0D8               	btfss	status,0,c
 11428  003D8A  D011               	goto	i2l3967
 11429  003D8C                     i2u412_40:
 11430                           
 11431                           ;timer.c: 31: PORTBbits.RB2 = !PORTBbits.RB2;
 11432  003D8C  B481               	btfsc	3969,2,c	;volatile
 11433  003D8E  D003               	goto	i2u413_40
 11434  003D90  6A09               	clrf	??_Timer1_isr& (0+255),c
 11435  003D92  2A09               	incf	??_Timer1_isr& (0+255),f,c
 11436  003D94  D001               	goto	i2u414_48
 11437  003D96                     i2u413_40:
 11438  003D96  6A09               	clrf	??_Timer1_isr& (0+255),c
 11439  003D98                     i2u414_48:
 11440  003D98  4609               	rlncf	??_Timer1_isr,f,c
 11441  003D9A  4609               	rlncf	??_Timer1_isr,f,c
 11442  003D9C  5081               	movf	3969,w,c	;volatile
 11443  003D9E  1809               	xorwf	??_Timer1_isr,w,c
 11444  003DA0  0BFB               	andlw	-5
 11445  003DA2  1809               	xorwf	??_Timer1_isr,w,c
 11446  003DA4  6E81               	movwf	3969,c	;volatile
 11447                           
 11448                           ;timer.c: 32: count_t2=0;
 11449  003DA6  0E00               	movlw	0
 11450  003DA8  6E58               	movwf	_count_t2+1,c
 11451  003DAA  0E00               	movlw	0
 11452  003DAC  6E57               	movwf	_count_t2,c
 11453  003DAE                     i2l3967:
 11454                           
 11455                           ;timer.c: 33: }
 11456                           ;timer.c: 34: reloadTimer1();
 11457  003DAE  EC59  F022         	call	i2_reloadTimer1	;wreg free
 11458  003DB2  0012               	return		;funcret
 11459  003DB4                     __end_of_Timer1_isr:
 11460                           	opt stack 0
 11461                           pclatu	equ	0xFFB
 11462                           pclath	equ	0xFFA
 11463                           tblptru	equ	0xFF8
 11464                           tblptrh	equ	0xFF7
 11465                           tblptrl	equ	0xFF6
 11466                           tablat	equ	0xFF5
 11467                           prodh	equ	0xFF4
 11468                           prodl	equ	0xFF3
 11469                           intcon	equ	0xFF2
 11470                           postinc0	equ	0xFEE
 11471                           fsr0h	equ	0xFEA
 11472                           fsr0l	equ	0xFE9
 11473                           wreg	equ	0xFE8
 11474                           postdec1	equ	0xFE5
 11475                           fsr1h	equ	0xFE2
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           postdec2	equ	0xFDD
 11480                           fsr2h	equ	0xFDA
 11481                           fsr2l	equ	0xFD9
 11482                           status	equ	0xFD8
 11483                           
 11484 ;; *************** function i2_reloadTimer1 *****************
 11485 ;; Defined at:
 11486 ;;		line 16 in file "timer.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;		None
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;		None
 11491 ;; Return value:  Size  Location     Type
 11492 ;;                  1    wreg      void 
 11493 ;; Registers used:
 11494 ;;		wreg, status,2
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;Total ram usage:        0 bytes
 11505 ;; Hardware stack levels used:    1
 11506 ;; This function calls:
 11507 ;;		Nothing
 11508 ;; This function is called by:
 11509 ;;		_Timer1_isr
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           	psect	text49
 11514  0044B2                     __ptext49:
 11515                           	opt stack 0
 11516  0044B2                     i2_reloadTimer1:
 11517                           	opt stack 22
 11518                           
 11519                           ;timer.c: 18: TMR1H = (unsigned char) ((40536 >> 8) & 0x00FF);
 11520                           
 11521                           ;incstack = 0
 11522  0044B2  0E9E               	movlw	158
 11523  0044B4  6ECF               	movwf	4047,c	;volatile
 11524                           
 11525                           ;timer.c: 19: TMR1L = (unsigned char)(40536 & 0x00FF );
 11526  0044B6  0E58               	movlw	88
 11527  0044B8  6ECE               	movwf	4046,c	;volatile
 11528  0044BA  0012               	return		;funcret
 11529  0044BC                     __end_ofi2_reloadTimer1:
 11530                           	opt stack 0
 11531                           pclatu	equ	0xFFB
 11532                           pclath	equ	0xFFA
 11533                           tblptru	equ	0xFF8
 11534                           tblptrh	equ	0xFF7
 11535                           tblptrl	equ	0xFF6
 11536                           tablat	equ	0xFF5
 11537                           prodh	equ	0xFF4
 11538                           prodl	equ	0xFF3
 11539                           intcon	equ	0xFF2
 11540                           postinc0	equ	0xFEE
 11541                           fsr0h	equ	0xFEA
 11542                           fsr0l	equ	0xFE9
 11543                           wreg	equ	0xFE8
 11544                           postdec1	equ	0xFE5
 11545                           fsr1h	equ	0xFE2
 11546                           fsr1l	equ	0xFE1
 11547                           indf2	equ	0xFDF
 11548                           postinc2	equ	0xFDE
 11549                           postdec2	equ	0xFDD
 11550                           fsr2h	equ	0xFDA
 11551                           fsr2l	equ	0xFD9
 11552                           status	equ	0xFD8
 11553                           
 11554 ;; *************** function i2___wmul *****************
 11555 ;; Defined at:
 11556 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 11557 ;; Parameters:    Size  Location     Type
 11558 ;;  multiplier      2    0[COMRAM] unsigned int 
 11559 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  __wmul          2    4[COMRAM] unsigned int 
 11562 ;; Return value:  Size  Location     Type
 11563 ;;                  2    0[COMRAM] unsigned int 
 11564 ;; Registers used:
 11565 ;;		wreg, status,2, status,0, prodl, prodh
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11571 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11572 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11574 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11575 ;;Total ram usage:        6 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; This function calls:
 11578 ;;		Nothing
 11579 ;; This function is called by:
 11580 ;;		_Timer1_isr
 11581 ;; This function uses a non-reentrant model
 11582 ;;
 11583                           
 11584                           	psect	text50
 11585  004374                     __ptext50:
 11586                           	opt stack 0
 11587  004374                     i2___wmul:
 11588                           	opt stack 22
 11589                           
 11590                           ;incstack = 0
 11591  004374  5001               	movf	i2___wmul@multiplier,w,c
 11592  004376  0203               	mulwf	i2___wmul@multiplicand,c
 11593  004378  CFF3 F005          	movff	prodl,i2___wmul@product
 11594  00437C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11595  004380  5001               	movf	i2___wmul@multiplier,w,c
 11596  004382  0204               	mulwf	i2___wmul@multiplicand+1,c
 11597  004384  50F3               	movf	prodl,w,c
 11598  004386  2606               	addwf	i2___wmul@product+1,f,c
 11599  004388  5002               	movf	i2___wmul@multiplier+1,w,c
 11600  00438A  0203               	mulwf	i2___wmul@multiplicand,c
 11601  00438C  50F3               	movf	prodl,w,c
 11602  00438E  2606               	addwf	i2___wmul@product+1,f,c
 11603  004390  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11604  004394  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11605  004398  0012               	return	
 11606  00439A                     __end_ofi2___wmul:
 11607                           	opt stack 0
 11608                           pclatu	equ	0xFFB
 11609                           pclath	equ	0xFFA
 11610                           tblptru	equ	0xFF8
 11611                           tblptrh	equ	0xFF7
 11612                           tblptrl	equ	0xFF6
 11613                           tablat	equ	0xFF5
 11614                           prodh	equ	0xFF4
 11615                           prodl	equ	0xFF3
 11616                           intcon	equ	0xFF2
 11617                           postinc0	equ	0xFEE
 11618                           fsr0h	equ	0xFEA
 11619                           fsr0l	equ	0xFE9
 11620                           wreg	equ	0xFE8
 11621                           postdec1	equ	0xFE5
 11622                           fsr1h	equ	0xFE2
 11623                           fsr1l	equ	0xFE1
 11624                           indf2	equ	0xFDF
 11625                           postinc2	equ	0xFDE
 11626                           postdec2	equ	0xFDD
 11627                           fsr2h	equ	0xFDA
 11628                           fsr2l	equ	0xFD9
 11629                           status	equ	0xFD8
 11630                           
 11631 ;; *************** function _RX_isr *****************
 11632 ;; Defined at:
 11633 ;;		line 37 in file "timer.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;		None
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;		None
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      unsigned char 
 11640 ;; Registers used:
 11641 ;;		wreg, status,2, status,0
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;Total ram usage:        1 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; This function calls:
 11654 ;;		Nothing
 11655 ;; This function is called by:
 11656 ;;		_highIsr
 11657 ;; This function uses a non-reentrant model
 11658 ;;
 11659                           
 11660                           	psect	text51
 11661  0042F6                     __ptext51:
 11662                           	opt stack 0
 11663  0042F6                     _RX_isr:
 11664                           	opt stack 23
 11665                           
 11666                           ;incstack = 0
 11667  0042F6  0004               	clrwdt		;# 
 11668                           
 11669                           ;timer.c: 41: PORTBbits.RB3 = !PORTBbits.RB3;
 11670  0042F8  B681               	btfsc	3969,3,c	;volatile
 11671  0042FA  D003               	goto	i2u162_40
 11672  0042FC  6A01               	clrf	??_RX_isr& (0+255),c
 11673  0042FE  2A01               	incf	??_RX_isr& (0+255),f,c
 11674  004300  D001               	goto	i2u163_48
 11675  004302                     i2u162_40:
 11676  004302  6A01               	clrf	??_RX_isr& (0+255),c
 11677  004304                     i2u163_48:
 11678  004304  4601               	rlncf	??_RX_isr,f,c
 11679  004306  4601               	rlncf	??_RX_isr,f,c
 11680  004308  4601               	rlncf	??_RX_isr,f,c
 11681  00430A  5081               	movf	3969,w,c	;volatile
 11682  00430C  1801               	xorwf	??_RX_isr,w,c
 11683  00430E  0BF7               	andlw	-9
 11684  004310  1801               	xorwf	??_RX_isr,w,c
 11685  004312  6E81               	movwf	3969,c	;volatile
 11686                           
 11687                           ;timer.c: 42: ReceivedChar = RCREG;
 11688  004314  CFAE F05F          	movff	4014,_ReceivedChar	;volatile
 11689                           
 11690                           ;timer.c: 43: while (!TXSTAbits.TRMT) {asm(" clrwdt");}
 11691  004318  D001               	goto	i2l346
 11692  00431A                     i2l347:
 11693  00431A  0004               	clrwdt		;# 
 11694  00431C                     i2l346:
 11695  00431C  A2AC               	btfss	4012,1,c	;volatile
 11696  00431E  D7FD               	goto	i2l347
 11697                           
 11698                           ;timer.c: 44: return ReceivedChar;
 11699  004320  505F               	movf	_ReceivedChar,w,c
 11700  004322  0012               	return	
 11701  004324                     __end_of_RX_isr:
 11702                           	opt stack 0
 11703                           pclatu	equ	0xFFB
 11704                           pclath	equ	0xFFA
 11705                           tblptru	equ	0xFF8
 11706                           tblptrh	equ	0xFF7
 11707                           tblptrl	equ	0xFF6
 11708                           tablat	equ	0xFF5
 11709                           prodh	equ	0xFF4
 11710                           prodl	equ	0xFF3
 11711                           intcon	equ	0xFF2
 11712                           postinc0	equ	0xFEE
 11713                           fsr0h	equ	0xFEA
 11714                           fsr0l	equ	0xFE9
 11715                           wreg	equ	0xFE8
 11716                           postdec1	equ	0xFE5
 11717                           fsr1h	equ	0xFE2
 11718                           fsr1l	equ	0xFE1
 11719                           indf2	equ	0xFDF
 11720                           postinc2	equ	0xFDE
 11721                           postdec2	equ	0xFDD
 11722                           fsr2h	equ	0xFDA
 11723                           fsr2l	equ	0xFD9
 11724                           status	equ	0xFD8
 11725                           pclatu	equ	0xFFB
 11726                           pclath	equ	0xFFA
 11727                           tblptru	equ	0xFF8
 11728                           tblptrh	equ	0xFF7
 11729                           tblptrl	equ	0xFF6
 11730                           tablat	equ	0xFF5
 11731                           prodh	equ	0xFF4
 11732                           prodl	equ	0xFF3
 11733                           intcon	equ	0xFF2
 11734                           postinc0	equ	0xFEE
 11735                           fsr0h	equ	0xFEA
 11736                           fsr0l	equ	0xFE9
 11737                           wreg	equ	0xFE8
 11738                           postdec1	equ	0xFE5
 11739                           fsr1h	equ	0xFE2
 11740                           fsr1l	equ	0xFE1
 11741                           indf2	equ	0xFDF
 11742                           postinc2	equ	0xFDE
 11743                           postdec2	equ	0xFDD
 11744                           fsr2h	equ	0xFDA
 11745                           fsr2l	equ	0xFD9
 11746                           status	equ	0xFD8
 11747                           
 11748                           	psect	rparam
 11749  0000                     pclatu	equ	0xFFB
 11750                           pclath	equ	0xFFA
 11751                           tblptru	equ	0xFF8
 11752                           tblptrh	equ	0xFF7
 11753                           tblptrl	equ	0xFF6
 11754                           tablat	equ	0xFF5
 11755                           prodh	equ	0xFF4
 11756                           prodl	equ	0xFF3
 11757                           intcon	equ	0xFF2
 11758                           postinc0	equ	0xFEE
 11759                           fsr0h	equ	0xFEA
 11760                           fsr0l	equ	0xFE9
 11761                           wreg	equ	0xFE8
 11762                           postdec1	equ	0xFE5
 11763                           fsr1h	equ	0xFE2
 11764                           fsr1l	equ	0xFE1
 11765                           indf2	equ	0xFDF
 11766                           postinc2	equ	0xFDE
 11767                           postdec2	equ	0xFDD
 11768                           fsr2h	equ	0xFDA
 11769                           fsr2l	equ	0xFD9
 11770                           status	equ	0xFD8
 11771                           
 11772                           	psect	temp
 11773  000068                     btemp:
 11774                           	opt stack 0
 11775  000068                     	ds	1
 11776  0000                     int$flags	set	btemp
 11777                           pclatu	equ	0xFFB
 11778                           pclath	equ	0xFFA
 11779                           tblptru	equ	0xFF8
 11780                           tblptrh	equ	0xFF7
 11781                           tblptrl	equ	0xFF6
 11782                           tablat	equ	0xFF5
 11783                           prodh	equ	0xFF4
 11784                           prodl	equ	0xFF3
 11785                           intcon	equ	0xFF2
 11786                           postinc0	equ	0xFEE
 11787                           fsr0h	equ	0xFEA
 11788                           fsr0l	equ	0xFE9
 11789                           wreg	equ	0xFE8
 11790                           postdec1	equ	0xFE5
 11791                           fsr1h	equ	0xFE2
 11792                           fsr1l	equ	0xFE1
 11793                           indf2	equ	0xFDF
 11794                           postinc2	equ	0xFDE
 11795                           postdec2	equ	0xFDD
 11796                           fsr2h	equ	0xFDA
 11797                           fsr2l	equ	0xFD9
 11798                           status	equ	0xFD8


Data Sizes:
    Strings     85
    Constant    144
    Data        11
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     82     103
    BANK0           128     96     100
    BANK1           256     71      73
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_7(CODE[13]), STR_5(CODE[13]), STR_4(CODE[21]), STR_3(CODE[13]), 
		 -> STR_2(CODE[13]), STR_1(CODE[16]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 9
		 -> STR_6(CODE[9]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer(BANK1[32]), 


Critical Paths under _main in COMRAM

    _sprintf->_scale
    _scale->___awmod
    _fround->___awmod
    ___flmul->___awdiv
    ___awmod->___fltol
    ___llmod->___lldiv
    ___flsub->___xxtofl
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___xxtofl
    _read_adc_temp->___xxtofl
    ___fldiv->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles
    _floor->___xxtofl
    ___xxtofl->___fltol
    ___fltol->___flmul
    ___flge->___flmul
    ___fladd->___xxtofl

Critical Paths under _highIsr in COMRAM

    _highIsr->_Timer1_isr
    _Timer1_isr->i2___wmul

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_floor
    ___flsub->___fladd
    _read_adc_voltage->___fldiv
    _read_adc_temp->___fladd
    _floor->___fladd
    ___fladd->___fldiv

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                72    72      0   95103
                                             81 COMRAM     1     1      0
                                              0 BANK1     71    71      0
                            ___awmod
                            ___fladd
                             ___flge
                            ___flmul
                            ___fltol
                           _delay_ms
                        _display7seg
                              _floor
                       _initTimers01
                    _init_adc_no_lib
                          _init_pwm1
                  _is_byte_available
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                _read_adc_raw_no_lib
                      _read_adc_temp
                   _read_adc_voltage
                   _read_byte_no_lib
                 _send_string_no_lib
                       _set_pwm1_raw
                         _setupPorts
                        _setupSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             47    37     10   47891
                                             55 BANK0     41    31     10
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                              _floor (ARG)
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               13     9      4   10196
                                             72 COMRAM     9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    13      4    9917
                                             72 COMRAM     4     0      4
                                              0 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    5541
                                             31 COMRAM    25    17      8
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1973
                                             66 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___flmul (ARG)
                            ___fltol (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1985
                                             23 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     431
                                             23 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     431
                                             23 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             36 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4929
                                             45 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     237
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_pwm1_raw                                         4     2      2     300
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     131
                                             24 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_byte_no_lib                                     1     1      0      23
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    4539
                                             25 BANK0     11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (1) _read_adc_temp                                       11     7      4    9135
                                             45 BANK0     11     7      4
                            ___fladd
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      65
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1092
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2499
                                              0 BANK0     25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3390
                                             37 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    3089
                                             36 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1535
                                             33 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1692
                                             33 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1080
                                             31 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                             29 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     430
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _is_byte_available                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_pwm1                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
                       _reloadTimer1
 ---------------------------------------------------------------------------------
 (2) _reloadTimer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _floor                                               10     6      4    7865
                                             45 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                8     2      6     336
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     784
                                             66 COMRAM    14    10      4
                            ___fltol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     805
                                             56 COMRAM    10     6      4
                            ___awdiv (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8     822
                                             56 COMRAM    12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4596
                                             25 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (1) _display7seg                                          1     1      0      22
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _highIsr                                             14    14      0     582
                                              9 COMRAM    14    14      0
                             _RX_isr
                         _Timer1_isr
                            ___lwmod
                            _examine
 ---------------------------------------------------------------------------------
 (8) _examine                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) ___lwmod                                              5     1      4     287
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (8) _Timer1_isr                                           3     1      2     295
                                              6 COMRAM     3     1      2
                            ___lwmod (ARG)
                           i2___wmul
                     i2_reloadTimer1
 ---------------------------------------------------------------------------------
 (9) i2_reloadTimer1                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) i2___wmul                                             6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _RX_isr                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
     ___awdiv (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
     ___fltol (ARG)
       ___awdiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
   ___fladd
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
     ___wmul (ARG)
     ___xxtofl (ARG)
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
       ___flmul
         ___awdiv (ARG)
   ___flge
     ___flmul (ARG)
       ___awdiv (ARG)
   ___flmul
     ___awdiv (ARG)
   ___fltol
     ___awdiv (ARG)
     ___flmul (ARG)
       ___awdiv (ARG)
   _delay_ms
   _display7seg
   _floor
     ___fladd
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
         ___flmul
           ___awdiv (ARG)
     ___flge
       ___flmul (ARG)
         ___awdiv (ARG)
     ___fltol
       ___awdiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _frexp
   _initTimers01
     _reloadTimer1
   _init_adc_no_lib
   _init_pwm1
   _is_byte_available
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_raw_no_lib
   _read_adc_temp
     ___fladd
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
         ___flmul
           ___awdiv (ARG)
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _read_byte_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _set_pwm1_raw
   _setupPorts
   _setupSerial
   _sprintf
     ___awdiv
     ___fladd
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _fround (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
         ___flmul
           ___awdiv (ARG)
     ___flge
       ___flmul (ARG)
         ___awdiv (ARG)
     ___flmul
       ___awdiv (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
           ___flmul
             ___awdiv (ARG)
       ___xxtofl (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
     ___fltol
       ___awdiv (ARG)
       ___flmul (ARG)
         ___awdiv (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___wmul (ARG)
     __div_to_l_
     __tdiv_to_l_
     _floor (ARG)
       ___fladd
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___fltol (ARG)
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
           ___wmul (ARG)
         _fround (ARG)
           ___awdiv
           ___awmod
             ___awdiv (ARG)
             ___flmul (ARG)
               ___awdiv (ARG)
             ___fltol (ARG)
               ___awdiv (ARG)
               ___flmul (ARG)
                 ___awdiv (ARG)
           ___flmul
             ___awdiv (ARG)
       ___flge
         ___flmul (ARG)
           ___awdiv (ARG)
       ___fltol
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
       ___xxtofl
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
         ___wmul (ARG)
       _frexp
     _fround (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
       ___flmul
         ___awdiv (ARG)
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
       ___awmod
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)
         ___fltol (ARG)
           ___awdiv (ARG)
           ___flmul (ARG)
             ___awdiv (ARG)
       ___flmul
         ___awdiv (ARG)
       ___fltol (ARG)
         ___awdiv (ARG)
         ___flmul (ARG)
           ___awdiv (ARG)

 _highIsr (ROOT)
   _RX_isr
   _Timer1_isr
     ___lwmod (ARG)
     i2___wmul (ARG)
     i2_reloadTimer1 (ARG)
   ___lwmod
   _examine

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     47      49       7       28.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     60      64       5       78.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     52      67       1       81.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     114      34        0.0%
DATA                 0      0     114       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Jul 26 10:02:01 2022

           ?_read_adc_voltage 0099                i2_reloadTimer1 44B2                  ___fldiv@aexp 0098  
                ?_display7seg 0001                  ___fldiv@bexp 0097                             _f 0147  
                ___fldiv@sign 008C            ??_read_adc_voltage 0051                ?_lcd_send_byte 0020  
                          _p2 005B                  ___awdiv@sign 001D           ___wmul@multiplicand 001A  
                 __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000  
                __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000                   __CFG_OSC$XT 000000  
                 __CFG_LVP$ON 000000                   __CFG_WDT$ON 000000                           l210 4216  
                         l140 43F8                           l147 42D4                           l277 4470  
                         l279 446C                           l288 4482                           l456 17EC  
                         l289 4480                           l707 3800                           l740 3948  
                         l820 357C                           l901 3D24                           l911 3F62  
                         l826 35E2                           l819 3554                           l697 370A  
                         l995 1E76                           l996 1E6A                           l997 1E36  
                __CFG_CPB$OFF 000000                           _PR2 000FCB                  __CFG_CPD$OFF 000000  
                         _lcd 000F83                           _tes 00E0                  ___awmod@sign 0048  
                         prod 000FF3     read_adc_voltage@raw_value 00A2                           wreg 000FE8  
                ___flmul@aexp 002D                  ___flmul@bexp 0032                  ___flmul@sign 002C  
                ___flmul@temp 0037                  ___flmul@prod 0033                   main@channel 0146  
                 lcd_gotoxy@x 0023                   lcd_gotoxy@y 0022                  ___fltol@exp1 0042  
                        l1012 1FEA                          l1021 207E                          l1110 342E  
                        l1103 33B0                          l1051 2C0E                          l1060 2C46  
                        l1117 346A                          l1118 347E                          l1062 2CB4  
                        l1054 2BB6                          l1081 2E20                          l1090 3036  
                        l1098 30BC                          l4005 3F88                          l4023 3FB8  
                        l4015 3FA6                          l4009 3F90                          l5001 30DA  
                        l4019 3FB0                          l3411 40B2                          l3413 40BE  
                        l5021 3C54                          l3415 40CA                          l5031 3C76  
                        l5015 3C44                          l4081 4478                          l3409 409A  
                        l3521 351A                          l3505 443E                          l3419 40D6  
                        l5211 2ADE                          l3611 36D0                          l3515 34EE  
                        l5027 3C6A                          l5043 3C9C                          l5115 3322  
                        l5107 3254                          l3621 36F8                          l5029 3C72  
                        l5311 33C0                          l3623 3704                          l3615 36E0  
                        l3551 35A8                          l5047 3CAA                          l5039 3C92  
                        l5071 3E68                          l5063 3E4E                          l5135 27AE  
                        l4441 3EA6                          l5321 33F0                          l4433 433A  
                        l3561 35D0                          l5153 29B6                          l5129 270A  
                        l5331 3460                          l5323 3416                          l5243 2C0A  
                        l5219 2B0C                          l3571 3612                          l3563 35DC  
                        l3555 35B8                          l5083 3E94                          l5075 3E7C  
                        l5067 3E5C                          l5059 3E42                          l5147 2912  
                        l5139 27D8                          l4461 3EBA                          l4453 3EB2  
                        l4445 3EAA                          l4437 3EA2                          l5317 33DE  
                        l2941 42DA                          l5237 2BC2                          l5229 2B8A  
                        l4429 4326                          l5069 3E64                          l5501 16B6  
                        l5405 129C                          l4711 1D46                          l5343 34B0  
                        l5319 33E4                          l5255 2C5A                          l5175 2A22  
                        l3591 3672                          l5079 3E86                          l5503 16CA  
                        l5431 136E                          l5415 12EE                          l4473 3EC6  
                        l4465 3EBE                          l4457 3EB6                          l4449 3EAE  
                        l4705 1D22                          l3841 39D4                          l3825 3978  
                        l5329 3454                          l3809 3DD2                          l2945 43EC  
                        l4393 43D2                          l5281 2D46                          l5265 2CAE  
                        l5249 2C30                          l5169 29FE                          l3577 3630  
                        l5601 1AAC                          l4483 3ECE                          l4723 1D7A  
                        l4715 1D50                          l3851 39FC                          l5291 2D7C  
                        l5283 2D68                          l5275 2D04                          l5195 2A80  
                        l5179 2A2C                          l5531 17F0                          l5507 16F6  
                        l5443 141C                          l5363 1118                          l4477 3ECA  
                        l4469 3EC2                          l3781 3784                          l3853 3A08  
                        l3845 39E4                          l2981 4184                          l4389 43C0  
                        l5189 2A5C                          l5621 1B64                          l5613 1B18  
                        l5525 17BA                          l5509 16FE                          l5517 1792  
                        l5445 1432                          l5357 10F8                          l4823 2032  
                        l3791 3838                          l3855 3A0E                          l2975 416E  
                        l2983 4188                          l2991 41AC                          l5279 2D32  
                        l5199 2A8A                          l3871 3CE2                          l3599 36A2  
                        l5623 1B70                          l5615 1B22                          l5607 1AE0  
                        l5543 1882                          l5527 17CE                          l5519 17A0  
                        l5455 14CE                          l5447 146E                          l5439 13EE  
                        l5383 11E6                          l4817 201C                          l4833 2052  
                        l4809 1FCA                          l4753 1DB6                          l4681 1CB4  
                        l3785 37C2                          l3777 3750                          l2985 418C  
                        l5289 2D78                          l3881 3D16                          l3873 3CE6  
                        l4913 2E2C                          l5641 1C54                          l5561 1990  
                        l5553 1968                          l5473 15DE                          l5449 1484  
                        l5393 1248                          l5369 114A                          l5377 11BE  
                        l5713 21A0                          l5705 217E                          l4843 2078  
                        l4827 203E                          l4835 2058                          l4771 1E5A  
                        l4691 1CE2                          l3859 3A24                          l2979 4180  
                        l3891 3F2C                          l4907 2E0C                          l5635 1BC4  
                        l5619 1B5A                          l5555 1976                          l5539 1820  
                        l5491 167A                          l5475 15E4                          l5459 14FC  
                        l5563 199E                          l5387 1222                          l5643 1C6A  
                        l5723 21D6                          l5715 21AC                          l5707 218A  
                        l4861 2108                          l4853 20D4                          l4781 1E9A  
                        l4765 1E4A                          l2989 4192                          l3869 3CD6  
                        l3893 3F30                          l4917 2E3E                          l4909 2E10  
                        l5629 1B96                          l5581 1A0E                          l5573 19E2  
                        l5469 1566                          l5645 1C88                          l5397 124E  
                        l5389 1238                          l4791 1EDE                          l4767 1E50  
                        l4687 1CD8                          l5663 388C                          l3799 4288  
                        l5639 1C4E                          l5495 169C                          l5487 162A  
                        l5399 1282                          l5743 227E                          l5735 2230  
                        l5719 21CC                          l4873 212C                          l4865 2114  
                        l4857 20E6                          l3897 3F54                          l3889 3F20  
                        l5593 1A54                          l5761 2320                          l5753 22A8  
                        l4867 2118                          l4795 1EE8                          l4699 1D0E  
                        l5667 38AE                          l5659 3878                          l4891 2DD0  
                        l5579 1A08                          l5499 16AE                          l5739 2240  
                        l5747 2284                          l4789 1ED8                          l4965 2FFE  
                        l4893 2DE0                          l5597 1A7C                          l4799 1EFA  
                        l4991 30A6                          l4975 3032                          l4959 2FE0  
                        l5767 23B0                          l4985 307A                          l4889 2DCC  
                        l5787 24D0                          l4989 3098                          STR_1 10A6  
                        STR_2 10B6                          STR_3 10C3                          STR_4 1091  
                        STR_5 10D0                          STR_6 10DD                          STR_7 10D0  
                        u3411 34FE                          _PIE1 000F9D                          _PIE2 000FA0  
                        u5130 1E00                          u5140 1E18                          u6020 2D18  
                        u2565 413E                          u5150 1E1A                          u2566 4140  
                        u3391 34D2                          u5510 2FA2                          u3850 3DFA  
                        u5515 2F98                          u6420 17E4                          u3870 3996  
                        _PIR1 000F9E                          u3858 3DFC                          u3875 398C  
                        u5590 3088                          u6710 21B6                          i2l92 3A8E  
                        u6660 389C                          i2l96 3ABE                          u6728 21B8  
                        u6857 4166                          u6867 43EE              ?_lcd_send_nibble 0001  
                 main@raw_val 012C                          _main 213E              _send_byte_no_lib 447C  
                        _size 005D                          fsr0h 000FEA                          fsr1h 000FE2  
                        fsr0l 000FE9                          fsr2h 000FDA                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                          btemp 0068  
                        _strr 0065                          pclat 000FFA                          prodh 000FF4  
                        prodl 000FF3                          start 0016                 __CFG_IESO$OFF 000000  
             ___fldiv@new_exp 0091                   main@voltage 0133        __end_ofi2_reloadTimer1 44BC  
                _sprintf$2071 00C5                 __CFG_MCLRE$ON 000000                  ___param_bank 000010  
        __end_of_delay_cycles 42F6                 ___fltol@sign1 0041               __end_of___fladd 213E  
                       ?_main 0001               __end_of___fldiv 2DA0               __end_of___awdiv 3CB4  
             __end_of___flneg 429A               __end_of___awmod 3E9E               __end_of___flmul 30F0  
             __end_of___flsub 4134               __end_of___fltol 3A36               __end_of___lldiv 3D36  
             ___awdiv@divisor 001A                         _T1CON 000FCD               __end_of___llmod 3F74  
                       _T2CON 000FCA               __end_of___lwmod 4200                         i2l346 431C  
                       i2l347 431A                         i2l964 41F6               ___awdiv@counter 001C  
                       _RCREG 000FAE                         _RCSTA 000FAB                         _TMR1H 000FCF  
                       _TMR1L 000FCE                         _SPBRG 000FAF                         _PORTA 000F80  
                       _PORTD 000F83       read_adc_voltage@channel 00A1                         _TRISA 000F92  
                       _TRISB 000F93                         _TRISC 000F94                         _TRISD 000F95  
                       _TRISE 000F96                         _TXREG 000FAD                         _TXSTA 000FAC  
               __CFG_PWRT$OFF 000000                  display7seg@v 0018                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000               __end_of_highIsr 3AFA  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers 1091               __end_of_examine 4096  
                       _floor 383C                         _frexp 3DB4                         _errno 0059  
                       _scale 25C8               __end_of_isdigit 4446               _init_adc_no_lib 449C  
                       _test0 0060                         tablat 000FF5              __end_ofi2___wmul 439A  
                       status 000FD8       read_adc_voltage@voltage 009D               __end_of_sprintf 1C96  
              __CFG_PBADEN$ON 000000               ?i2_reloadTimer1 0001                main@RecvedChar 0139  
             __initialization 3FD6                  __end_of_main 25C8               ??_lcd_send_byte 0021  
                      ??_main 0052                 __activetblptr 000002                 ?_initTimers01 0001  
        __size_of__tdiv_to_l_ 0132                        _ADCON0 000FC2                        _ADCON1 000FC1  
                      _ADCON2 000FC0                        ?_floor 00AD                        ?_frexp 0018  
            ___llmod@dividend 0025                        ?_scale 0049                        _ADRESH 000FC4  
                      _ADRESL 000FC3                        _CCPR1L 000FBE              ___awdiv@dividend 0018  
                      i2l4513 3ABA                        i2l4491 41D4                        i2l4493 41D8  
                      _INTCON 000FF2                        i2l3961 3D80                        i2l4497 41EC  
                      i2l4489 41CC                        i2l3967 3DAE                        i2l3975 4066  
                      _SPBRGH 000FB0              __end_of___xxtofl 34C2              __end_of_delay_ms 4406  
                      _RX_isr 42F6                __CFG_XINST$OFF 000000              __end_of__powers_ 1069  
                  _Timer1_isr 3D36              __end_of_lcd_init 3FD6                        ___flge 371C  
            __end_of_lcd_putc 40EC              __end_of_lcd_puts 43E2          read_adc_temp@channel 00B5  
                   ??___fladd 00A1                        ___wmul 434E                     ??___fldiv 0088  
                   ??___awdiv 001C                     ??___flneg 001C                __CFG_STVREN$ON 000000  
                   ??___awmod 0047                     ??___flmul 0028                     ??___flsub 0051  
                   ??___fltol 003D                     ??___lldiv 0020                     ??___llmod 002D  
                   ??___lwmod 0005        __size_of_read_adc_temp 00AE                        _fround 30F0  
                      clear_0 3FE2              ___awdiv@quotient 001E          __size_of_display7seg 0070  
             ___awmod@divisor 0045               ___awmod@counter 0047                        main@AN 013A  
                   ??_highIsr 000A                        floor@i 00B1                        floor@x 00AD  
              ??_initTimers01 0018       __end_of_init_adc_no_lib 44A8                     ??_examine 0001  
                __pdataCOMRAM 0061                     ??_isdigit 0018                 main@threshold 012F  
                __mediumconst 0000           send_string_no_lib@p 0019                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8            _send_string_no_lib 4324  
                ?_setupSerial 0001                     ??_sprintf 00C1                    ___flge@ff1 0039  
                  ___flge@ff2 003D                  ___xxtofl@arg 004D                  ___xxtofl@exp 004C  
                ___xxtofl@val 0043                    __accesstop 0080       __end_of__initialization 4028  
                  ___flneg@f1 0018           ?_send_string_no_lib 0019             ?_read_byte_no_lib 0001  
               ___rparam_used 000001                    ___fltol@f1 0039            ??_read_byte_no_lib 0018  
              __pcstackCOMRAM 0001         __size_of_delay_cycles 002E                  __pidataBANK0 44CB  
               __end_of_floor 395A                 __end_of_frexp 3E2E                 __end_of_scale 29E0  
           read_adc_temp@temp 00B1          ??_send_string_no_lib 001B      __end_of_send_byte_no_lib 448C  
                   ?i2___wmul 0001                    __div_to_l_ 35F4     __size_of_read_adc_voltage 0088  
           lcd_gotoxy@address 0024               __div_to_l_@exp1 0025                       ??_floor 0051  
             __div_to_l_@cntr 0024                       ??_frexp 001E                       ??_scale 004D  
             __div_to_l_@quot 0020                  sprintf@width 00CD                 _read_adc_temp 3AFA  
                  __pbssBANK1 0147   __end_of_read_adc_raw_no_lib 423A                  _delay_cycles 42C8  
               __div_to_l_@f1 0018                 __div_to_l_@f2 001C            __size_of_init_pwm1 0010  
           read_byte_no_lib@c 0018                       ?_RX_isr 0001                 ?_reloadTimer1 0001  
                 ?_Timer1_isr 0007                lcd_send_byte@n 0020                       ?___flge 0039  
                     ?___wmul 0018              lcd_send_nibble@n 001F                       _CCP1CON 000FBD  
                     ?_fround 0049                    ??i2___wmul 0005              ?_init_adc_no_lib 0001  
                   ?___xxtofl 0043                     ?_delay_ms 0018                    _lcd_gotoxy 417C  
                 Timer1_isr@f 0007                ?_read_adc_temp 00AD                     ?_lcd_init 0001  
                   ?_lcd_putc 0001                     ?_lcd_puts 0026              ??i2_reloadTimer1 0001  
              ??_reloadTimer1 0018          __end_of_initTimers01 426C             _is_byte_available 4464  
           __end_of__npowers_ 1035                       __Hparam 0000               __size_of_RX_isr 002E  
                  _scale$2070 004D                       __Lparam 0000      __size_of_lcd_send_nibble 0022  
          ?_is_byte_available 0001               __size_of___flge 0120                       ___fladd 1C96  
                     ___fldiv 29E0                       ___awdiv 3C30                       ___flneg 426C  
                     ___awmod 3E2E                       ___flmul 2DA0                       ___flsub 40EC  
                     ___fltol 395A                       ___lldiv 3CB4               __size_of___wmul 0026  
                     ___llmod 3F0E                       ___lwmod 41BE                 ?_set_pwm1_raw 0018  
                __psmallconst 1000                       __pcinit 3FD6               __size_of_fround 0282  
                     __ramtop 1000           ??_is_byte_available 0018                       __ptext0 213E  
                     __ptext1 10E8                       __ptext2 25C8                       __ptext3 4428  
                     __ptext4 30F0                       __ptext5 2DA0                       __ptext6 3E2E  
                     __ptext7 3C30                       __ptext8 34C2                       __ptext9 35F4  
                     _highIsr 0008                     _T1CONbits 000FCD                   ?__div_to_l_ 0018  
                     _dpowers 1069                       _examine 4036                     _T2CONbits 000FCA  
                     _isdigit 4428                    ??___xxtofl 0047             __end_of_init_pwm1 449C  
            ___awmod@dividend 0043                    ??_delay_ms 001A           __size_of_Timer1_isr 007E  
                     _sprintf 10E8                    ??_lcd_init 0022                __pintcode_body 3A36  
                  ??_lcd_putc 0025                    ??_lcd_puts 0028          end_of_initialization 4028  
        __size_of_setupSerial 0024                 __Lmediumconst 0000     __end_of_is_byte_available 447C  
                     int_func 3A36           i2___wmul@multiplier 0001          lcd_send_byte@cm_data 0021  
             ___lldiv@divisor 001C               ___lldiv@counter 0024                     _RCSTAbits 000FAB  
                     postdec1 000FE5                       postdec2 000FDD                       postinc0 000FEE  
                     postinc2 000FDE                ??_set_pwm1_raw 001A                __tdiv_to_l_@f1 0018  
              __tdiv_to_l_@f2 001C         __end_of_lcd_send_byte 417C              setupSerial@dummy 0018  
               ??__tdiv_to_l_ 0020                     _PORTBbits 000F81                     _PORTCbits 000F82  
                   _PORTEbits 000F84                    _setupPorts 4446                   ___fladd@grs 00AC  
               ___xxtofl@sign 004B              _read_adc_voltage 3BA8                     _TRISCbits 000F94  
                 ?_lcd_gotoxy 0022               ??_read_adc_temp 0051                   ___fldiv@grs 0093  
                  main@Buffer 0100                   ___fldiv@rem 008D               _LCD_INIT_STRING 0061  
                   _RPS_count 0053                   ___flmul@grs 002E                   _CCP1CONbits 000FBD  
                   _TXSTAbits 000FAC           __size_of__div_to_l_ 0128                __end_of_RX_isr 4324  
           send_byte_no_lib@c 0018                 ??_display7seg 0018                __end_of___flge 383C  
              __end_of___wmul 4374                   _BAUDCONbits 000FB8                 __pidataCOMRAM 44C4  
               delay_cycles@n 001B                 delay_cycles@x 001C             ??_lcd_send_nibble 001E  
   __size_of_read_byte_no_lib 0008                __end_of_fround 3372                    floor@expon 00B5  
            i2___wmul@product 0005             ?_send_byte_no_lib 0001          __end_of_reloadTimer1 44B2  
         start_initialization 3FD6             __size_ofi2___wmul 0026            ??_send_byte_no_lib 0018  
            main@SendToSerial 012E           __end_of__tdiv_to_l_ 35F4         __size_of_initTimers01 0032  
                  frexp@value 0018    __size_of_is_byte_available 0018               ___llmod@divisor 0029  
             ___llmod@counter 002D                      ??_RX_isr 0001                  ??_Timer1_isr 0009  
                    ??___flge 0041           __size_of_lcd_gotoxy 0042                      ??___wmul 001C  
                 __pdataBANK0 00E0  read_adc_raw_no_lib@raw_value 001D              __CFG_LPT1OSC$OFF 000000  
                    ??_fround 004D                 sprintf@tmpval 00CF   __size_of_send_string_no_lib 002A  
                 ?_setupPorts 0001           __end_of_display7seg 3F0E                     ___fladd@a 009D  
                   ___fladd@b 0099                    fround@prec 0088                     ___fldiv@a 0084  
                   ___fldiv@b 0080                  _initTimers01 423A                     ___flmul@a 0024  
                   ___flmul@b 0020                   __pbssCOMRAM 0053                     ___flsub@a 00B1  
                   ___flsub@b 00AD                 __pcstackBANK0 0080                 __pcstackBANK1 0100  
                _ReceivedChar 005F             __size_of___xxtofl 0150                  _isdigit$1714 0019  
           __size_of_delay_ms 0024            __end_of_Timer1_isr 3DB4          __end_of_set_pwm1_raw 42C8  
           __size_of_lcd_init 0062                   sprintf@flag 00CB             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0024                   sprintf@fval 00D9                   sprintf@prec 00DD  
                   _main$2065 0120                     _main$2066 0124                     _main$2067 0128  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  __size_of_read_adc_raw_no_lib 003A  
                    ?___fladd 0099                      ?___fldiv 0080                      ?___awdiv 0018  
                    ?___flneg 0018                      ?___awmod 0043                      ?___flmul 0020  
                    ?___flsub 00AD                      ?___fltol 0039                      ?___lldiv 0018  
                    ?___llmod 0025                     __npowers_ 1001                      ?___lwmod 0001  
                 __tdiv_to_l_ 34C2                      ?_highIsr 0001                  ??__div_to_l_ 0020  
                 __smallconst 1000                      ?_examine 0001                      ?_isdigit 0001  
                    ?_sprintf 00B7                __size_of_floor 011E                     _init_pwm1 448C  
              __size_of_frexp 007A                __size_of_scale 0418      __size_of_init_adc_no_lib 000C  
              ___wmul@product 001C                     delay_ms@n 0018                     delay_ms@x 001A  
                    _PIE1bits 000F9D           __size_of_setupPorts 001E                      i2u162_40 4302  
                    i2u410_40 3D6A                      i2u163_48 4304                      i2u412_40 3D8C  
                    i2u411_48 3D6C                      i2u413_40 3D96                      i2u414_48 3D98  
                    _PIR1bits 000F9E            __end_of__div_to_l_ 371C      __end_of_read_adc_voltage 3C30  
                    _RCONbits 000FD0              __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 001C  
                 _display7seg 3E9E         __size_of_reloadTimer1 000A              _read_byte_no_lib 44BC  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0018                      i2___wmul 4374  
                   lcd_init@i 0022                     lcd_putc@c 0025                     lcd_puts@s 0026  
                ??_lcd_gotoxy 0023                 ??_setupSerial 0018                    ?_init_pwm1 0001  
                   copy_data0 3FFC                     copy_data1 401C                     frexp@eptr 001C  
             _lcd_send_nibble 4406                  _reloadTimer1 44A8                      __Hrparam 0000  
       set_pwm1_raw@raw_value 0018                      __Lrparam 0000            __CFG_BOREN$SBORDIS 000000  
     __size_ofi2_reloadTimer1 000A            __end_of_lcd_gotoxy 41BE              __size_of___fladd 04A8  
            __size_of___fldiv 03C0              __size_of___awdiv 0084              __size_of___flneg 002E  
            __size_of___awmod 0070              __size_of___flmul 0350              __size_of___flsub 0048  
            __size_of___fltol 00DC         i2___wmul@multiplicand 0003              __size_of___lldiv 0082  
            __size_of___llmod 0066              __size_of___lwmod 0042                   _fround$2068 0084  
                 _fround$2069 0080              __size_of_highIsr 3AF2                    sprintf@exp 00D7  
                  sprintf@val 00D3                      ___xxtofl 3372              __size_of_examine 0060  
       __size_of_set_pwm1_raw 002E              __size_of_isdigit 001E                      _delay_ms 43E2  
                    __ptext10 3F0E                      __ptext11 3CB4                      __ptext20 3BA8  
                    __ptext12 40EC                      __ptext21 3AFA                      __ptext13 426C  
                    __ptext30 4406                      __ptext22 4200                      __ptext14 439A  
                    __ptext31 42C8                      __ptext23 434E                      __ptext15 4446  
                    __ptext40 3372                      __ptext32 43E2                      __ptext24 29E0  
                    __ptext16 429A                      __ptext41 395A                      __ptext33 4464  
                    __ptext25 43BE                      __ptext17 4324                      __ptext50 4374  
                    __ptext42 371C                      __ptext34 448C                      __ptext26 4096  
                    __ptext18 447C                      __ptext51 42F6                      __ptext43 1C96  
                    __ptext35 449C                      __ptext27 417C                      __ptext19 44BC  
                    __ptext44 3E9E                      __ptext36 423A                      __ptext28 3F74  
                    __ptext37 44A8                      __ptext29 4134                      __ptext46 4036  
                    __ptext38 383C                      __ptext47 41BE                      __ptext39 3DB4  
                    __ptext48 3D36                      __ptext49 44B2                      __powers_ 1035  
       __end_of_read_adc_temp 3BA8                      _lcd_init 3F74                      _lcd_putc 4096  
                    _lcd_puts 43BE              __size_of_sprintf 0BAE                      _count_t1 0055  
                    _count_t2 0057        __size_of_lcd_send_byte 0048                 ?_delay_cycles 0001  
               __size_of_main 048A     __size_of_send_byte_no_lib 0010           __end_of_setupSerial 43BE  
           ??_init_adc_no_lib 0018                      int$flags 0068                  _set_pwm1_raw 429A  
                    main@flag 0137        read_adc_temp@raw_value 00B6                  ??_setupPorts 0018  
                  _INTCONbits 000FF2                      isdigit@c 001A           _read_adc_raw_no_lib 4200  
                    scale@scl 0051                   ??_init_pwm1 0018                      intlevel2 0000  
                   sprintf@ap 00C9       __end_of_lcd_send_nibble 4428              __tdiv_to_l_@exp1 0028  
            __tdiv_to_l_@cntr 0027                     sprintf@sp 00B7                ??_delay_cycles 0018  
            __tdiv_to_l_@quot 0023              ___lwmod@dividend 0001              ___lldiv@dividend 0018  
          __end_of_setupPorts 4464          ?_read_adc_raw_no_lib 0018    __end_of_send_string_no_lib 434E  
               _lcd_send_byte 4134                  ?__tdiv_to_l_ 0018                      sprintf@c 00DF  
                    sprintf@f 00B9              ___lldiv@quotient 0020               ___lwmod@divisor 0003  
             ___lwmod@counter 0005                   _setupSerial 439A                 ___fladd@signs 00A9  
                ___fladd@aexp 00AA                  ___fladd@bexp 00AB      __end_of_read_byte_no_lib 44C4  
       ??_read_adc_raw_no_lib 001A  
